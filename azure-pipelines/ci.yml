trigger:
- master

variables:
  NodeVersion: '13.x'
  VAR_BUILD_ARTIFACT_STAGING_DIRECTORY: $(Build.ArtifactStagingDirectory)
  VAR_ARIFACT_NAME: "drop"
  parallelTest: false

jobs:
  - job: ESLint
    pool:
      vmImage: 'vs2017-win2016'
    steps:
      - script: 'cd tools\autoconfig && npm install && cd ..\..'
        displayName: 'install autoconfig dependencies'
      - task: Npm@1
        displayName: 'npm install'
        inputs:
          verbose: false
      - script: 'node_modules\.bin\eslint . --ext .ts --ignore-pattern node_modules/ --ignore-pattern dist/'
        displayName: 'eslint'
        
  - job: Build
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macos-latest'
        windows:
          imageName: 'windows-latest'
    pool:
      vmImage: $(imageName)
      pythonVersion: '3.6'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '$(NodeVersion)'
        displayName: 'Install Node.js $(NodeVersion)'
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: 3.7
      - task: Npm@1
        displayName: 'npm install'
        inputs:
          verbose: false
      - script: 'npm run build'
        displayName: 'npm build'
      - script: 'npm pack'
        displayName: 'npm pack'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)'
          ArtifactName: '$(VAR_ARIFACT_NAME)'
          publishLocation: 'Container'
          
  - job: TestReport
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macos-latest'
        windows:
          imageName: 'windows-latest'
    pool:
      vmImage: $(imageName)
      pythonVersion: '3.6'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '$(NodeVersion)'
        displayName: 'Install Node.js $(NodeVersion)'
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: 3.7
      - task: Npm@1
        displayName: 'npm install'
        inputs:
          verbose: false
      - script: 'npm run build'
        displayName: 'npm build'
      - script: 'npm run test-report'
        displayName: 'npm test-report'
        env:
          NODE_OPTIONS: --max_old_space_size=65536
  - job: Analyze
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macos-latest'
        windows:
          imageName: 'windows-latest'
    pool:
      vmImage: $(imageName)
      pythonVersion: '3.6'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '$(NodeVersion)'
        displayName: 'Install Node.js $(NodeVersion)'
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: 3.7
      - task: Npm@1
        displayName: 'npm install'
        inputs:
          command: install
      - task: Npm@1
        displayName: 'npm audit'
        condition: and(succeeded(), eq(variables['RunNpmAudit'], 'true'))
        inputs:
          command: custom
          customCommand: 'audit'

  - job: Windows
    displayName: CredScan
    pool:
      vmImage: "windows-2019"
    steps:
      - task:  ea576cd4-c61f-48f8-97e7-a3cb07b90a6f@3
        inputs:
          toolMajorVersion: 'V1'
      - task: f5679091-e6da-4974-a8dc-0eec03a8ea63@1
        inputs:
          AllTools: false
          APIScan: false
          BinSkim: false
          CodesignValidation: false
          CredScan: true
          FortifySCA: false
          FxCop: false
          ModernCop: false
          PoliCheck: false
          RoslynAnalyzers: false
          SDLNativeRules: false
          Semmle: false
          TSLint: false
          ToolLogsNotFoundAction: 'Standard'
