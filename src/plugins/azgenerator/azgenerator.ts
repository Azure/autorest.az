import { Channel, Host, startSession } from '@azure-tools/autorest-extension-base';
import { CodeModel, codeModelSchema } from '@azure-tools/codemodel';
import { EOL } from "os";
import { isNullOrUndefined } from 'util';
import { GenerationMode } from "../models";
import { AzGeneratorFactory } from "./AzGeneratorFactory";
import { CodeModelCliImpl } from "./CodeModelAzImpl";

export async function processRequest(host: Host) {
    const debug = await host.GetValue('debug') || false;
    try {
        const session = await startSession<CodeModel>(host, {}, codeModelSchema);
        let model = new CodeModelCliImpl(session);
        const cliCoreLib: string = await host.GetValue('cli-core-lib');
        if (!isNullOrUndefined(cliCoreLib) && cliCoreLib.length > 0) {
            model.CliCoreLib = cliCoreLib;
        }

        // Read the argument of generation-mode, detect if needed
        let generationMode = await host.GetValue('generation-mode') || "auto";
        host.Message({ Channel: Channel.Information, Text: "Input generation-mode is: " + generationMode });

        if (String(generationMode).toLowerCase() == "full") {
            session.model.language['az']['generation-mode'] = GenerationMode.Full;
        }
        else if (String(generationMode).toLowerCase() == "incremental") {
            session.model.language['az']['generation-mode'] = GenerationMode.Incremental;
        }
        else {
            // Handel Auto
            let options = await session.getValue('az');
            let extensionName = options['extensions'];
            let usingCodeGenBefore = await isExistingCliByCodegen(host, extensionName);
            if (usingCodeGenBefore == true) {
                host.Message({ Channel: Channel.Information, Text: "Existing Cli is genreated by code gen before." });
                session.model.language['az']['generation-mode'] = GenerationMode.Full;
            }
            else {
                host.Message({ Channel: Channel.Information, Text: "Existing Cli is genreated by manual before." });
                session.model.language['az']['generation-mode'] = GenerationMode.Incremental;
            }
        }
        host.Message({ Channel: Channel.Information, Text: "generation-mode in code model is: " + GenerationMode[session.model.language['az']['generation-mode']] });

        let generator = await AzGeneratorFactory.createAzGenerator(model, debug);
        generator.generateAll();
        let files = generator.files;

        if (model.SelectFirstExtension()) {
            do {
                let path = "azext_" + model.Extension_Name.replace("-", "_") + "/";
                session.protectFiles(path + "manual");
                session.protectFiles(path + "tests/latest/recordings")
            } while (model.SelectNextExtension());
        }

        // Remove the README.md from the write file list if it is exists
        let notGeneratedFileifExist: Array<string> = ["README.md"];
        for (let entry of notGeneratedFileifExist) {
            let exist = await host.ReadFile(entry);
            if (exist) {
                delete files[entry];
            }
        }

        for (let f in files) {
            host.WriteFile(f, files[f].join(EOL));
        }
    } catch (E) {
        if (debug) {
            console.error(`${__filename} - FAILURE  ${JSON.stringify(E)} ${E.stack}`);
        }
        throw E;
    }
}

async function isExistingCliByCodegen(host: Host, name: String): Promise<Boolean> {
    // Verify the __init__.py in generated folder
    let az_name = "azext_" + name.replace("-", "_");
    let path = az_name + "/__init__.py";
    let exist = await host.ReadFile(path);
    if (exist) {
        if (String(exist).indexOf("# Code generated by Microsoft (R) AutoRest Code Generator.") != -1) {
            return true;
        }
    }
    return false;
}