# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
{% if data.actions.length != 0 %}
{% for pylint in data.pylints %}
{{pylint}}
{% endfor %}

import argparse
from collections import defaultdict
from knack.util import CLIError
{% endif %}


{% for action in data.actions %}
{% if action.actionType == 'KeyValue' %}
class {{action.actionName}}(argparse.{{action.baseClass}}):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        {% if action.type == 'array' -%} 
        super({{action.actionName}}, self).__call__(parser, namespace, action, option_string)
        {% else -%}
        namespace.{{action.mapsTo}} = action
        {%- endif %}

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            {% if action.type != 'dictionary' or action.subProperties.length > 0 %}
            kl = k.lower()
            {% endif %}
            v = properties[k]
            {% if action.type != 'dictionary' or action.subProperties.length > 0 %}
            {% for subprop in action.subProperties %}
            {% if loop.first %}if{% else %}elif{% endif %} kl == '{{subprop.nameAz}}':
                sub_d = d
                {% for parentKey in subprop.parentKeys %}
                if '{{parentKey}}' not in sub_d:
                    sub_d['{{parentKey}}'] = {}
                sub_d = sub_d['{{parentKey}}']
                {% endfor %}
                {% if subprop.type == 'array' %}
                sub_d['{{subprop.namePython}}'] = v
                {% else %}
                sub_d['{{subprop.namePython}}'] = v[0]
                {% endif %}
            {% endfor %}
            {% if action.subProperties.length > 0 %}
            else:
                raise CLIError('Unsupported Key {} is provided for parameter {{action.mapsTo | replace("_", "-")}}. All possible keys are: {{ action.subPropertiesNameAz | join(', ') }}'.
                format(k))
            {% endif %}
            {% else %}
            {% if subprop.type == 'array' %}
            d[k] = v
            {% else %}
            d[k] = v[0]
            {% endif %}
            {% endif %}
        {% for key, value in action.constants %}
        d[{{key}}] = {{value}}
        {% endfor %}
        return d
{% elif 'Positional' == action.actionType %}

class {{action.actionName}}(argparse.{{action.baseClass}}):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        {% if action.type == 'array' %} 
        for item in action:
           super({{action.actionName}}, self).__call__(parser, namespace, item, option_string)
        {% else %}
        namespace.{{action.mapsTo}} = action[0]
        {% endif %}

    def get_action(self, values, option_string=None):
        try:
            value_keys = [{% for item in action.subPropertiesNamePython %}'{{item}}', {% endfor %}]
            value_list = [dict(zip(value_keys, values[x:x+{{action.subProperties.length}}])) for x in range(0, len(values), {{action.subProperties.length}})]
            return value_list
        except ValueError:
            raise CLIError('usage error: {} NAME METRIC OPERATION VALUE'.format(option_string))
{% elif 'ShortHandSyntax' == action.actionType %} 

class {{action.actionName}}(argparse.{{action.baseClass}}):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        {% if action.type == 'array' %} 
        for item in action:
           super({{action.actionName}}, self).__call__(parser, namespace, item, option_string)
        {% else %}
        namespace.{{action.mapsTo}} = action[0]
        {% endif %}

    def get_action(self, values, option_string):
        ret = []
        for item in values:
            properties = defaultdict(list)
            try:
                for (k, v) in (x.split('=', 1) for x in item.split(',')):
                    properties[k].append(v)
                properties = dict(properties)
            except ValueError:
                raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
            d = {}
            for k in properties:
                {% if action.type != 'dictionary' or action.subProperties.length > 0 %}
                kl = k.lower()
                {% endif %}
                v = properties[k]
                {% if action.type != 'dictionary' or action.subProperties.length > 0 %}
                {% for subprop in action.subProperties %}
                {% if loop.first %}if{% else %}elif{% endif %} kl == '{{subprop.nameAz}}':
                    sub_d = d
                    {% for parentKey in subprop.parentKeys %}
                    if '{{parentKey}}' not in sub_d:
                        sub_d['{{parentKey}}'] = {}
                    sub_d = sub_d['{{parentKey}}']
                    {% endfor %}
                    {% if subprop.type == 'array' %}
                    sub_d['{{subprop.namePython}}'] = v
                    {% else %}
                    sub_d['{{subprop.namePython}}'] = v[0]
                    {% endif %}
                {% endfor %}
                {% if action.subProperties.length > 0 %}
                else:
                    raise CLIError('Unsupported Key {} is provided for parameter {{action.nameAz}}. All possible keys are: {{ action.subPropertiesNameAz | join(', ') }}'.
                    format(k))
                {% endif %}
                {% else %}
                {% if subprop.type == 'array' %}
                d[k] = v
                {% else %}
                d[k] = v[0]
                {% endif %}
                {% endif %}
            ret.append(d)
        return ret

{% endif %}
{% endfor %}
