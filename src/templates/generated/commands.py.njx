# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
{%- for pylint in data.pylints %}
{{ pylint }}
{%- endfor %}

{% for lib, items in data.imports -%}
{% if items.length == 1 -%}
from {{lib}} import {{items[0]}}
{% else -%}
from {{lib}} import (
    {% for item in items -%}
    {{item}}{%- if not loop.last -%},{%- endif %}
    {% endfor -%}
)
{% endif -%}
{%- endfor %}
{%- if data.hasExtension -%}
{%- for extension in data.Extensions -%}
{%- for commandGroup in extension.CommandGroups %}
{% if commandGroup.hasCommand %}
{{commandGroup.customCommandTypeName}} = CliCommandType(
    operations_tmpl='{{commandGroup.operationTmplName}}',
    client_factory={{commandGroup.clientFactoryName}})
{% endif %}
{% endfor %}
{% endfor %}
{% endif -%}

def load_command_table(self, _):
{%- if data.hasExtension -%}
{%- for extension in data.Extensions -%}
{% set extensionModeDefined = false %}
{% set groupMode = extension.mode %}
{%- for commandGroup in extension.CommandGroups %}

{% if commandGroup.hasCommand %}
    with self.command_group('{{commandGroup.name}}', {{commandGroup.customCommandTypeName}}, client_factory={{commandGroup.clientFactoryName}}
                            {%- for key, value in commandGroup.propertiesString %}
                                {% if key != 'mode' %}
                                    , {{key}}={{value}}
                                {% else %}
                                    {% if commandGroup.name == extension.name %}
                                        {% set extensionModeDefined = true %}
                                    {% endif %}
                                    {% if (value != "stable" and ((value != extension.mode) or (commandGroup.name == extension.name))) %}
                                        , is_{{value}}=True
                                    {% endif %}
                                    {% set groupMode = value %}
                                {% endif %}
                            {% endfor -%}) as g:   
        {%- for command in commandGroup.Commands %}
        g.{{command.type}}('{{command.methodName}}'{%- if command.type != 'generic_update_command' %}, '{{command.functionName}}'{% endif -%}
                            {%- for key, value in command.propertiesString %}
                                {% if key != 'mode' %}
                                    , {{key}}={{value|safe}}
                                {% elif value != groupMode and value != "stable" %}
                                    , is_{{value}}=True
                                {% endif %}
                            {% endfor -%})
        {%- endfor %}
        {% if commandGroup.needWaitCommand -%} 
        g.custom_wait_command('wait', '{{commandGroup.showCustomFunctionName}}')
        {%- endif %}
{% endif %}
{%- endfor %}
{% if not extensionModeDefined and extension.mode != 'stable' %}
    with self.command_group('{{extension.name}}', is_{{extension.mode}}=True):
        pass
{% endif %}
{%- endfor %}
{%- else %}
    pass
{%- endif %}
