# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
{% for pylint in data.pylints %}
{{pylint}}
{% endfor %}

def offazure_hyperv_site_patch_site(client,
                                    subscription_id,
                                    resource_group_name,
                                    site_name,
                                    name=None,
                                    tags=None,
                                    e_tag=None,
                                    location=None,
                                    service_principal_identity_details=None,
                                    agent_details=None,
                                    discovery_solution_id=None,
                                    appliance_name=None):
    body = {}
    body['name'] = name
    body['tags'] = tags
    body['e_tag'] = e_tag
    body['location'] = location
    body['properties'] = {}
    body['properties']['service_principal_identity_details'] = service_principal_identity_details
    body['properties']['agent_details'] = agent_details
    body['properties']['discovery_solution_id'] = discovery_solution_id
    body['properties']['appliance_name'] = appliance_name
    return client.patch_site(subscription_id=subscription_id,
                             resource_group_name=resource_group_name,
                             site_name=site_name,
                             body=body)


def datafactory_factory_configure_factory_repo(client,
                                               location,
                                               factory_resource_id=None,
                                               factory_vsts_configuration=None,
                                               factory_git_hub_configuration=None):
    all_repo_configuration = []
    if factory_vsts_configuration is not None:
        all_repo_configuration.append(factory_vsts_configuration)
    if factory_git_hub_configuration is not None:
        all_repo_configuration.append(factory_git_hub_configuration)
    if len(all_repo_configuration) > 1:
        raise CLIError('at most one of  factory_vsts_configuration, factory_git_hub_configuration is needed for '
                       'repo_configuration!')
    repo_configuration = all_repo_configuration[0] if len(all_repo_configuration) == 1 else None
    return client.configure_factory_repo(location_id=location,
                                         factory_resource_id=factory_resource_id,
                                         repo_configuration=repo_configuration)


def datafactory_linked_service_update(instance,
                                      resource_group_name,
                                      factory_name,
                                      linked_service_name,
                                      if_match=None,
                                      connect_via=None,
                                      description=None,
                                      parameters=None,
                                      annotations=None):
    if connect_via is not None:
        instance.properties.connect_via = connect_via
    if description is not None:
        instance.properties.description = description
    if parameters is not None:
        instance.properties.parameters = parameters
    if annotations is not None:
        instance.properties.annotations = annotations
    return instance.properties


def datafactory_factory_list(client,
                             resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()