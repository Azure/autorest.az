# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class AcquisitionFunction(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Aquisition function
    """

    EI = "EI"
    PI = "PI"
    UCB = "UCB"

class BlobEventTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MICROSOFT_STORAGE_BLOB_CREATED = "Microsoft.Storage.BlobCreated"
    MICROSOFT_STORAGE_BLOB_DELETED = "Microsoft.Storage.BlobDeleted"

class DataFlowComputeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Compute type of the cluster which will execute data flow job.
    """

    GENERAL = "General"
    MEMORY_OPTIMIZED = "MemoryOptimized"
    COMPUTE_OPTIMIZED = "ComputeOptimized"

class DayOfWeek(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The days of the week.
    """

    SUNDAY = "Sunday"
    MONDAY = "Monday"
    TUESDAY = "Tuesday"
    WEDNESDAY = "Wednesday"
    THURSDAY = "Thursday"
    FRIDAY = "Friday"
    SATURDAY = "Saturday"

class DaysOfWeek(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUNDAY = "Sunday"
    MONDAY = "Monday"
    TUESDAY = "Tuesday"
    WEDNESDAY = "Wednesday"
    THURSDAY = "Thursday"
    FRIDAY = "Friday"
    SATURDAY = "Saturday"

class DomainServicePropertiesDomainConfigurationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Domain Configuration Type
    """

    FULLY_SYNCED = "FullySynced"
    RESOURCE_TRUSTING = "ResourceTrusting"

class DomainServicePropertiesSku(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Sku Type
    """

    STANDARD = "Standard"
    ENTERPRISE = "Enterprise"
    PREMIUM = "Premium"

class EventSubscriptionStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Event Subscription Status.
    """

    ENABLED = "Enabled"
    PROVISIONING = "Provisioning"
    DEPROVISIONING = "Deprovisioning"
    DISABLED = "Disabled"
    UNKNOWN = "Unknown"

class FactoryIdentityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The identity type. Currently the only supported type is 'SystemAssigned'.
    """

    SYSTEM_ASSIGNED = "SystemAssigned"

class FilteredSync(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enabled or Disabled flag to turn on Group-based filtered sync
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class GroupStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Whether the group has been created and is valid.
    """

    CREATED = "Created"
    UPDATED = "Updated"
    RUNNING = "Running"
    COMPLETED = "Completed"
    INVALID = "Invalid"

class IntegrationRuntimeAuthKeyName(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The name of the authentication key to regenerate.
    """

    AUTH_KEY1 = "authKey1"
    AUTH_KEY2 = "authKey2"

class IntegrationRuntimeAutoUpdate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The state of integration runtime auto update.
    """

    ON = "On"
    OFF = "Off"
    FAKE_VALUE1 = "fakeValue1"
    FAKE_VALUE2 = "fakeValue2"
    FAKE_VALUE3 = "fakeValue3"
    FAKE_VALUE4 = "fakeValue4"
    FAKE_VALUE5 = "fakeValue5"
    FAKE_VALUE6 = "fakeValue6"

class IntegrationRuntimeEdition(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The edition for the SSIS Integration Runtime
    """

    STANDARD = "Standard"
    ENTERPRISE = "Enterprise"

class IntegrationRuntimeEntityReferenceType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of this referenced entity.
    """

    INTEGRATION_RUNTIME_REFERENCE = "IntegrationRuntimeReference"
    LINKED_SERVICE_REFERENCE = "LinkedServiceReference"

class IntegrationRuntimeInternalChannelEncryptionMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """It is used to set the encryption mode for node-node communication channel (when more than 2
    self-hosted integration runtime nodes exist).
    """

    NOT_SET = "NotSet"
    SSL_ENCRYPTED = "SslEncrypted"
    NOT_ENCRYPTED = "NotEncrypted"

class IntegrationRuntimeLicenseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """License type for bringing your own license scenario.
    """

    BASE_PRICE = "BasePrice"
    LICENSE_INCLUDED = "LicenseIncluded"

class IntegrationRuntimeSsisCatalogPricingTier(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The pricing tier for the catalog database. The valid values could be found in
    https://azure.microsoft.com/en-us/pricing/details/sql-database/
    """

    BASIC = "Basic"
    STANDARD = "Standard"
    PREMIUM = "Premium"
    PREMIUM_RS = "PremiumRS"

class IntegrationRuntimeState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The state of integration runtime.
    """

    INITIAL = "Initial"
    STOPPED = "Stopped"
    STARTED = "Started"
    STARTING = "Starting"
    STOPPING = "Stopping"
    NEED_REGISTRATION = "NeedRegistration"
    ONLINE = "Online"
    LIMITED = "Limited"
    OFFLINE = "Offline"
    ACCESS_DENIED = "AccessDenied"

class IntegrationRuntimeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of integration runtime.
    """

    MANAGED = "Managed"
    SELF_HOSTED = "SelfHosted"

class IntegrationRuntimeUpdateResult(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The result of the last integration runtime node update.
    """

    NONE = "None"
    SUCCEED = "Succeed"
    FAIL = "Fail"

class JobStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Status of the job.
    """

    NOT_STARTED = "NotStarted"
    STARTING = "Starting"
    PROVISIONING = "Provisioning"
    PREPARING = "Preparing"
    QUEUED = "Queued"
    RUNNING = "Running"
    FINALIZING = "Finalizing"
    CANCEL_REQUESTED = "CancelRequested"
    COMPLETED = "Completed"
    FAILED = "Failed"
    CANCELED = "Canceled"
    NOT_RESPONDING = "NotResponding"
    PAUSED = "Paused"

class JobType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the type of job.
    """

    COMMAND = "Command"
    SWEEP = "Sweep"
    LABELING = "Labeling"
    PIPELINE = "Pipeline"
    DATA = "Data"
    AUTO_ML = "AutoML"

class ManagedIntegrationRuntimeNodeStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The managed integration runtime node status.
    """

    STARTING = "Starting"
    AVAILABLE = "Available"
    RECYCLING = "Recycling"
    UNAVAILABLE = "Unavailable"

class OptimizationMetric(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUC_WEIGHTED = "AUC_weighted"
    ACCURACY = "Accuracy"
    NORM_MACRO_RECALL = "Norm_macro_recall"
    AVERAGE_PRECISION_SCORE_WEIGHTED = "Average_precision_score_weighted"
    PRECISION_SCORE_WEIGHTED = "Precision_score_weighted"
    SPEARMAN_CORRELATION = "Spearman_correlation"
    NORMALIZED_ROOT_MEAN_SQUARED_ERROR = "Normalized_root_mean_squared_error"
    R2_SCORE = "R2_score"
    NORMALIZED_MEAN_ABSOLUTE_ERROR = "Normalized_mean_absolute_error"
    NORMALIZED_ROOT_MEAN_SQUARED_LOG_ERROR = "Normalized_root_mean_squared_log_error"
    MEAN_AVERAGE_PRECISION = "Mean_average_precision"
    IOU = "Iou"

class RecurrenceFrequency(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enumerates possible frequency option for the schedule trigger.
    """

    NOT_SPECIFIED = "NotSpecified"
    MINUTE = "Minute"
    HOUR = "Hour"
    DAY = "Day"
    WEEK = "Week"
    MONTH = "Month"
    YEAR = "Year"

class SelfHostedIntegrationRuntimeNodeStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Status of the integration runtime node.
    """

    NEED_REGISTRATION = "NeedRegistration"
    ONLINE = "Online"
    LIMITED = "Limited"
    OFFLINE = "Offline"
    UPGRADING = "Upgrading"
    INITIALIZING = "Initializing"
    INITIALIZE_FAILED = "InitializeFailed"

class SsisObjectMetadataType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of SSIS object metadata.
    """

    FOLDER = "Folder"
    PROJECT = "Project"
    PACKAGE = "Package"
    ENVIRONMENT = "Environment"

class TrainingType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Training type
    """

    TRAIN_FULL = "TrainFull"
    TRAIN_AND_VALIDATE = "TrainAndValidate"
    CROSS_VALIDATE = "CrossValidate"
    MEAN_CROSS_VALIDATE = "MeanCrossValidate"

class TriggerRuntimeState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enumerates possible state of Triggers.
    """

    STARTED = "Started"
    STOPPED = "Stopped"
    DISABLED = "Disabled"

class TumblingWindowFrequency(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enumerates possible frequency option for the tumbling window trigger.
    """

    MINUTE = "Minute"
    HOUR = "Hour"
