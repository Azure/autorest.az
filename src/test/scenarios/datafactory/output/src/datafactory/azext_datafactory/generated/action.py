# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddFactoryVstsConfiguration(argparse._AppendAction):

    def __call__(self, parser, namespace, values, option_string=None):
        try:
            FactoryVstsConfiguration = namespace._cmd.get_models('FactoryVstsConfiguration')
            type, project_name, tenant_id, account_name, repository_name, root_folder, collaboration_branch = values.split()
            return FactoryVstsConfiguration(
                type = type,
                project_name = project_name,
                tenant_id = tenant_id,
                account_name = account_name,
                repository_name = repository_name,
                root_folder = root_folder,
                collaboration_branch = collaboration_branch
            )
        except ValueError:
            raise CLIError('usage error: {} NAME METRIC OPERATION VALUE'.format(option_string))


class AddFactoryGitHubConfiguration(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.factory_git_hub_configuration = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'host-name':
                d['host_name'] = v[0]
            elif kl == 'account-name':
                d['account_name'] = v[0]
            elif kl == 'repository-name':
                d['repository_name'] = v[0]
            elif kl == 'collaboration-branch':
                d['collaboration_branch'] = v[0]
            elif kl == 'root-folder':
                d['root_folder'] = v[0]
            elif kl == 'last-commit-id':
                d['last_commit_id'] = v[0]
        d['type'] = 'FactoryGitHubConfiguration'
        return d


class AddFakeIdentity(argparse._AppendAction):

    def __call__(self, parser, namespace, values, option_string=None):
        try:
            FakeIdentity = namespace._cmd.get_models('FakeIdentity')
            name, zones_inside = values.split()
            return FakeIdentity(
                name = name,
                zones_inside = zones_inside
            )
        except ValueError:
            raise CLIError('usage error: {} NAME METRIC OPERATION VALUE'.format(option_string))
