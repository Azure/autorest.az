# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_attached_database_configuration_create
from .example_steps import step_attached_database_configuration_show
from .example_steps import step_attached_database_configuration_list
from .example_steps import step_cluster_create
from .example_steps import step_cluster_show
from .example_steps import step_cluster_list
from .example_steps import step_cluster_list2
from .example_steps import step_cluster_list_sku
from .example_steps import step_cluster_list_sku2
from .example_steps import step_cluster_update
from .example_steps import step_cluster_add_language_extension
from .example_steps import step_cluster_detach_follower_database
from .example_steps import step_cluster_diagnose_virtual_network
from .example_steps import step_cluster_list_follower_database
from .example_steps import step_cluster_list_language_extension
from .example_steps import step_cluster_remove_language_extension
from .example_steps import step_cluster_start
from .example_steps import step_cluster_stop
from .example_steps import step_cluster_principal_assignment_create
from .example_steps import step_cluster_principal_assignment_show
from .example_steps import step_cluster_principal_assignment_list
from .example_steps import step_database_principal_assignment_create
from .example_steps import step_database_principal_assignment_show
from .example_steps import step_database_principal_assignment_list
from .example_steps import step_database_principal_assignment_delete
from .example_steps import step_database_create
from .example_steps import step_database_show
from .example_steps import step_database_list
from .example_steps import step_database_update
from .example_steps import step_database_add_principal
from .example_steps import step_database_list_principal
from .example_steps import step_database_remove_principal
from .example_steps import step_database_delete
from .example_steps import step_data_connection_create
from .example_steps import step_data_connection_list
from .example_steps import step_data_connection_show
from .example_steps import step_data_connection_update
from .example_steps import step_data_connection_data_connection_validation
from .example_steps import step_data_connection_delete
from .example_steps import step_cluster_delete
from .example_steps import step_attached_database_configuration_delete
from .example_steps import step_cluster_principal_assignment_delete
from .example_steps import step_attached_database_configuration_create_min
from .example_steps import step_attached_database_configuration_show_min
from .example_steps import step_attached_database_configuration_list_min
from .example_steps import step_cluster_create_min
from .example_steps import step_cluster_show_min
from .example_steps import step_cluster_list_min
from .example_steps import step_cluster_list2_min
from .example_steps import step_cluster_list_sku_min
from .example_steps import step_cluster_list_sku2_min
from .example_steps import step_cluster_update_min
from .example_steps import step_cluster_add_language_extension_min
from .example_steps import step_cluster_detach_follower_database_min
from .example_steps import step_cluster_diagnose_virtual_network_min
from .example_steps import step_cluster_list_follower_database_min
from .example_steps import step_cluster_list_language_extension_min
from .example_steps import step_cluster_remove_language_extension_min
from .example_steps import step_cluster_start_min
from .example_steps import step_cluster_stop_min
from .example_steps import step_cluster_principal_assignment_create_min
from .example_steps import step_cluster_principal_assignment_show_min
from .example_steps import step_cluster_principal_assignment_list_min
from .example_steps import step_database_principal_assignment_create_min
from .example_steps import step_database_principal_assignment_show_min
from .example_steps import step_database_principal_assignment_list_min
from .example_steps import step_database_principal_assignment_delete_min
from .example_steps import step_database_create_min
from .example_steps import step_database_show_min
from .example_steps import step_database_list_min
from .example_steps import step_database_update_min
from .example_steps import step_database_add_principal_min
from .example_steps import step_database_list_principal_min
from .example_steps import step_database_remove_principal_min
from .example_steps import step_database_delete_min
from .example_steps import step_data_connection_create_min
from .example_steps import step_data_connection_list_min
from .example_steps import step_data_connection_show_min
from .example_steps import step_data_connection_update_min
from .example_steps import step_data_connection_data_connection_validation_min
from .example_steps import step_data_connection_delete_min
from .example_steps import step_cluster_delete_min
from .example_steps import step_attached_database_configuration_delete_min
from .example_steps import step_cluster_principal_assignment_delete_min
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg):
    setup_scenario(test, rg)
    step_attached_database_configuration_create(test, rg, checks=[
        test.check("location", "westus", case_sensitive=False),
        test.check("clusterResourceId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Kusto"
                   "/Clusters/{myCluster3}", case_sensitive=False),
        test.check("defaultPrincipalsModificationKind", "Union", case_sensitive=False),
    ])
    step_attached_database_configuration_show(test, rg, checks=[
        test.check("location", "westus", case_sensitive=False),
        test.check("defaultPrincipalsModificationKind", "Union", case_sensitive=False),
    ])
    step_attached_database_configuration_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_create(test, rg, checks=[
        test.check("name", "{myCluster}", case_sensitive=False),
        test.check("identity.type", "SystemAssigned", case_sensitive=False),
        test.check("location", "westus", case_sensitive=False),
        test.check("enableDoubleEncryption", False),
        test.check("enablePurge", True),
        test.check("enableStreamingIngest", True),
        test.check("sku.name", "Standard_L8s", case_sensitive=False),
        test.check("sku.capacity", 2),
        test.check("sku.tier", "Standard", case_sensitive=False),
    ])
    step_cluster_show(test, rg, checks=[
        test.check("name", "{myCluster}", case_sensitive=False),
        test.check("identity.type", "SystemAssigned", case_sensitive=False),
        test.check("location", "westus", case_sensitive=False),
        test.check("enableStreamingIngest", True),
        test.check("sku.name", "Standard_L8s", case_sensitive=False),
        test.check("sku.capacity", 2),
        test.check("sku.tier", "Standard", case_sensitive=False),
    ])
    step_cluster_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_list2(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_list_sku(test, rg, checks=[])
    step_cluster_list_sku2(test, rg, checks=[])
    step_cluster_update(test, rg, checks=[
        test.check("name", "{myCluster}", case_sensitive=False),
        test.check("identity.type", "SystemAssigned", case_sensitive=False),
        test.check("location", "westus", case_sensitive=False),
        test.check("enablePurge", True),
        test.check("enableStreamingIngest", True),
        test.check("sku.name", "Standard_L8s", case_sensitive=False),
        test.check("sku.capacity", 2),
        test.check("sku.tier", "Standard", case_sensitive=False),
        test.check("keyVaultProperties.keyName", "keyName", case_sensitive=False),
        test.check("keyVaultProperties.keyVaultUri", "https://dummy.keyvault.com", case_sensitive=False),
        test.check("keyVaultProperties.keyVersion", "keyVersion", case_sensitive=False),
    ])
    step_cluster_add_language_extension(test, rg, checks=[])
    step_cluster_detach_follower_database(test, rg, checks=[])
    step_cluster_diagnose_virtual_network(test, rg, checks=[])
    step_cluster_list_follower_database(test, rg, checks=[])
    step_cluster_list_language_extension(test, rg, checks=[])
    step_cluster_remove_language_extension(test, rg, checks=[])
    step_cluster_start(test, rg, checks=[])
    step_cluster_stop(test, rg, checks=[])
    step_cluster_principal_assignment_create(test, rg, checks=[])
    step_cluster_principal_assignment_show(test, rg, checks=[])
    step_cluster_principal_assignment_list(test, rg, checks=[])
    step_database_principal_assignment_create(test, rg, checks=[])
    step_database_principal_assignment_show(test, rg, checks=[])
    step_database_principal_assignment_list(test, rg, checks=[])
    step_database_principal_assignment_delete(test, rg, checks=[])
    step_database_create(test, rg, checks=[])
    step_database_show(test, rg, checks=[])
    step_database_list(test, rg, checks=[])
    step_database_update(test, rg, checks=[])
    step_database_add_principal(test, rg, checks=[])
    step_database_list_principal(test, rg, checks=[])
    step_database_remove_principal(test, rg, checks=[])
    step_database_delete(test, rg, checks=[])
    step_data_connection_create(test, rg, checks=[])
    step_data_connection_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_data_connection_show(test, rg, checks=[])
    step_data_connection_update(test, rg, checks=[])
    step_data_connection_data_connection_validation(test, rg, checks=[])
    step_data_connection_delete(test, rg, checks=[])
    step_cluster_delete(test, rg, checks=[])
    step_attached_database_configuration_delete(test, rg, checks=[])
    step_cluster_principal_assignment_delete(test, rg, checks=[])
    cleanup_scenario(test, rg)


@try_manual
def call_scenario_min(test, rg):
    setup_scenario(test, rg)
    step_attached_database_configuration_create_min(test, rg, checks=[])
    step_attached_database_configuration_show_min(test, rg, checks=[])
    step_attached_database_configuration_list_min(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_create_min(test, rg, checks=[
        test.check("name", "{myCluster}", case_sensitive=False),
        test.check("location", "westus", case_sensitive=False),
        test.check("sku.name", "Standard_L8s", case_sensitive=False),
        test.check("sku.capacity", 2),
        test.check("sku.tier", "Standard", case_sensitive=False),
    ])
    step_cluster_show_min(test, rg, checks=[
        test.check("name", "{myCluster}", case_sensitive=False),
        test.check("location", "westus", case_sensitive=False),
        test.check("sku.name", "Standard_L8s", case_sensitive=False),
        test.check("sku.capacity", 2),
        test.check("sku.tier", "Standard", case_sensitive=False),
    ])
    step_cluster_list_min(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_list2_min(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_list_sku_min(test, rg, checks=[])
    step_cluster_list_sku2_min(test, rg, checks=[])
    step_cluster_update_min(test, rg, checks=[
        test.check("name", "{myCluster}", case_sensitive=False),
        test.check("location", "westus", case_sensitive=False),
        test.check("sku.name", "Standard_L8s", case_sensitive=False),
        test.check("sku.capacity", 2),
        test.check("sku.tier", "Standard", case_sensitive=False),
    ])
    step_cluster_add_language_extension_min(test, rg, checks=[])
    step_cluster_detach_follower_database_min(test, rg, checks=[])
    step_cluster_diagnose_virtual_network_min(test, rg, checks=[])
    step_cluster_list_follower_database_min(test, rg, checks=[])
    step_cluster_list_language_extension_min(test, rg, checks=[])
    step_cluster_remove_language_extension_min(test, rg, checks=[])
    step_cluster_start_min(test, rg, checks=[])
    step_cluster_stop_min(test, rg, checks=[])
    step_cluster_principal_assignment_create_min(test, rg, checks=[])
    step_cluster_principal_assignment_show_min(test, rg, checks=[])
    step_cluster_principal_assignment_list_min(test, rg, checks=[])
    step_database_principal_assignment_create_min(test, rg, checks=[])
    step_database_principal_assignment_show_min(test, rg, checks=[])
    step_database_principal_assignment_list_min(test, rg, checks=[])
    step_database_principal_assignment_delete_min(test, rg, checks=[])
    step_database_create_min(test, rg, checks=[])
    step_database_show_min(test, rg, checks=[])
    step_database_list_min(test, rg, checks=[])
    step_database_update_min(test, rg, checks=[])
    step_database_add_principal_min(test, rg, checks=[])
    step_database_list_principal_min(test, rg, checks=[])
    step_database_remove_principal_min(test, rg, checks=[])
    step_database_delete_min(test, rg, checks=[])
    step_data_connection_create_min(test, rg, checks=[])
    step_data_connection_list_min(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_data_connection_show_min(test, rg, checks=[])
    step_data_connection_update_min(test, rg, checks=[])
    step_data_connection_data_connection_validation_min(test, rg, checks=[])
    step_data_connection_delete_min(test, rg, checks=[])
    step_cluster_delete_min(test, rg, checks=[])
    step_attached_database_configuration_delete_min(test, rg, checks=[])
    step_cluster_principal_assignment_delete_min(test, rg, checks=[])
    cleanup_scenario(test, rg)


# Test class for Scenario
@try_manual
class KustoScenarioTest(ScenarioTest):

    def __init__(self):
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myCluster4': 'default',
            'myAttachedDatabaseConfiguration3': 'default',
            'myCluster2': 'leader4',
            'myCluster3': 'KustoClusterLeader',
            'myCluster': 'kustoclusterrptest4',
            'myAttachedDatabaseConfiguration': 'myAttachedDatabaseConfiguration',
            'myAttachedDatabaseConfiguration2': 'attachedDatabaseConfigurations1',
            'myDataConnection': 'DataConnections8',
            'myDataConnection2': 'kustoeventhubconnection1',
        })


    @ResourceGroupPreparer(name_prefix='clitestkusto_kustorptest'[:7], key='rg', parameter_name='rg')
    def test_kusto_Scenario(self, rg):
        call_scenario(self, rg)
        calc_coverage(__file__)
        raise_if()


    @ResourceGroupPreparer(name_prefix='clitestkusto_kustorptest'[:7], key='rg', parameter_name='rg')
    def test_kusto_Scenario_min(self, rg):
        call_scenario_min(self, rg)
        calc_coverage(__file__)
        raise_if()

