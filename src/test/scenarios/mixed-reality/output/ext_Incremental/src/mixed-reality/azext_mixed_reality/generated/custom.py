# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

import json


def spatial_anchors_account_regenerate_key(client,
                                           resource_group_name,
                                           account_name,
                                           serial=None):
    if serial is None:
        serial = 1
    regenerate = {}
    regenerate['serial'] = 1 if serial is None else serial
    return client.regenerate_keys(resource_group_name=resource_group_name,
                                  account_name=account_name,
                                  regenerate=regenerate)


def remote_rendering_account_list(client,
                                  resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def remote_rendering_account_show(client,
                                  resource_group_name,
                                  account_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name)


def remote_rendering_account_create(client,
                                    resource_group_name,
                                    account_name,
                                    location,
                                    tags=None):
    remote_rendering_account = {}
    remote_rendering_account['tags'] = tags
    remote_rendering_account['location'] = location
    remote_rendering_account['identity'] = json.loads("{\"type\": \"SystemAssigned\"}")
    return client.create(resource_group_name=resource_group_name,
                         account_name=account_name,
                         remote_rendering_account=remote_rendering_account)


def remote_rendering_account_update(client,
                                    resource_group_name,
                                    account_name,
                                    location,
                                    tags=None):
    remote_rendering_account = {}
    remote_rendering_account['tags'] = tags
    remote_rendering_account['location'] = location
    remote_rendering_account['identity'] = json.loads("{\"type\": \"SystemAssigned\"}")
    return client.update(resource_group_name=resource_group_name,
                         account_name=account_name,
                         remote_rendering_account=remote_rendering_account)


def remote_rendering_account_delete(client,
                                    resource_group_name,
                                    account_name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name)


def remote_rendering_account_list_key(client,
                                      resource_group_name,
                                      account_name):
    return client.list_keys(resource_group_name=resource_group_name,
                            account_name=account_name)


def remote_rendering_account_regenerate_key(client,
                                            resource_group_name,
                                            account_name,
                                            serial=None):
    if serial is None:
        serial = 1
    regenerate = {}
    regenerate['serial'] = 1 if serial is None else serial
    return client.regenerate_keys(resource_group_name=resource_group_name,
                                  account_name=account_name,
                                  regenerate=regenerate)
