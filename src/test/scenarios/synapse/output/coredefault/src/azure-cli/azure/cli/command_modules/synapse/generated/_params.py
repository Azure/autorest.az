# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from ..action import (
    AddAutoScale,
    AddAutoPause,
    AddLibraryRequirements,
    AddSku,
    AddRecurringScans,
    AddBaselineResults,
    AddDefaultDataLakeStorage,
    AddConnectivityEndpoints,
    AddPrivateEndpointConnections
)


def load_arguments(self, _):

    with self.argument_context('synapse big-data-pool list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')

    with self.argument_context('synapse big-data-pool show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('big_data_pool_name', options_list=['--name', '-n', '--big-data-pool-name'], type=str, help='Big '
                   'Data pool name', id_part='child_name_1')

    with self.argument_context('synapse big-data-pool create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('big_data_pool_name', options_list=['--name', '-n', '--big-data-pool-name'], type=str, help='Big '
                   'Data pool name')
        c.argument('force', arg_type=get_three_state_flag(), help='Whether to stop any running jobs in the Big Data '
                   'pool')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('provisioning_state', type=str, help='The state of the Big Data pool.')
        c.argument('auto_scale', action=AddAutoScale, nargs='*', help='Auto-scaling properties')
        c.argument('creation_date', help='The time when the Big Data pool was created.')
        c.argument('auto_pause', action=AddAutoPause, nargs='*', help='Auto-pausing properties')
        c.argument('spark_events_folder', type=str, help='The Spark events folder')
        c.argument('node_count', type=int, help='The number of nodes in the Big Data pool.')
        c.argument('library_requirements', action=AddLibraryRequirements, nargs='*', help='Library version '
                   'requirements')
        c.argument('spark_version', type=str, help='The Apache Spark version.')
        c.argument('default_spark_log_folder', type=str, help='The default folder where Spark logs will be written.')
        c.argument('node_size', arg_type=get_enum_type(['None', 'Small', 'Medium', 'Large']), help='The level of '
                   'compute power that each node in the Big Data pool has.')
        c.argument('node_size_family', arg_type=get_enum_type(['None', 'MemoryOptimized']), help='The kind of nodes '
                   'that the Big Data pool provides.')

    with self.argument_context('synapse big-data-pool update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('big_data_pool_name', options_list=['--name', '-n', '--big-data-pool-name'], type=str, help='Big '
                   'Data pool name', id_part='child_name_1')
        c.argument('tags', tags_type)

    with self.argument_context('synapse big-data-pool delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('big_data_pool_name', options_list=['--name', '-n', '--big-data-pool-name'], type=str, help='Big '
                   'Data pool name', id_part='child_name_1')

    with self.argument_context('synapse big-data-pool wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('big_data_pool_name', options_list=['--name', '-n', '--big-data-pool-name'], type=str, help='Big '
                   'Data pool name', id_part='child_name_1')

    with self.argument_context('synapse operation get-azure-async-header-result') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('operation_id', type=str, help='Operation ID', id_part='child_name_1')

    with self.argument_context('synapse operation get-location-header-result') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('operation_id', type=str, help='Operation ID', id_part='child_name_1')

    with self.argument_context('synapse ip-firewall-rule list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')

    with self.argument_context('synapse ip-firewall-rule show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('rule_name', type=str, help='The IP firewall rule name', id_part='child_name_1')

    with self.argument_context('synapse ip-firewall-rule create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('rule_name', type=str, help='The IP firewall rule name')
        c.argument('end_ip_address', type=str, help='The end IP address of the firewall rule. Must be IPv4 format. '
                   'Must be greater than or equal to startIpAddress')
        c.argument('start_ip_address', type=str,
                   help='The start IP address of the firewall rule. Must be IPv4 format')

    with self.argument_context('synapse ip-firewall-rule update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('rule_name', type=str, help='The IP firewall rule name', id_part='child_name_1')
        c.argument('end_ip_address', type=str, help='The end IP address of the firewall rule. Must be IPv4 format. '
                   'Must be greater than or equal to startIpAddress')
        c.argument('start_ip_address', type=str,
                   help='The start IP address of the firewall rule. Must be IPv4 format')

    with self.argument_context('synapse ip-firewall-rule delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('rule_name', type=str, help='The IP firewall rule name', id_part='child_name_1')

    with self.argument_context('synapse ip-firewall-rule replace-all') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('ip_firewall_rules', type=validate_file_or_dict, help='IP firewall rule properties Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('synapse ip-firewall-rule wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('rule_name', type=str, help='The IP firewall rule name', id_part='child_name_1')

    with self.argument_context('synapse sql-pool list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')

    with self.argument_context('synapse sql-pool show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', options_list=['--name', '-n', '--sql-pool-name'], type=str, help='SQL pool name',
                   id_part='child_name_1')

    with self.argument_context('synapse sql-pool create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', options_list=['--name', '-n', '--sql-pool-name'], type=str, help='SQL pool name')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('sku', action=AddSku, nargs='*', help='SQL pool SKU')
        c.argument('max_size_bytes', type=int, help='Maximum size in bytes')
        c.argument('collation', type=str, help='Collation mode')
        c.argument('source_database_id', type=str, help='Source database to create from')
        c.argument('recoverable_database_id', type=str, help='Backup database to restore from')
        c.argument('provisioning_state', type=str, help='Resource state')
        c.argument('status', type=str, help='Resource status')
        c.argument('restore_point_in_time', help='Snapshot time to restore')
        c.argument('create_mode', type=str, help='What is this?')
        c.argument('creation_date', help='Date the SQL pool was created')

    with self.argument_context('synapse sql-pool update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', options_list=['--name', '-n', '--sql-pool-name'], type=str, help='SQL pool name',
                   id_part='child_name_1')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('sku', action=AddSku, nargs='*', help='SQL pool SKU')
        c.argument('max_size_bytes', type=int, help='Maximum size in bytes')
        c.argument('collation', type=str, help='Collation mode')
        c.argument('source_database_id', type=str, help='Source database to create from')
        c.argument('recoverable_database_id', type=str, help='Backup database to restore from')
        c.argument('provisioning_state', type=str, help='Resource state')
        c.argument('status', type=str, help='Resource status')
        c.argument('restore_point_in_time', help='Snapshot time to restore')
        c.argument('create_mode', type=str, help='What is this?')
        c.argument('creation_date', help='Date the SQL pool was created')

    with self.argument_context('synapse sql-pool delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', options_list=['--name', '-n', '--sql-pool-name'], type=str, help='SQL pool name',
                   id_part='child_name_1')

    with self.argument_context('synapse sql-pool pause') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', options_list=['--name', '-n', '--sql-pool-name'], type=str, help='SQL pool name',
                   id_part='child_name_1')

    with self.argument_context('synapse sql-pool rename') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', options_list=['--name', '-n', '--sql-pool-name'], type=str, help='SQL pool name',
                   id_part='child_name_1')
        c.argument('id_', options_list=['--id'], type=str, help='The target ID for the resource')

    with self.argument_context('synapse sql-pool resume') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', options_list=['--name', '-n', '--sql-pool-name'], type=str, help='SQL pool name',
                   id_part='child_name_1')

    with self.argument_context('synapse sql-pool wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', options_list=['--name', '-n', '--sql-pool-name'], type=str, help='SQL pool name',
                   id_part='child_name_1')

    with self.argument_context('synapse sql-pool-metadata-sync-config show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')

    with self.argument_context('synapse sql-pool-metadata-sync-config create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('enabled', arg_type=get_three_state_flag(), help='Indicates whether the metadata sync is enabled or '
                   'disabled')

    with self.argument_context('synapse sql-pool-operation-result get-location-header-result') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('operation_id', type=str, help='Operation ID', id_part='child_name_2')

    with self.argument_context('synapse sql-pool-geo-backup-policy show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')

    with self.argument_context('synapse sql-pool-data-warehouse-user-activity show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')

    with self.argument_context('synapse sql-pool-restore-point list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')

    with self.argument_context('synapse sql-pool-restore-point create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('restore_point_label', type=str, help='The restore point label to apply')

    with self.argument_context('synapse sql-pool-replication-link list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')

    with self.argument_context('synapse sql-pool-transparent-data-encryption show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')

    with self.argument_context('synapse sql-pool-transparent-data-encryption create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('status', arg_type=get_enum_type(['Enabled', 'Disabled']), help='The status of the database '
                   'transparent data encryption.')

    with self.argument_context('synapse sql-pool-transparent-data-encryption update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('status', arg_type=get_enum_type(['Enabled', 'Disabled']), help='The status of the database '
                   'transparent data encryption.')

    with self.argument_context('synapse sql-pool-blob-auditing-policy show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')

    with self.argument_context('synapse sql-pool-blob-auditing-policy create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('state', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Specifies the state of the policy. '
                   'If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.')
        c.argument('storage_endpoint', type=str, help='Specifies the blob storage endpoint (e.g. '
                   'https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.')
        c.argument('storage_account_access_key', type=str, help='Specifies the identifier key of the auditing storage '
                   'account. If state is Enabled and storageEndpoint is specified, storageAccountAccessKey is '
                   'required.')
        c.argument('retention_days', type=int, help='Specifies the number of days to keep in the audit logs in the '
                   'storage account.')
        c.argument('audit_actions_and_groups', nargs='*', help='Specifies the Actions-Groups and Actions to audit.  '
                   'The recommended set of action groups to use is the following combination - this will audit all the '
                   'queries and stored procedures executed against the database, as well as successful and failed '
                   'logins:  BATCH_COMPLETED_GROUP, SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP, '
                   'FAILED_DATABASE_AUTHENTICATION_GROUP.  This above combination is also the set that is configured '
                   'by default when enabling auditing from the Azure portal.  The supported action groups to audit are '
                   '(note: choose only specific groups that cover your auditing needs. Using unnecessary groups could '
                   'lead to very large quantities of audit records):  APPLICATION_ROLE_CHANGE_PASSWORD_GROUP '
                   'BACKUP_RESTORE_GROUP DATABASE_LOGOUT_GROUP DATABASE_OBJECT_CHANGE_GROUP '
                   'DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP DATABASE_OBJECT_PERMISSION_CHANGE_GROUP '
                   'DATABASE_OPERATION_GROUP DATABASE_PERMISSION_CHANGE_GROUP DATABASE_PRINCIPAL_CHANGE_GROUP '
                   'DATABASE_PRINCIPAL_IMPERSONATION_GROUP DATABASE_ROLE_MEMBER_CHANGE_GROUP '
                   'FAILED_DATABASE_AUTHENTICATION_GROUP SCHEMA_OBJECT_ACCESS_GROUP SCHEMA_OBJECT_CHANGE_GROUP '
                   'SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP '
                   'SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP USER_CHANGE_PASSWORD_GROUP BATCH_STARTED_GROUP '
                   'BATCH_COMPLETED_GROUP  These are groups that cover all sql statements and stored procedures '
                   'executed against the database, and should not be used in combination with other groups as this '
                   'will result in duplicate audit logs.  For more information, see [Database-Level Audit Action '
                   'Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audi'
                   't-action-groups-and-actions#database-level-audit-action-groups).  For Database auditing policy, '
                   'specific Actions can also be specified (note that Actions cannot be specified for Server auditing '
                   'policy). The supported actions to audit are: SELECT UPDATE INSERT DELETE EXECUTE RECEIVE '
                   'REFERENCES  The general form for defining an action to be audited is: {action} ON {object} BY '
                   '{principal}  Note that <object> in the above format can refer to an object like a table, view, or '
                   'stored procedure, or an entire database or schema. For the latter cases, the forms '
                   'DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.  For example: SELECT on '
                   'dbo.myTable by public SELECT on DATABASE::myDatabase by public SELECT on SCHEMA::mySchema by '
                   'public  For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/s'
                   'ql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level'
                   '-audit-actions)')
        c.argument('storage_account_subscription_id', help='Specifies the blob storage subscription Id.')
        c.argument('is_storage_secondary_key_in_use', arg_type=get_three_state_flag(), help='Specifies whether '
                   'storageAccountAccessKey value is the storage\'s secondary key.')
        c.argument('is_azure_monitor_target_enabled', arg_type=get_three_state_flag(), help='Specifies whether audit '
                   'events are sent to Azure Monitor.  In order to send the events to Azure Monitor, specify \'state\' '
                   'as \'Enabled\' and \'isAzureMonitorTargetEnabled\' as true.  When using REST API to configure '
                   'auditing, Diagnostic Settings with \'SQLSecurityAuditEvents\' diagnostic logs category on the '
                   'database should be also created. Note that for server level audit you should use the \'master\' '
                   'database as {databaseName}.  Diagnostic Settings URI format: PUT https://management.azure.com/subsc'
                   'riptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverNam'
                   'e}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-vers'
                   'ion=2017-05-01-preview  For more information, see [Diagnostic Settings REST '
                   'API](https://go.microsoft.com/fwlink/?linkid=2033207) or [Diagnostic Settings '
                   'PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)')

    with self.argument_context('synapse sql-pool-blob-auditing-policy update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('state', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Specifies the state of the policy. '
                   'If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.')
        c.argument('storage_endpoint', type=str, help='Specifies the blob storage endpoint (e.g. '
                   'https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.')
        c.argument('storage_account_access_key', type=str, help='Specifies the identifier key of the auditing storage '
                   'account. If state is Enabled and storageEndpoint is specified, storageAccountAccessKey is '
                   'required.')
        c.argument('retention_days', type=int, help='Specifies the number of days to keep in the audit logs in the '
                   'storage account.')
        c.argument('audit_actions_and_groups', nargs='*', help='Specifies the Actions-Groups and Actions to audit.  '
                   'The recommended set of action groups to use is the following combination - this will audit all the '
                   'queries and stored procedures executed against the database, as well as successful and failed '
                   'logins:  BATCH_COMPLETED_GROUP, SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP, '
                   'FAILED_DATABASE_AUTHENTICATION_GROUP.  This above combination is also the set that is configured '
                   'by default when enabling auditing from the Azure portal.  The supported action groups to audit are '
                   '(note: choose only specific groups that cover your auditing needs. Using unnecessary groups could '
                   'lead to very large quantities of audit records):  APPLICATION_ROLE_CHANGE_PASSWORD_GROUP '
                   'BACKUP_RESTORE_GROUP DATABASE_LOGOUT_GROUP DATABASE_OBJECT_CHANGE_GROUP '
                   'DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP DATABASE_OBJECT_PERMISSION_CHANGE_GROUP '
                   'DATABASE_OPERATION_GROUP DATABASE_PERMISSION_CHANGE_GROUP DATABASE_PRINCIPAL_CHANGE_GROUP '
                   'DATABASE_PRINCIPAL_IMPERSONATION_GROUP DATABASE_ROLE_MEMBER_CHANGE_GROUP '
                   'FAILED_DATABASE_AUTHENTICATION_GROUP SCHEMA_OBJECT_ACCESS_GROUP SCHEMA_OBJECT_CHANGE_GROUP '
                   'SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP '
                   'SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP USER_CHANGE_PASSWORD_GROUP BATCH_STARTED_GROUP '
                   'BATCH_COMPLETED_GROUP  These are groups that cover all sql statements and stored procedures '
                   'executed against the database, and should not be used in combination with other groups as this '
                   'will result in duplicate audit logs.  For more information, see [Database-Level Audit Action '
                   'Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audi'
                   't-action-groups-and-actions#database-level-audit-action-groups).  For Database auditing policy, '
                   'specific Actions can also be specified (note that Actions cannot be specified for Server auditing '
                   'policy). The supported actions to audit are: SELECT UPDATE INSERT DELETE EXECUTE RECEIVE '
                   'REFERENCES  The general form for defining an action to be audited is: {action} ON {object} BY '
                   '{principal}  Note that <object> in the above format can refer to an object like a table, view, or '
                   'stored procedure, or an entire database or schema. For the latter cases, the forms '
                   'DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.  For example: SELECT on '
                   'dbo.myTable by public SELECT on DATABASE::myDatabase by public SELECT on SCHEMA::mySchema by '
                   'public  For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/s'
                   'ql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level'
                   '-audit-actions)')
        c.argument('storage_account_subscription_id', help='Specifies the blob storage subscription Id.')
        c.argument('is_storage_secondary_key_in_use', arg_type=get_three_state_flag(), help='Specifies whether '
                   'storageAccountAccessKey value is the storage\'s secondary key.')
        c.argument('is_azure_monitor_target_enabled', arg_type=get_three_state_flag(), help='Specifies whether audit '
                   'events are sent to Azure Monitor.  In order to send the events to Azure Monitor, specify \'state\' '
                   'as \'Enabled\' and \'isAzureMonitorTargetEnabled\' as true.  When using REST API to configure '
                   'auditing, Diagnostic Settings with \'SQLSecurityAuditEvents\' diagnostic logs category on the '
                   'database should be also created. Note that for server level audit you should use the \'master\' '
                   'database as {databaseName}.  Diagnostic Settings URI format: PUT https://management.azure.com/subsc'
                   'riptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverNam'
                   'e}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-vers'
                   'ion=2017-05-01-preview  For more information, see [Diagnostic Settings REST '
                   'API](https://go.microsoft.com/fwlink/?linkid=2033207) or [Diagnostic Settings '
                   'PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)')

    with self.argument_context('synapse sql-pool-operation list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')

    with self.argument_context('synapse sql-pool-usage list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')

    with self.argument_context('synapse sql-pool-sensitivity-label create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('schema_name', type=str, help='The name of the schema.')
        c.argument('table_name', type=str, help='The name of the table.')
        c.argument('column_name', type=str, help='The name of the column.')
        c.argument('label_name', type=str, help='The label name.')
        c.argument('label_id', type=str, help='The label ID.')
        c.argument('information_type', type=str, help='The information type.')
        c.argument('information_type_id', type=str, help='The information type ID.')

    with self.argument_context('synapse sql-pool-sensitivity-label update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('schema_name', type=str, help='The name of the schema.', id_part='child_name_2')
        c.argument('table_name', type=str, help='The name of the table.', id_part='child_name_3')
        c.argument('column_name', type=str, help='The name of the column.', id_part='child_name_4')
        c.argument('label_name', type=str, help='The label name.')
        c.argument('label_id', type=str, help='The label ID.')
        c.argument('information_type', type=str, help='The information type.')
        c.argument('information_type_id', type=str, help='The information type ID.')

    with self.argument_context('synapse sql-pool-sensitivity-label delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('schema_name', type=str, help='The name of the schema.', id_part='child_name_2')
        c.argument('table_name', type=str, help='The name of the table.', id_part='child_name_3')
        c.argument('column_name', type=str, help='The name of the column.', id_part='child_name_4')

    with self.argument_context('synapse sql-pool-sensitivity-label disable-recommendation') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('schema_name', type=str, help='The name of the schema.', id_part='child_name_2')
        c.argument('table_name', type=str, help='The name of the table.', id_part='child_name_3')
        c.argument('column_name', type=str, help='The name of the column.', id_part='child_name_4')

    with self.argument_context('synapse sql-pool-sensitivity-label enable-recommendation') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('schema_name', type=str, help='The name of the schema.', id_part='child_name_2')
        c.argument('table_name', type=str, help='The name of the table.', id_part='child_name_3')
        c.argument('column_name', type=str, help='The name of the column.', id_part='child_name_4')

    with self.argument_context('synapse sql-pool-sensitivity-label list-current') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that filters '
                   'elements in the collection.')

    with self.argument_context('synapse sql-pool-sensitivity-label list-recommended') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('include_disabled_recommendations', arg_type=get_three_state_flag(), help='Specifies whether to '
                   'include disabled recommendations or not.')
        c.argument('skip_token', type=str, help='An OData query option to indicate how many elements to skip in the '
                   'collection.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that filters '
                   'elements in the collection.')

    with self.argument_context('synapse sql-pool-schema list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that filters '
                   'elements in the collection.')

    with self.argument_context('synapse sql-pool-table list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('schema_name', type=str, help='The name of the schema.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that filters '
                   'elements in the collection.')

    with self.argument_context('synapse sql-pool-table-column list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('schema_name', type=str, help='The name of the schema.')
        c.argument('table_name', type=str, help='The name of the table.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that filters '
                   'elements in the collection.')

    with self.argument_context('synapse sql-pool-connection-policy show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')

    with self.argument_context('synapse sql-pool-vulnerability-assessment list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')

    with self.argument_context('synapse sql-pool-vulnerability-assessment show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')

    with self.argument_context('synapse sql-pool-vulnerability-assessment create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('storage_container_path', type=str, help='A blob storage container path to hold the scan results '
                   '(e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level '
                   'vulnerability assessment policy doesn\'t set')
        c.argument('storage_container_sas_key', type=str, help='A shared access signature (SAS Key) that has write '
                   'access to the blob container specified in \'storageContainerPath\' parameter. If '
                   '\'storageAccountAccessKey\' isn\'t specified, StorageContainerSasKey is required.')
        c.argument('storage_account_access_key', type=str, help='Specifies the identifier key of the storage account '
                   'for vulnerability assessment scan results. If \'StorageContainerSasKey\' isn\'t specified, '
                   'storageAccountAccessKey is required.')
        c.argument('recurring_scans', action=AddRecurringScans, nargs='*', help='The recurring scans settings')

    with self.argument_context('synapse sql-pool-vulnerability-assessment update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('storage_container_path', type=str, help='A blob storage container path to hold the scan results '
                   '(e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level '
                   'vulnerability assessment policy doesn\'t set')
        c.argument('storage_container_sas_key', type=str, help='A shared access signature (SAS Key) that has write '
                   'access to the blob container specified in \'storageContainerPath\' parameter. If '
                   '\'storageAccountAccessKey\' isn\'t specified, StorageContainerSasKey is required.')
        c.argument('storage_account_access_key', type=str, help='Specifies the identifier key of the storage account '
                   'for vulnerability assessment scan results. If \'StorageContainerSasKey\' isn\'t specified, '
                   'storageAccountAccessKey is required.')
        c.argument('recurring_scans', action=AddRecurringScans, nargs='*', help='The recurring scans settings')

    with self.argument_context('synapse sql-pool-vulnerability-assessment delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')

    with self.argument_context('synapse sql-pool-vulnerability-assessment-scan list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')

    with self.argument_context('synapse sql-pool-vulnerability-assessment-scan export') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('scan_id', type=str, help='The vulnerability assessment scan Id of the scan to retrieve.', id_part=''
                   'child_name_3')

    with self.argument_context('synapse sql-pool-vulnerability-assessment-scan initiate-scan') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('scan_id', type=str, help='The vulnerability assessment scan Id of the scan to retrieve.', id_part=''
                   'child_name_3')

    with self.argument_context('synapse sql-pool-security-alert-policy show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')

    with self.argument_context('synapse sql-pool-security-alert-policy create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('state', arg_type=get_enum_type(['New', 'Enabled', 'Disabled']), help='Specifies the state of the '
                   'policy, whether it is enabled or disabled or a policy has not been applied yet on the specific Sql '
                   'pool.')
        c.argument('disabled_alerts', nargs='*', help='Specifies an array of alerts that are disabled. Allowed values '
                   'are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action')
        c.argument('email_addresses', nargs='*', help='Specifies an array of e-mail addresses to which the alert is '
                   'sent.')
        c.argument('email_account_admins', arg_type=get_three_state_flag(), help='Specifies that the alert is sent to '
                   'the account administrators.')
        c.argument('storage_endpoint', type=str, help='Specifies the blob storage endpoint (e.g. '
                   'https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit '
                   'logs.')
        c.argument('storage_account_access_key', type=str, help='Specifies the identifier key of the Threat Detection '
                   'audit storage account.')
        c.argument('retention_days', type=int, help='Specifies the number of days to keep in the Threat Detection '
                   'audit logs.')

    with self.argument_context('synapse sql-pool-security-alert-policy update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('state', arg_type=get_enum_type(['New', 'Enabled', 'Disabled']), help='Specifies the state of the '
                   'policy, whether it is enabled or disabled or a policy has not been applied yet on the specific Sql '
                   'pool.')
        c.argument('disabled_alerts', nargs='*', help='Specifies an array of alerts that are disabled. Allowed values '
                   'are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action')
        c.argument('email_addresses', nargs='*', help='Specifies an array of e-mail addresses to which the alert is '
                   'sent.')
        c.argument('email_account_admins', arg_type=get_three_state_flag(), help='Specifies that the alert is sent to '
                   'the account administrators.')
        c.argument('storage_endpoint', type=str, help='Specifies the blob storage endpoint (e.g. '
                   'https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit '
                   'logs.')
        c.argument('storage_account_access_key', type=str, help='Specifies the identifier key of the Threat Detection '
                   'audit storage account.')
        c.argument('retention_days', type=int, help='Specifies the number of days to keep in the Threat Detection '
                   'audit logs.')

    with self.argument_context('synapse sql-pool-vulnerability-assessment-rule-baseline create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('sql_pool_name', type=str, help='SQL pool name')
        c.argument('rule_id', type=str, help='The vulnerability assessment rule ID.')
        c.argument('baseline_name', arg_type=get_enum_type(['master', 'default']), help='The name of the vulnerability '
                   'assessment rule baseline (default implies a baseline on a Sql pool level rule and master for '
                   'workspace level rule).')
        c.argument('baseline_results', action=AddBaselineResults, nargs='*', help='The rule baseline result')

    with self.argument_context('synapse sql-pool-vulnerability-assessment-rule-baseline update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('rule_id', type=str, help='The vulnerability assessment rule ID.', id_part='child_name_3')
        c.argument('baseline_name', arg_type=get_enum_type(['master', 'default']), help='The name of the vulnerability '
                   'assessment rule baseline (default implies a baseline on a Sql pool level rule and master for '
                   'workspace level rule).', id_part='child_name_4')
        c.argument('baseline_results', action=AddBaselineResults, nargs='*', help='The rule baseline result')

    with self.argument_context('synapse sql-pool-vulnerability-assessment-rule-baseline delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('sql_pool_name', type=str, help='SQL pool name', id_part='child_name_1')
        c.argument('rule_id', type=str, help='The vulnerability assessment rule ID.', id_part='child_name_3')
        c.argument('baseline_name', arg_type=get_enum_type(['master', 'default']), help='The name of the vulnerability '
                   'assessment rule baseline (default implies a baseline on a Sql pool level rule and master for '
                   'workspace level rule).', id_part='child_name_4')

    with self.argument_context('synapse workspace list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('synapse workspace show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='The name of '
                   'the workspace', id_part='name')

    with self.argument_context('synapse workspace create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='The name of '
                   'the workspace')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('default_data_lake_storage', action=AddDefaultDataLakeStorage, nargs='*', help='Workspace default '
                   'data lake storage account details')
        c.argument('sql_administrator_login_password', type=str, help='SQL administrator login password')
        c.argument('managed_resource_group_name', type=str, help='Workspace managed resource group. The resource group '
                   'name uniquely identifies the resource group within the user subscriptionId. The resource group '
                   'name must be no longer than 90 characters long, and must be alphanumeric characters '
                   '(Char.IsLetterOrDigit()) and \'-\', \'_\', \'(\', \')\' and\'.\'. Note that the name cannot end '
                   'with \'.\'')
        c.argument('sql_administrator_login', type=str, help='Login for workspace SQL active directory administrator')
        c.argument('connectivity_endpoints', action=AddConnectivityEndpoints, nargs='*', help='Connectivity endpoints '
                   'Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('managed_virtual_network', type=str, help='Setting this to \'default\' will ensure that all compute '
                   'for this workspace is in a virtual network managed on behalf of the user.')
        c.argument('private_endpoint_connections', action=AddPrivateEndpointConnections, nargs='*', help='Private '
                   'endpoint connections to the workspace')
        c.argument('virtual_network_profile_compute_subnet_id', type=str, help='Subnet ID used for computes in '
                   'workspace')
        c.argument('identity_type', arg_type=get_enum_type(['None', 'SystemAssigned']), help='The type of managed '
                   'identity for the workspace')

    with self.argument_context('synapse workspace update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='The name of '
                   'the workspace', id_part='name')
        c.argument('tags', tags_type)
        c.argument('sql_administrator_login_password', type=str, help='SQL administrator login password')
        c.argument('identity_type', arg_type=get_enum_type(['None', 'SystemAssigned']), help='The type of managed '
                   'identity for the workspace')

    with self.argument_context('synapse workspace delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='The name of '
                   'the workspace', id_part='name')

    with self.argument_context('synapse workspace wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='The name of '
                   'the workspace', id_part='name')

    with self.argument_context('synapse workspace-aad-admin show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')

    with self.argument_context('synapse workspace-aad-admin create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('tenant_id', type=str, help='Tenant ID of the workspace active directory administrator')
        c.argument('login', type=str, help='Login of the workspace active directory administrator')
        c.argument('administrator_type', type=str, help='Workspace active directory administrator type')
        c.argument('sid', type=str, help='Object ID of the workspace active directory administrator')

    with self.argument_context('synapse workspace-aad-admin update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('tenant_id', type=str, help='Tenant ID of the workspace active directory administrator')
        c.argument('login', type=str, help='Login of the workspace active directory administrator')
        c.argument('administrator_type', type=str, help='Workspace active directory administrator type')
        c.argument('sid', type=str, help='Object ID of the workspace active directory administrator')

    with self.argument_context('synapse workspace-aad-admin delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')

    with self.argument_context('synapse workspace-aad-admin wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')

    with self.argument_context('synapse workspace-managed-identity-sql-control-setting show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')

    with self.argument_context('synapse workspace-managed-identity-sql-control-setting create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('grant_sql_control_to_managed_identity_desired_state', arg_type=get_enum_type(['Enabled',
                                                                                                  'Disabled']), help=''
                   'Desired state')

    with self.argument_context('synapse workspace-managed-identity-sql-control-setting update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('grant_sql_control_to_managed_identity_desired_state', arg_type=get_enum_type(['Enabled',
                                                                                                  'Disabled']), help=''
                   'Desired state')

    with self.argument_context('synapse integration-runtime list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')

    with self.argument_context('synapse integration-runtime show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', options_list=['--name', '-n', '--integration-runtime-name'], type=str,
                   help='Integration runtime name', id_part='child_name_1')
        c.argument('if_none_match', type=str, help='ETag of the integration runtime entity. Should only be specified '
                   'for get. If the ETag matches the existing entity tag, or if * was provided, then no content will '
                   'be returned.')

    with self.argument_context('synapse integration-runtime create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('integration_runtime_name', options_list=['--name', '-n', '--integration-runtime-name'], type=str,
                   help='Integration runtime name')
        c.argument('if_match', type=str, help='ETag of the integration runtime entity. Should only be specified for '
                   'update, for which it should match existing entity or can be * for unconditional update.')
        c.argument('properties', type=validate_file_or_dict, help='Integration runtime properties. Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('synapse integration-runtime update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', options_list=['--name', '-n', '--integration-runtime-name'], type=str,
                   help='Integration runtime name', id_part='child_name_1')
        c.argument('auto_update', arg_type=get_enum_type(['On', 'Off']), help='Enables or disables the auto-update '
                   'feature of the self-hosted integration runtime. See https://go.microsoft.com/fwlink/?linkid=854189.'
                   '')
        c.argument('update_delay_offset', type=str, help='The time offset (in hours) in the day, e.g., PT03H is 3 '
                   'hours. The integration runtime auto update will happen on that time.')

    with self.argument_context('synapse integration-runtime delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', options_list=['--name', '-n', '--integration-runtime-name'], type=str,
                   help='Integration runtime name', id_part='child_name_1')

    with self.argument_context('synapse integration-runtime start') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', options_list=['--name', '-n', '--integration-runtime-name'], type=str,
                   help='Integration runtime name', id_part='child_name_1')

    with self.argument_context('synapse integration-runtime stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', options_list=['--name', '-n', '--integration-runtime-name'], type=str,
                   help='Integration runtime name', id_part='child_name_1')

    with self.argument_context('synapse integration-runtime upgrade') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', options_list=['--name', '-n', '--integration-runtime-name'], type=str,
                   help='Integration runtime name', id_part='child_name_1')

    with self.argument_context('synapse integration-runtime wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', options_list=['--name', '-n', '--integration-runtime-name'], type=str,
                   help='Integration runtime name', id_part='child_name_1')
        c.argument('if_none_match', type=str, help='ETag of the integration runtime entity. Should only be specified '
                   'for get. If the ETag matches the existing entity tag, or if * was provided, then no content will '
                   'be returned.')

    with self.argument_context('synapse integration-runtime-node-ip-address get') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', type=str, help='Integration runtime name', id_part='child_name_1')
        c.argument('node_name', type=str, help='Integration runtime node name', id_part='child_name_2')

    with self.argument_context('synapse integration-runtime-object-metadata get') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', type=str, help='Integration runtime name', id_part='child_name_1')
        c.argument('metadata_path', type=str, help='Metadata path.')

    with self.argument_context('synapse integration-runtime-object-metadata refresh') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', type=str, help='Integration runtime name', id_part='child_name_1')

    with self.argument_context('synapse integration-runtime-node show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', type=str, help='Integration runtime name', id_part='child_name_1')
        c.argument('node_name', type=str, help='Integration runtime node name', id_part='child_name_2')

    with self.argument_context('synapse integration-runtime-node update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', type=str, help='Integration runtime name', id_part='child_name_1')
        c.argument('node_name', type=str, help='Integration runtime node name', id_part='child_name_2')
        c.argument('concurrent_jobs_limit', type=int, help='The number of concurrent jobs permitted to run on the '
                   'integration runtime node. Values between 1 and maxConcurrentJobs(inclusive) are allowed.')

    with self.argument_context('synapse integration-runtime-node delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', type=str, help='Integration runtime name', id_part='child_name_1')
        c.argument('node_name', type=str, help='Integration runtime node name', id_part='child_name_2')

    with self.argument_context('synapse integration-runtime-credentials sync') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', type=str, help='Integration runtime name', id_part='child_name_1')

    with self.argument_context('synapse integration-runtime-connection-info get') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', type=str, help='Integration runtime name', id_part='child_name_1')

    with self.argument_context('synapse integration-runtime-auth-key list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('integration_runtime_name', type=str, help='Integration runtime name')

    with self.argument_context('synapse integration-runtime-auth-key regenerate') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', type=str, help='Integration runtime name', id_part='child_name_1')
        c.argument('key_name', arg_type=get_enum_type(['authKey1', 'authKey2']), help='The name of the authentication '
                   'key to regenerate.')

    with self.argument_context('synapse integration-runtime-monitoring-data get') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', type=str, help='Integration runtime name', id_part='child_name_1')

    with self.argument_context('synapse integration-runtime-status get') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('integration_runtime_name', type=str, help='Integration runtime name', id_part='child_name_1')

    with self.argument_context('synapse private-link-resource list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')

    with self.argument_context('synapse private-link-resource show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('private_link_resource_name', options_list=['--name', '-n', '--private-link-resource-name'],
                   type=str, help='The name of the private link resource', id_part='child_name_1')

    with self.argument_context('synapse private-endpoint-connection list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')

    with self.argument_context('synapse private-endpoint-connection show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n', '--private-endpoint-connection-nam'
                                                                     'e'], type=str, help='The name of the private '
                   'endpoint connection.', id_part='child_name_1')

    with self.argument_context('synapse private-endpoint-connection create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n', '--private-endpoint-connection-nam'
                                                                     'e'], type=str, help='The name of the private '
                   'endpoint connection.')

    with self.argument_context('synapse private-endpoint-connection delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n', '--private-endpoint-connection-nam'
                                                                     'e'], type=str, help='The name of the private '
                   'endpoint connection.', id_part='child_name_1')

    with self.argument_context('synapse private-endpoint-connection wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n', '--private-endpoint-connection-nam'
                                                                     'e'], type=str, help='The name of the private '
                   'endpoint connection.', id_part='child_name_1')

    with self.argument_context('synapse private-link-hub list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('synapse private-link-hub show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('private_link_hub_name', options_list=['--name', '-n', '--private-link-hub-name'], type=str, help=''
                   'The name of the privateLinkHub', id_part='name')

    with self.argument_context('synapse private-link-hub create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('private_link_hub_name', options_list=['--name', '-n', '--private-link-hub-name'], type=str, help=''
                   'The name of the privateLinkHub')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)

    with self.argument_context('synapse private-link-hub update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('private_link_hub_name', options_list=['--name', '-n', '--private-link-hub-name'], type=str, help=''
                   'The name of the privateLinkHub', id_part='name')
        c.argument('tags', tags_type)

    with self.argument_context('synapse private-link-hub delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('private_link_hub_name', options_list=['--name', '-n', '--private-link-hub-name'], type=str, help=''
                   'The name of the privateLinkHub', id_part='name')
