# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long

import os
from azure.cli.testsdk import ScenarioTest
from .. import try_manual, raise_if, calc_coverage
from azure.cli.testsdk import ResourceGroupPreparer


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


@try_manual
def setup(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15, rg_16,
          rg_17):
    pass


# EXAMPLE: /Workspaces/put/Create or update a workspace
@try_manual
def step__workspaces_put_create_or_update_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                      rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse workspace create '
             '--resource-group "{rg_2}" '
             '--identity-type "SystemAssigned" '
             '--location "East US" '
             '--default-data-lake-storage account-url="https://accountname.dfs.core.windows.net" filesystem="default" '
             '--managed-resource-group-name "workspaceManagedResourceGroupUnique" '
             '--managed-virtual-network "default" '
             '--sql-administrator-login "login" '
             '--sql-administrator-login-password "password" '
             '--tags key="value" '
             '--name "{myWorkspace2}"',
             checks=[
                 test.check("identity.type", "SystemAssigned", case_sensitive=False),
                 test.check("location", "East US", case_sensitive=False),
                 test.check("defaultDataLakeStorage.accountUrl", "https://accountname.dfs.core.windows.net",
                            case_sensitive=False),
                 test.check("defaultDataLakeStorage.filesystem", "default", case_sensitive=False),
                 test.check("managedResourceGroupName", "workspaceManagedResourceGroupUnique", case_sensitive=False),
                 test.check("managedVirtualNetwork", "default", case_sensitive=False),
                 test.check("sqlAdministratorLogin", "login", case_sensitive=False),
                 test.check("sqlAdministratorLoginPassword", "password", case_sensitive=False),
                 test.check("tags.key", "value", case_sensitive=False),
                 test.check("name", "{myWorkspace2}", case_sensitive=False),
             ])
    test.cmd('az synapse workspace wait --created '
             '--resource-group "{rg_2}" '
             '--name "{myWorkspace2}"',
             checks=[])


# EXAMPLE: /BigDataPools/put/Create or update a Big Data pool
@try_manual
def step__bigdatapools_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17):
    test.cmd('az synapse big-data-pool create '
             '--location "West US 2" '
             '--auto-pause delay-in-minutes=15 enabled=true '
             '--auto-scale enabled=true max-node-count=50 min-node-count=3 '
             '--default-spark-log-folder "/logs" '
             '--library-requirements content="" filename="requirements.txt" '
             '--node-count 4 '
             '--node-size "Medium" '
             '--node-size-family "MemoryOptimized" '
             '--spark-events-folder "/events" '
             '--spark-version "2.4" '
             '--tags key="value" '
             '--name "{myBigDataPool}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[
                 test.check("location", "West US 2", case_sensitive=False),
                 test.check("autoPause.delayInMinutes", 15),
                 test.check("autoPause.enabled", True),
                 test.check("autoScale.enabled", True),
                 test.check("autoScale.maxNodeCount", 50),
                 test.check("autoScale.minNodeCount", 3),
                 test.check("defaultSparkLogFolder", "/logs", case_sensitive=False),
                 test.check("nodeCount", 4),
                 test.check("nodeSize", "Medium", case_sensitive=False),
                 test.check("nodeSizeFamily", "MemoryOptimized", case_sensitive=False),
                 test.check("sparkEventsFolder", "/events", case_sensitive=False),
                 test.check("sparkVersion", "2.4", case_sensitive=False),
                 test.check("tags.key", "value", case_sensitive=False),
                 test.check("name", "{myBigDataPool}", case_sensitive=False),
             ])
    test.cmd('az synapse big-data-pool wait --created '
             '--name "{myBigDataPool}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /BigDataPools/get/List Big Data pools in a workspace
@try_manual
def step__bigdatapools_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17):
    test.cmd('az synapse big-data-pool list '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /BigDataPools/patch/Update a Big Data pool
@try_manual
def step__bigdatapools_patch_update_a_big_data_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                    rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse big-data-pool update '
             '--name "{myBigDataPool}" '
             '--tags key="value" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[
                 test.check("location", "West US 2", case_sensitive=False),
                 test.check("autoPause.delayInMinutes", 15),
                 test.check("autoPause.enabled", True),
                 test.check("autoScale.enabled", True),
                 test.check("autoScale.maxNodeCount", 50),
                 test.check("autoScale.minNodeCount", 3),
                 test.check("defaultSparkLogFolder", "/logs", case_sensitive=False),
                 test.check("nodeCount", 4),
                 test.check("nodeSize", "Medium", case_sensitive=False),
                 test.check("nodeSizeFamily", "MemoryOptimized", case_sensitive=False),
                 test.check("sparkEventsFolder", "/events", case_sensitive=False),
                 test.check("sparkVersion", "2.4", case_sensitive=False),
                 test.check("tags.key", "value", case_sensitive=False),
                 test.check("name", "{myBigDataPool}", case_sensitive=False),
             ])


# EXAMPLE: /IntegrationRuntimes/put/Create integration runtime
@try_manual
def step__integrationruntimes_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                  rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime create '
             '--properties "{{\\"type\\":\\"SelfHosted\\",\\"description\\":\\"A selfhosted integration runtime\\"}}" '
             '--name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[
                 test.check("properties.type", "SelfHosted", case_sensitive=False),
                 test.check("properties.description", "A selfhosted integration runtime", case_sensitive=False),
                 test.check("name", "{myIntegrationRuntime}", case_sensitive=False),
             ])


# EXAMPLE: /IntegrationRuntimes/get/Get integration runtime
@try_manual
def step__integrationruntimes_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                  rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime show '
             '--name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[
                 test.check("properties.type", "SelfHosted", case_sensitive=False),
                 test.check("properties.description", "A selfhosted integration runtime", case_sensitive=False),
                 test.check("name", "{myIntegrationRuntime}", case_sensitive=False),
             ])


# EXAMPLE: /IntegrationRuntimes/get/List integration runtimes
@try_manual
def step__integrationruntimes_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime list '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /IntegrationRuntimes/post/Start integration runtime
@try_manual
def step__integrationruntimes_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime start '
             '--name "{myIntegrationRuntime2}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/Stop integration runtime
@try_manual
def step__integrationruntimes_post2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime stop '
             '--name "{myIntegrationRuntime2}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/Upgrade integration runtime
@try_manual
def step__integrationruntimes_post3(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime upgrade '
             '--name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/patch/Update integration runtime
@try_manual
def step__integrationruntimes_patch(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime update '
             '--name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--auto-update "Off" '
             '--update-delay-offset "\\"PT3H\\"" '
             '--workspace-name "{myWorkspace20}"',
             checks=[
                 test.check("name", "{myIntegrationRuntime}", case_sensitive=False),
             ])


# EXAMPLE: /IntegrationRuntimeAuthKeys/post/List auth keys
@try_manual
def step__integrationruntimeauthkeys_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                          rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime-auth-key list '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeAuthKeys/post/Regenerate auth key
@try_manual
def step__integrationruntimeauthkeys_post2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                           rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime-auth-key regenerate '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--key-name "authKey2" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeConnectionInfos/post/Get connection info
@try_manual
def step__integrationruntimeconnectioninfos_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime-connection-info get '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeCredentials/post/Sync credentials
@try_manual
def step__integrationruntimecredentials_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                             rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime-credentials sync '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeMonitoringData/post/Get monitoring data
@try_manual
def step__integrationruntimemonitoringdata_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                                rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime-monitoring-data get '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeNodeIpAddress/post/Get integration runtime node IP address
@try_manual
def step__integrationruntimenodeipaddress_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime-node-ip-address get '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--node-name "Node_1" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeNodes/get/Get integration runtime node
@try_manual
def step__integrationruntimenodes_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                      rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime-node show '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--node-name "Node_1" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeNodes/patch/Update integration runtime node
@try_manual
def step__integrationruntimenodes_patch(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                        rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime-node update '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--node-name "Node_1" '
             '--resource-group "{rg_17}" '
             '--concurrent-jobs-limit 2 '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeObjectMetadata/post/Get integration runtime object metadata
@try_manual
def step__integrationruntimeobjectmetadata_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                                rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime-object-metadata get '
             '--metadata-path "ssisFolders" '
             '--integration-runtime-name "{myIntegrationRuntime3}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeObjectMetadata/post/Refresh object metadata
@try_manual
def step__integrationruntimeobjectmetadata_post2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime-object-metadata refresh '
             '--integration-runtime-name "{myIntegrationRuntime3}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeStatus/post/Get status
@try_manual
def step__integrationruntimestatus_post_get_status(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                   rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime-status get '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IpFirewallRules/put/Create an IP firewall rule
@try_manual
def step__ipfirewallrules_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse ip-firewall-rule create '
             '--end-ip-address "10.0.0.254" '
             '--start-ip-address "10.0.0.0" '
             '--resource-group "{rg}" '
             '--rule-name "ExampleIpFirewallRule" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /IpFirewallRules/get/Create an IP firewall rule
@try_manual
def step__ipfirewallrules_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse ip-firewall-rule show '
             '--resource-group "{rg}" '
             '--rule-name "ExampleIpFirewallRule" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /IpFirewallRules/get/List IP firewall rules in a workspace
@try_manual
def step__ipfirewallrules_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                               rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse ip-firewall-rule list '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /IpFirewallRules/post/Replace all IP firewall rules in a workspace
@try_manual
def step__ipfirewallrules_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                               rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse ip-firewall-rule replace-all '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}" '
             '--ip-firewall-rules "{{\\"AnotherExampleFirewallRule\\":{{\\"endIpAddress\\":\\"10.0.1.254\\",\\"startIpA'
             'ddress\\":\\"10.0.1.0\\"}},\\"ExampleFirewallRule\\":{{\\"endIpAddress\\":\\"10.0.0.254\\",\\"startIpAddr'
             'ess\\":\\"10.0.0.0\\"}}}}"',
             checks=[])


# EXAMPLE: /Operations/get/Get azure async operation header result
@try_manual
def step__operations_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                         rg_15, rg_16, rg_17):
    test.cmd('az synapse operation get-azure-async-header-result '
             '--operation-id "01234567-89ab-4def-0123-456789abcdef" '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=[])


# EXAMPLE: /Operations/get/Get location header result
@try_manual
def step__operations_get_get_location_header_result(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                    rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse operation get-location-header-result '
             '--operation-id "01234567-89ab-4def-0123-456789abcdef" '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=[])


# EXAMPLE: /PrivateEndpointConnections/put/Approve private endpoint connection
@try_manual
def step__privateendpointconnections_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse private-endpoint-connection create '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])
    test.cmd('az synapse private-endpoint-connection wait --created '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /PrivateEndpointConnections/get/Get private endpoint connection
@try_manual
def step__privateendpointconnections_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse private-endpoint-connection show '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /PrivateEndpointConnections/get/List private endpoint connections in workspace
@try_manual
def step__privateendpointconnections_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                          rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse private-endpoint-connection list '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /PrivateLinkHubs/put/Create or update a privateLinkHub
@try_manual
def step__privatelinkhubs_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse private-link-hub create '
             '--location "East US" '
             '--tags key="value" '
             '--name "{myPrivateLinkHub}" '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check("location", "East US", case_sensitive=False),
                 test.check("tags.key", "value", case_sensitive=False),
                 test.check("name", "{myPrivateLinkHub}", case_sensitive=False),
             ])


# EXAMPLE: /PrivateLinkHubs/get/Get a privateLinkHub
@try_manual
def step__privatelinkhubs_get_get_a_privatelinkhub(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                   rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse private-link-hub show '
             '--name "{myPrivateLinkHub}" '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check("location", "East US", case_sensitive=False),
                 test.check("tags.key", "value", case_sensitive=False),
                 test.check("name", "{myPrivateLinkHub}", case_sensitive=False),
             ])


# EXAMPLE: /PrivateLinkHubs/get/List privateLinkHubs in resource group
@try_manual
def step__privatelinkhubs_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse private-link-hub list '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /PrivateLinkHubs/get/List privateLinkHubs in subscription
@try_manual
def step__privatelinkhubs_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                               rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse private-link-hub list '
             '-g ""',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /PrivateLinkHubs/patch/Update a privateLinkHub
@try_manual
def step__privatelinkhubs_patch(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse private-link-hub update '
             '--name "{myPrivateLinkHub}" '
             '--tags key="value" '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check("location", "East US", case_sensitive=False),
                 test.check("tags.key", "value", case_sensitive=False),
                 test.check("name", "{myPrivateLinkHub}", case_sensitive=False),
             ])


# EXAMPLE: /BigDataPools/get/Get a Big Data pool
@try_manual
def step__bigdatapools_get_get_a_big_data_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse big-data-pool show '
             '--name "{myBigDataPool}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[
                 test.check("location", "West US 2", case_sensitive=False),
                 test.check("autoPause.delayInMinutes", 15),
                 test.check("autoPause.enabled", True),
                 test.check("autoScale.enabled", True),
                 test.check("autoScale.maxNodeCount", 50),
                 test.check("autoScale.minNodeCount", 3),
                 test.check("defaultSparkLogFolder", "/logs", case_sensitive=False),
                 test.check("nodeCount", 4),
                 test.check("nodeSize", "Medium", case_sensitive=False),
                 test.check("nodeSizeFamily", "MemoryOptimized", case_sensitive=False),
                 test.check("sparkEventsFolder", "/events", case_sensitive=False),
                 test.check("sparkVersion", "2.4", case_sensitive=False),
                 test.check("name", "{myBigDataPool}", case_sensitive=False),
             ])


# EXAMPLE: /Workspaces/get/Get a workspace
@try_manual
def step__workspaces_get_get_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse workspace show '
             '--resource-group "{rg_2}" '
             '--name "{myWorkspace2}"',
             checks=[
                 test.check("location", "East US", case_sensitive=False),
                 test.check("defaultDataLakeStorage.accountUrl", "https://accountname.dfs.core.windows.net",
                            case_sensitive=False),
                 test.check("defaultDataLakeStorage.filesystem", "default", case_sensitive=False),
                 test.check("sqlAdministratorLogin", "login", case_sensitive=False),
                 test.check("sqlAdministratorLoginPassword", "password", case_sensitive=False),
                 test.check("tags.key", "value", case_sensitive=False),
                 test.check("name", "{myWorkspace2}", case_sensitive=False),
             ])


# EXAMPLE: /Workspaces/get/List workspaces in resource group
@try_manual
def step__workspaces_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                         rg_15, rg_16, rg_17):
    test.cmd('az synapse workspace list '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /Workspaces/get/List workspaces in subscription
@try_manual
def step__workspaces_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                          rg_15, rg_16, rg_17):
    test.cmd('az synapse workspace list '
             '-g ""',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /Workspaces/patch/Update a workspace
@try_manual
def step__workspaces_patch_update_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                              rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse workspace update '
             '--resource-group "{rg_2}" '
             '--name "{myWorkspace2}" '
             '--identity-type "SystemAssigned" '
             '--sql-administrator-login-password "password" '
             '--tags key="value"',
             checks=[
                 test.check("location", "East US", case_sensitive=False),
                 test.check("defaultDataLakeStorage.accountUrl", "https://accountname.dfs.core.windows.net",
                            case_sensitive=False),
                 test.check("defaultDataLakeStorage.filesystem", "default", case_sensitive=False),
                 test.check("sqlAdministratorLogin", "login", case_sensitive=False),
                 test.check("sqlAdministratorLoginPassword", "password", case_sensitive=False),
                 test.check("tags.key", "value", case_sensitive=False),
                 test.check("name", "{myWorkspace2}", case_sensitive=False),
             ])


# EXAMPLE: /PrivateLinkResources/get/Get private link resources for workspace
@try_manual
def step__privatelinkresources_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse private-link-resource list '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /PrivateLinkResources/get/Get private link resources for workspace
@try_manual
def step__privatelinkresources_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse private-link-resource list '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /SqlPools/put/Create a SQL Analytics pool
@try_manual
def step__sqlpools_put_create_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                   rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool create '
             '--resource-group "{rg}" '
             '--location "West US 2" '
             '--collation "" '
             '--create-mode "" '
             '--creation-date "1970-01-01T00:00:00.000Z" '
             '--max-size-bytes 0 '
             '--recoverable-database-id "" '
             '--restore-point-in-time "1970-01-01T00:00:00.000Z" '
             '--source-database-id "" '
             '--sku name="" tier="" '
             '--name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[
                 test.check("location", "West US 2", case_sensitive=False),
                 test.check("collation", "", case_sensitive=False),
                 test.check("createMode", "", case_sensitive=False),
                 test.check("creationDate", "1970-01-01T00:00:00.000Z", case_sensitive=False),
                 test.check("maxSizeBytes", 0),
                 test.check("recoverableDatabaseId", "", case_sensitive=False),
                 test.check("restorePointInTime", "1970-01-01T00:00:00.000Z", case_sensitive=False),
                 test.check("sourceDatabaseId", "", case_sensitive=False),
                 test.check("sku.name", "", case_sensitive=False),
                 test.check("sku.tier", "", case_sensitive=False),
                 test.check("name", "{mySqlPool2}", case_sensitive=False),
             ])
    test.cmd('az synapse sql-pool wait --created '
             '--resource-group "{rg}" '
             '--name "{mySqlPool2}"',
             checks=[])


# EXAMPLE: /SqlPools/get/Get a SQL Analytics pool
@try_manual
def step__sqlpools_get_get_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                                rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool show '
             '--resource-group "{rg_4}" '
             '--name "{mySqlPool}" '
             '--workspace-name "{myWorkspace4}"',
             checks=[])


# EXAMPLE: /SqlPools/get/List SQL Analytics pools in a workspace
@try_manual
def step__sqlpools_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                       rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool list '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace3}"',
             checks=[])


# EXAMPLE: /SqlPools/get/List SQL Analytics pools in a workspace with filter
@try_manual
def step__sqlpools_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                        rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool list '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace3}"',
             checks=[])


# EXAMPLE: /SqlPools/post/Pause a SQL Analytics pool
@try_manual
def step__sqlpools_post_pause_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                   rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool pause '
             '--resource-group "{rg_5}" '
             '--name "{mySqlPool3}" '
             '--workspace-name "{myWorkspace5}"',
             checks=[])


# EXAMPLE: /SqlPools/post/Rename a SQL Analytics pool
@try_manual
def step__sqlpools_post_rename_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                    rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool rename '
             '--id "/subscriptions/{subscription_id}/resourceGroups/{rg_5}/providers/Microsoft.Synapse/workspaces/{myWo'
             'rkspace5}/sqlPools/{mySqlPool4}" '
             '--resource-group "{rg_5}" '
             '--name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace5}"',
             checks=[])


# EXAMPLE: /SqlPools/post/Resume a SQL Analytics pool
@try_manual
def step__sqlpools_post_resume_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                    rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool resume '
             '--resource-group "{rg_4}" '
             '--name "{mySqlPool}" '
             '--workspace-name "{myWorkspace4}"',
             checks=[])


# EXAMPLE: /SqlPools/patch/Update a SQL Analytics pool
@try_manual
def step__sqlpools_patch_update_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                     rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool update '
             '--resource-group "{rg}" '
             '--location "West US 2" '
             '--collation "" '
             '--create-mode "" '
             '--creation-date "1970-01-01T00:00:00.000Z" '
             '--max-size-bytes 0 '
             '--recoverable-database-id "" '
             '--restore-point-in-time "1970-01-01T00:00:00.000Z" '
             '--source-database-id "" '
             '--sku name="" tier="" '
             '--name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[
                 test.check("location", "West US 2", case_sensitive=False),
                 test.check("collation", "", case_sensitive=False),
                 test.check("createMode", "", case_sensitive=False),
                 test.check("creationDate", "1970-01-01T00:00:00.000Z", case_sensitive=False),
                 test.check("maxSizeBytes", 0),
                 test.check("recoverableDatabaseId", "", case_sensitive=False),
                 test.check("restorePointInTime", "1970-01-01T00:00:00.000Z", case_sensitive=False),
                 test.check("sourceDatabaseId", "", case_sensitive=False),
                 test.check("sku.name", "", case_sensitive=False),
                 test.check("sku.tier", "", case_sensitive=False),
                 test.check("name", "{mySqlPool2}", case_sensitive=False),
             ])


# EXAMPLE: /SqlPoolBlobAuditingPolicies/put/Create or update a database's blob auditing policy with all parameters
@try_manual
def step__sqlpoolblobauditingpolicies_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                          rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-blob-auditing-policy create '
             '--audit-actions-and-groups "DATABASE_LOGOUT_GROUP" '
             '--audit-actions-and-groups "DATABASE_ROLE_MEMBER_CHANGE_GROUP" '
             '--audit-actions-and-groups "UPDATE on database::TestDatabaseName by public" '
             '--is-azure-monitor-target-enabled true '
             '--is-storage-secondary-key-in-use false '
             '--retention-days 6 '
             '--state "Enabled" '
             '--storage-account-access-key "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD234230943284932847645'
             '8/3RSD==" '
             '--storage-account-subscription-id "00000000-1234-0000-5678-000000000000" '
             '--storage-endpoint "https://mystorage.blob.core.windows.net" '
             '--resource-group "{rg_8}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace10}"',
             checks=[])


# EXAMPLE: /SqlPoolBlobAuditingPolicies/put/Create or update a database's blob auditing policy with minimal parameters
@try_manual
def step__sqlpoolblobauditingpolicies_put2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                           rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-blob-auditing-policy create '
             '--state "Enabled" '
             '--storage-account-access-key "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD234230943284932847645'
             '8/3RSD==" '
             '--storage-endpoint "https://mystorage.blob.core.windows.net" '
             '--resource-group "{rg_8}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace10}"',
             checks=[])


# EXAMPLE: /SqlPoolBlobAuditingPolicies/get/Get blob auditing policy of a SQL Analytics pool
@try_manual
def step__sqlpoolblobauditingpolicies_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                          rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-blob-auditing-policy show '
             '--resource-group "{rg_7}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace9}"',
             checks=[])


# EXAMPLE: /SqlPoolConnectionPolicies/get/Get a connection policy of a SQL Analytics pool
@try_manual
def step__sqlpoolconnectionpolicies_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                        rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-connection-policy show '
             '--resource-group "{rg_7}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace9}"',
             checks=[])


# EXAMPLE: /SqlPoolDataWarehouseUserActivities/get/Get a SQL Analytics pool user activity
@try_manual
def step__sqlpooldatawarehouseuseractivities_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-data-warehouse-user-activity show '
             '--resource-group "{rg_5}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace5}"',
             checks=[])


# EXAMPLE: /SqlPoolGeoBackupPolicies/get/Get Sql pool geo backup policy
@try_manual
def step__sqlpoolgeobackuppolicies_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                       rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-geo-backup-policy show '
             '--resource-group "{rg_6}" '
             '--sql-pool-name "{mySqlPool6}" '
             '--workspace-name "{myWorkspace6}"',
             checks=[])


# EXAMPLE: /SqlPoolMetadataSyncConfigs/put/Set metadata sync config for a SQL Analytics pool
@try_manual
def step__sqlpoolmetadatasyncconfigs_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-metadata-sync-config create '
             '--enabled true '
             '--resource-group "{rg}" '
             '--sql-pool-name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /SqlPoolMetadataSyncConfigs/get/Get metadata sync config for a SQL Analytics pool
@try_manual
def step__sqlpoolmetadatasyncconfigs_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-metadata-sync-config show '
             '--resource-group "{rg}" '
             '--sql-pool-name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /SqlPoolOperationResults/get/Get the result of an operation on a SQL Analytics pool
@try_manual
def step__sqlpooloperationresults_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                      rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-operation-result get-location-header-result '
             '--operation-id "fedcba98-7654-4210-fedc-ba9876543210" '
             '--resource-group "{rg}" '
             '--sql-pool-name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /SqlPoolOperations/get/List the Sql Analytics pool management operations
@try_manual
def step__sqlpooloperations_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-operation list '
             '--resource-group "{rg_9}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace11}"',
             checks=[])


# EXAMPLE: /SqlPoolReplicationLinks/get/Lists a Sql Analytic pool's replication links
@try_manual
def step__sqlpoolreplicationlinks_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                      rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-replication-link list '
             '--resource-group "{rg_6}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace8}"',
             checks=[])


# EXAMPLE: /SqlPoolRestorePoints/get/Get a list of restore points of a SQL Analytics pool
@try_manual
def step__sqlpoolrestorepoints_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-restore-point list '
             '--resource-group "{rg_5}" '
             '--sql-pool-name "{mySqlPool7}" '
             '--workspace-name "{myWorkspace7}"',
             checks=[])


# EXAMPLE: /SqlPoolRestorePoints/post/Creates Sql pool restore point.
@try_manual
def step__sqlpoolrestorepoints_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-restore-point create '
             '--restore-point-label "mylabel" '
             '--resource-group "{rg_5}" '
             '--sql-pool-name "{mySqlPool7}" '
             '--workspace-name "{myWorkspace7}"',
             checks=[])


# EXAMPLE: /SqlPoolSchemas/get/List the schema in a SQL Analytics pool
@try_manual
def step__sqlpoolschemas_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                             rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-schema list '
             '--resource-group "{rg_11}" '
             '--sql-pool-name "{mySqlPool9}" '
             '--workspace-name "{myWorkspace14}"',
             checks=[])


# EXAMPLE: /SqlPoolSecurityAlertPolicies/put/Update a Sql pool's threat detection policy with all parameters
@try_manual
def step__sqlpoolsecurityalertpolicies_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                           rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-security-alert-policy create '
             '--disabled-alerts "Sql_Injection" '
             '--disabled-alerts "Usage_Anomaly" '
             '--email-account-admins true '
             '--email-addresses "test@microsoft.com" '
             '--email-addresses "user@microsoft.com" '
             '--retention-days 6 '
             '--state "Enabled" '
             '--storage-account-access-key "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD234230943284932847645'
             '8/3RSD==" '
             '--storage-endpoint "https://mystorage.blob.core.windows.net" '
             '--resource-group "{rg_16}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace19}"',
             checks=[])


# EXAMPLE: /SqlPoolSecurityAlertPolicies/put/Update a Sql pool's threat detection policy with minimal parameters
@try_manual
def step__sqlpoolsecurityalertpolicies_put2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                            rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-security-alert-policy create '
             '--state "Enabled" '
             '--resource-group "{rg_16}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace19}"',
             checks=[])


# EXAMPLE: /SqlPoolSecurityAlertPolicies/get/Get a security alert of a SQL Analytics pool
@try_manual
def step__sqlpoolsecurityalertpolicies_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                           rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-security-alert-policy show '
             '--resource-group "{rg_15}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace18}"',
             checks=[])


# EXAMPLE: /SqlPoolSensitivityLabels/put/Updates the sensitivity label of a given column with all parameters
@try_manual
def step__sqlpoolsensitivitylabels_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                       rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-sensitivity-label create '
             '--column-name "myColumn" '
             '--information-type "PhoneNumber" '
             '--information-type-id "d22fa6e9-5ee4-3bde-4c2b-a409604c4646" '
             '--label-id "bf91e08c-f4f0-478a-b016-25164b2a65ff" '
             '--label-name "PII" '
             '--resource-group "{rg_11}" '
             '--schema-name "dbo" '
             '--sql-pool-name "{mySqlPool9}" '
             '--table-name "myTable" '
             '--workspace-name "{myWorkspace13}"',
             checks=[])


# EXAMPLE: /SqlPoolSensitivityLabels/get/Gets the current sensitivity labels of a given SQL Analytics pool
@try_manual
def step__sqlpoolsensitivitylabels_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                       rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-sensitivity-label list-current '
             '--resource-group "{rg_11}" '
             '--sql-pool-name "{mySqlPool9}" '
             '--workspace-name "{myWorkspace13}"',
             checks=[])


# EXAMPLE: /SqlPoolSensitivityLabels/get/Gets the recommended sensitivity labels of a given SQL Analytics pool
@try_manual
def step__sqlpoolsensitivitylabels_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                        rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-sensitivity-label list-recommended '
             '--resource-group "{rg_11}" '
             '--sql-pool-name "{mySqlPool9}" '
             '--workspace-name "{myWorkspace13}"',
             checks=[])


# EXAMPLE: /SqlPoolSensitivityLabels/post/Disables sensitivity recommendations on a given column
@try_manual
def step__sqlpoolsensitivitylabels_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                        rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-sensitivity-label disable-recommendation '
             '--column-name "myColumn" '
             '--resource-group "{rg_11}" '
             '--schema-name "dbo" '
             '--sql-pool-name "{mySqlPool9}" '
             '--table-name "myTable" '
             '--workspace-name "{myWorkspace13}"',
             checks=[])


# EXAMPLE: /SqlPoolSensitivityLabels/post/Enables sensitivity recommendations on a given column
@try_manual
def step__sqlpoolsensitivitylabels_post2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-sensitivity-label enable-recommendation '
             '--column-name "myColumn" '
             '--resource-group "{rg_11}" '
             '--schema-name "dbo" '
             '--sql-pool-name "{mySqlPool9}" '
             '--table-name "myTable" '
             '--workspace-name "{myWorkspace13}"',
             checks=[])


# EXAMPLE: /SqlPoolTableColumns/get/List the columns in a table of a given schema in a SQL Analytics pool
@try_manual
def step__sqlpooltablecolumns_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                  rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-table-column list '
             '--resource-group "{rg_11}" '
             '--schema-name "dbo" '
             '--sql-pool-name "{mySqlPool9}" '
             '--table-name "table1" '
             '--workspace-name "{myWorkspace14}"',
             checks=[])


# EXAMPLE: /SqlPoolTables/get/List the tables of a given schema in a SQL Analytics pool
@try_manual
def step__sqlpooltables_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                            rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-table list '
             '--resource-group "{rg_11}" '
             '--schema-name "dbo" '
             '--sql-pool-name "{mySqlPool9}" '
             '--workspace-name "{myWorkspace14}"',
             checks=[])


# EXAMPLE: /SqlPoolTransparentDataEncryptions/put/Create or update a Sql pool's transparent data encryption configuration
@try_manual
def step__sqlpooltransparentdataencryptions_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                                rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-transparent-data-encryption create '
             '--status "Enabled" '
             '--resource-group "{rg_4}" '
             '--sql-pool-name "{mySqlPool}" '
             '--workspace-name "{myWorkspace4}"',
             checks=[])


# EXAMPLE: /SqlPoolTransparentDataEncryptions/get/Get transparent data encryption configuration of a SQL Analytics pool
@try_manual
def step__sqlpooltransparentdataencryptions_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                                rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-transparent-data-encryption show '
             '--resource-group "{rg_4}" '
             '--sql-pool-name "{mySqlPool}" '
             '--workspace-name "{myWorkspace4}"',
             checks=[])


# EXAMPLE: /SqlPoolUsages/get/List the usages of a SQL Analytics pool
@try_manual
def step__sqlpoolusages_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                            rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-usage list '
             '--resource-group "{rg_10}" '
             '--sql-pool-name "{mySqlPool8}" '
             '--workspace-name "{myWorkspace12}"',
             checks=[])


# EXAMPLE: /SqlPoolVulnerabilityAssessmentRuleBaselines/put/Creates or updates a database's vulnerability assessment rule baseline.
@try_manual
def step__sqlpoolvulnerabilityassessmentrulebaselines_(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                       rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-vulnerability-assessment-rule-baseline create '
             '--baseline-name "default" '
             '--baseline-results result="userA" result="SELECT" '
             '--baseline-results result="userB" result="SELECT" '
             '--baseline-results result="userC" result="SELECT" result="tableId_4" '
             '--resource-group "{rg_12}" '
             '--rule-id "VA1001" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=[])


# EXAMPLE: /SqlPoolVulnerabilityAssessmentScans/get/Get a vulnerability scan record of a SQL Analytics pool
@try_manual
def step__sqlpoolvulnerabilityassessmentscans_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                  rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-vulnerability-assessment-scan list '
             '--resource-group "{rg_13}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace16}"',
             checks=[])


# EXAMPLE: /SqlPoolVulnerabilityAssessmentScans/post/Executes a Sql pool's vulnerability assessment scan.
@try_manual
def step__sqlpoolvulnerabilityassessmentscans_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                   rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-vulnerability-assessment-scan initiate-scan '
             '--resource-group "{rg_13}" '
             '--scan-id "scan01" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace16}"',
             checks=[])


# EXAMPLE: /SqlPoolVulnerabilityAssessmentScans/post/Export a database's vulnerability assessment scan results.
@try_manual
def step__sqlpoolvulnerabilityassessmentscans_post2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                    rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-vulnerability-assessment-scan export '
             '--resource-group "{rg_14}" '
             '--scan-id "scan001" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace17}"',
             checks=[])


# EXAMPLE: /SqlPoolVulnerabilityAssessments/put/Create a database's vulnerability assessment with all parameters
@try_manual
def step__sqlpoolvulnerabilityassessments_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                              rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-vulnerability-assessment create '
             '--recurring-scans email-subscription-admins=true emails="email1@mail.com" emails="email2@mail.com" '
             'is-enabled=true '
             '--storage-account-access-key "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" '
             '--storage-container-path "https://myStorage.blob.core.windows.net/vulnerability-assessment/" '
             '--storage-container-sas-key "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" '
             '--resource-group "{rg_12}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=[])


# EXAMPLE: /SqlPoolVulnerabilityAssessments/put/Create a database's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified
@try_manual
def step__sqlpoolvulnerabilityassessments_put2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-vulnerability-assessment create '
             '--storage-account-access-key "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" '
             '--storage-container-path "https://myStorage.blob.core.windows.net/vulnerability-assessment/" '
             '--resource-group "{rg_12}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=[])


# EXAMPLE: /SqlPoolVulnerabilityAssessments/put/Create a database's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified
@try_manual
def step__sqlpoolvulnerabilityassessments_put3(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-vulnerability-assessment create '
             '--storage-container-path "https://myStorage.blob.core.windows.net/vulnerability-assessment/" '
             '--storage-container-sas-key "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" '
             '--resource-group "{rg_12}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=[])


# EXAMPLE: /SqlPoolVulnerabilityAssessments/get/Get a Sql pool's vulnerability assessment
@try_manual
def step__sqlpoolvulnerabilityassessments_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                              rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-vulnerability-assessment show '
             '--resource-group "{rg_12}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=[])


# EXAMPLE: /SqlPoolVulnerabilityAssessments/get/Get a vulnerability assessment of a SQL Analytics pool
@try_manual
def step__sqlpoolvulnerabilityassessments_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-vulnerability-assessment list '
             '--resource-group "{rg_12}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=[])


# EXAMPLE: /SqlPoolSensitivityLabels/delete/Deletes the sensitivity label of a given column
@try_manual
def step__sqlpoolsensitivitylabels_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                          rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-sensitivity-label delete -y '
             '--column-name "myColumn" '
             '--resource-group "{rg_11}" '
             '--schema-name "dbo" '
             '--sql-pool-name "{mySqlPool9}" '
             '--table-name "myTable" '
             '--workspace-name "{myWorkspace13}"',
             checks=[])


# EXAMPLE: /WorkspaceAadAdmins/put/Create or update workspace active directory admin
@try_manual
def step__workspaceaadadmins_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse workspace-aad-admin create '
             '--administrator-type "ActiveDirectory" '
             '--login "bob@contoso.com" '
             '--sid "c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c" '
             '--tenant-id "c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c" '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=[])


# EXAMPLE: /WorkspaceAadAdmins/get/Get workspace active directory admin
@try_manual
def step__workspaceaadadmins_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse workspace-aad-admin show '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=[])


# EXAMPLE: /WorkspaceManagedIdentitySqlControlSettings/put/Create or update managed identity sql control settings
@try_manual
def step__workspacemanagedidentitysqlcontrolsettings_p(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                       rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse workspace-managed-identity-sql-control-setting create '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=[])


# EXAMPLE: /WorkspaceManagedIdentitySqlControlSettings/get/Get managed identity sql control settings
@try_manual
def step__workspacemanagedidentitysqlcontrolsettings_g(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                       rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse workspace-managed-identity-sql-control-setting show '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=[])


# EXAMPLE: /BigDataPools/delete/Delete a Big Data pool
@try_manual
def step__bigdatapools_delete_delete_a_big_data_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                     rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse big-data-pool delete -y '
             '--name "{myBigDataPool}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeNodes/delete/Delete integration runtime node
@try_manual
def step__integrationruntimenodes_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime-node delete -y '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--node-name "Node_1" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/delete/Delete integration runtime
@try_manual
def step__integrationruntimes_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                     rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse integration-runtime delete -y '
             '--name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=[])


# EXAMPLE: /IpFirewallRules/delete/Delete an IP firewall rule from a workspace
@try_manual
def step__ipfirewallrules_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse ip-firewall-rule delete -y '
             '--resource-group "{rg}" '
             '--rule-name "ExampleIpFirewallRule" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /PrivateEndpointConnections/delete/Delete private endpoint connection
@try_manual
def step__privateendpointconnections_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                            rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse private-endpoint-connection delete -y '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /SqlPoolVulnerabilityAssessmentRuleBaselines/delete/Removes a database's vulnerability assessment rule baseline.
@try_manual
def step__sqlpoolvulnerabilityassessmentrulebaselines_2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9,
                                                        rg_10, rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-vulnerability-assessment-rule-baseline delete -y '
             '--baseline-name "default" '
             '--resource-group "{rg_12}" '
             '--rule-id "VA1001" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=[])


# EXAMPLE: /PrivateLinkHubs/delete/Delete a privateLinkHub
@try_manual
def step__privatelinkhubs_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse private-link-hub delete -y '
             '--name "{myPrivateLinkHub}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /SqlPoolVulnerabilityAssessments/delete/Remove a database's vulnerability assessment
@try_manual
def step__sqlpoolvulnerabilityassessments_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool-vulnerability-assessment delete -y '
             '--resource-group "{rg_12}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=[])


# EXAMPLE: /SqlPools/delete/Delete a SQL Analytics pool
@try_manual
def step__sqlpools_delete_delete_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                      rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse sql-pool delete -y '
             '--resource-group "{rg}" '
             '--name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: /WorkspaceAadAdmins/delete/Delete workspace active directory admin
@try_manual
def step__workspaceaadadmins_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse workspace-aad-admin delete -y '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=[])


# EXAMPLE: /Workspaces/delete/Delete a workspace
@try_manual
def step__workspaces_delete_delete_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17):
    test.cmd('az synapse workspace delete -y '
             '--resource-group "{rg_2}" '
             '--name "{myWorkspace2}"',
             checks=[])


@try_manual
def cleanup(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15, rg_16,
            rg_17):
    pass


@try_manual
def call_scenario(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                  rg_16, rg_17):
    setup(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15, rg_16,
          rg_17)
    step__workspaces_put_create_or_update_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                      rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__bigdatapools_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17)
    step__bigdatapools_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17)
    step__bigdatapools_patch_update_a_big_data_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                    rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimes_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                  rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimes_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                  rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimes_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimes_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimes_post2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimes_post3(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimes_patch(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimeauthkeys_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                          rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimeauthkeys_post2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                           rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimeconnectioninfos_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimecredentials_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                             rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimemonitoringdata_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                                rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimenodeipaddress_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimenodes_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                      rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimenodes_patch(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                        rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimeobjectmetadata_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                                rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimeobjectmetadata_post2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimestatus_post_get_status(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                   rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__ipfirewallrules_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, rg_16, rg_17)
    step__ipfirewallrules_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, rg_16, rg_17)
    step__ipfirewallrules_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                               rg_14, rg_15, rg_16, rg_17)
    step__ipfirewallrules_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                               rg_14, rg_15, rg_16, rg_17)
    step__operations_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                         rg_15, rg_16, rg_17)
    step__operations_get_get_location_header_result(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                    rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__privateendpointconnections_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17)
    step__privateendpointconnections_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17)
    step__privateendpointconnections_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                          rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__privatelinkhubs_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, rg_16, rg_17)
    step__privatelinkhubs_get_get_a_privatelinkhub(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                   rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__privatelinkhubs_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, rg_16, rg_17)
    step__privatelinkhubs_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                               rg_14, rg_15, rg_16, rg_17)
    step__privatelinkhubs_patch(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                rg_14, rg_15, rg_16, rg_17)
    step__bigdatapools_get_get_a_big_data_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__workspaces_get_get_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17)
    step__workspaces_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                         rg_15, rg_16, rg_17)
    step__workspaces_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                          rg_15, rg_16, rg_17)
    step__workspaces_patch_update_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                              rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__privatelinkresources_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, rg_16, rg_17)
    step__privatelinkresources_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpools_put_create_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                   rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpools_get_get_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                                rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpools_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                       rg_15, rg_16, rg_17)
    step__sqlpools_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                        rg_15, rg_16, rg_17)
    step__sqlpools_post_pause_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                   rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpools_post_rename_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                    rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpools_post_resume_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                    rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpools_patch_update_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                     rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolblobauditingpolicies_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                          rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolblobauditingpolicies_put2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                           rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolblobauditingpolicies_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                          rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolconnectionpolicies_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                        rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpooldatawarehouseuseractivities_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolgeobackuppolicies_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                       rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolmetadatasyncconfigs_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolmetadatasyncconfigs_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpooloperationresults_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                      rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpooloperations_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolreplicationlinks_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                      rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolrestorepoints_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolrestorepoints_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolschemas_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                             rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolsecurityalertpolicies_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                           rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolsecurityalertpolicies_put2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                            rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolsecurityalertpolicies_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                           rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolsensitivitylabels_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                       rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolsensitivitylabels_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                       rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolsensitivitylabels_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                        rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolsensitivitylabels_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                        rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolsensitivitylabels_post2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpooltablecolumns_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                  rg_14, rg_15, rg_16, rg_17)
    step__sqlpooltables_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                            rg_14, rg_15, rg_16, rg_17)
    step__sqlpooltransparentdataencryptions_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                                rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpooltransparentdataencryptions_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                                rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolusages_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                            rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolvulnerabilityassessmentrulebaselines_(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                       rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolvulnerabilityassessmentscans_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                  rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolvulnerabilityassessmentscans_post(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                   rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolvulnerabilityassessmentscans_post2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                    rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolvulnerabilityassessments_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                              rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolvulnerabilityassessments_put2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolvulnerabilityassessments_put3(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolvulnerabilityassessments_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                              rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolvulnerabilityassessments_get2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolsensitivitylabels_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                          rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__workspaceaadadmins_put(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17)
    step__workspaceaadadmins_get(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17)
    step__workspacemanagedidentitysqlcontrolsettings_p(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                       rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__workspacemanagedidentitysqlcontrolsettings_g(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                       rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__bigdatapools_delete_delete_a_big_data_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                     rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimenodes_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17)
    step__integrationruntimes_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                     rg_13, rg_14, rg_15, rg_16, rg_17)
    step__ipfirewallrules_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17)
    step__privateendpointconnections_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                            rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolvulnerabilityassessmentrulebaselines_2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9,
                                                        rg_10, rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__privatelinkhubs_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17)
    step__sqlpoolvulnerabilityassessments_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__sqlpools_delete_delete_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                      rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    step__workspaceaadadmins_delete(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17)
    step__workspaces_delete_delete_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
    cleanup(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15, rg_16,
            rg_17)


@try_manual
class SynapseManagementClientScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitestsynapse_Default-SQL-SouthEastAsia'[:7], key='rg_5', parameter_name=''
                           'rg_5')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_ExampleResourceGroup'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_resourceGroup1'[:7], key='rg_2', parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_sqlcrudtest-6845'[:7], key='rg_3', parameter_name='rg_3')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_sqlcrudtest-6852'[:7], key='rg_4', parameter_name='rg_4')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_sqlcrudtest-4799'[:7], key='rg_6', parameter_name='rg_6')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_blobauditingtest-6852'[:7], key='rg_7', parameter_name='rg_7')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_blobauditingtest-4799'[:7], key='rg_8', parameter_name='rg_8')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_sqlcrudtest-7398'[:7], key='rg_9', parameter_name='rg_9')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_sqlcrudtest-6730'[:7], key='rg_10', parameter_name='rg_10')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_myRG'[:7], key='rg_11', parameter_name='rg_11')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_vulnerabilityaseessmenttest-4799'[:7], key='rg_12',
                           parameter_name='rg_12')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_vulnerabilityassessmenttest-4711'[:7], key='rg_13',
                           parameter_name='rg_13')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_vulnerabilityassessmenttest-4799'[:7], key='rg_14',
                           parameter_name='rg_14')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_securityalert-6852'[:7], key='rg_15', parameter_name='rg_15')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_securityalert-4799'[:7], key='rg_16', parameter_name='rg_16')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_exampleResourceGroup'[:7], key='rg_17', parameter_name='rg_17')
    def test_synapse(self, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                     rg_15, rg_16, rg_17):

        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myWorkspace5': 'testsvr',
            'myWorkspace': 'ExampleWorkspace',
            'myWorkspace2': 'workspace1',
            'myWorkspace3': 'sqlcrudtest-7177',
            'myWorkspace4': 'sqlcrudtest-2080',
            'myWorkspace6': 'sqlcrudtest-5961',
            'myWorkspace7': 'testserver',
            'myWorkspace8': 'sqlcrudtest-6440',
            'myWorkspace9': 'blobauditingtest-2080',
            'myWorkspace10': 'blobauditingtest-6440',
            'myWorkspace11': 'sqlcrudtest-4645',
            'myWorkspace12': 'sqlcrudtest-9007',
            'myWorkspace13': 'myServer',
            'myWorkspace14': 'serverName',
            'myWorkspace15': 'vulnerabilityaseessmenttest-6440',
            'myWorkspace16': 'vulnerabilityassessmenttest-6411',
            'myWorkspace17': 'vulnerabilityassessmenttest-6440',
            'myWorkspace18': 'securityalert-2080',
            'myWorkspace19': 'securityalert-6440',
            'myWorkspace20': 'exampleWorkspace',
            'myIntegrationRuntime': 'exampleIntegrationRuntime',
            'myIntegrationRuntime2': 'exampleManagedIntegrationRuntime',
            'myIntegrationRuntime3': 'testactivityv2',
            'myPrivateLinkResource': 'sql',
            'myPrivateEndpointConnection': 'ExamplePrivateEndpointConnection',
            'myPrivateLinkHub': 'privateLinkHub1',
            'myBigDataPool': 'ExamplePool',
            'mySqlPool4': 'newtestdb',
            'mySqlPool8': '3481',
            'mySqlPool': 'sqlcrudtest-9187',
            'mySqlPool2': 'ExampleSqlPool',
            'mySqlPool3': 'testdwdb',
            'mySqlPool5': 'testdb',
            'mySqlPool6': 'testdw',
            'mySqlPool7': 'testDatabase',
            'mySqlPool9': 'myDatabase',
        })

        call_scenario(self, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
        calc_coverage(__file__)
        raise_if()
