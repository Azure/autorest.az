# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_create_or_update_a_workspace
from .example_steps import step_create_or_update_a_big_data_pool
from .example_steps import step_list_big_data_pools_in_a_workspace
from .example_steps import step_update_a_big_data_pool
from .example_steps import step_create_integration_runtime
from .example_steps import step_get_integration_runtime
from .example_steps import step_list_integration_runtimes
from .example_steps import step_start_integration_runtime
from .example_steps import step_stop_integration_runtime
from .example_steps import step_upgrade_integration_runtime
from .example_steps import step_update_integration_runtime
from .example_steps import step_list_auth_keys
from .example_steps import step_regenerate_auth_key
from .example_steps import step_get_connection_info
from .example_steps import step_sync_credentials
from .example_steps import step_get_monitoring_data
from .example_steps import step_get_integration_runtime_node_ip_address
from .example_steps import step_get_integration_runtime_node
from .example_steps import step_update_integration_runtime_node
from .example_steps import step_get_integration_runtime_object_metadata
from .example_steps import step_refresh_object_metadata
from .example_steps import step_get_status
from .example_steps import step_create_an_ip_firewall_rule
from .example_steps import step_create_an_ip_firewall_rule
from .example_steps import step_list_ip_firewall_rules_in_a_workspace
from .example_steps import step_replace_all_ip_firewall_rules_in_a_workspace
from .example_steps import step_get_azure_async_operation_header_result
from .example_steps import step_get_location_header_result
from .example_steps import step_approve_private_endpoint_connection
from .example_steps import step_get_private_endpoint_connection
from .example_steps import step_list_private_endpoint
from .example_steps import step_create_or_update_a_privatelinkhub
from .example_steps import step_get_a_privatelinkhub
from .example_steps import step_list_privatelinkhubs_in_resource_group
from .example_steps import step_list_privatelinkhubs_in_subscription
from .example_steps import step_update_a_privatelinkhub
from .example_steps import step_get_a_big_data_pool
from .example_steps import step_get_a_workspace
from .example_steps import step_list_workspaces_in_resource_group
from .example_steps import step_list_workspaces_in_subscription
from .example_steps import step_update_a_workspace
from .example_steps import step_get_private_link_resources_for_workspace
from .example_steps import step_get_private_link_resources_for_workspace
from .example_steps import step_create_a_sql_analytics_pool
from .example_steps import step_get_a_sql_analytics_pool
from .example_steps import step_list_sql_analytics_pools_in_a_workspace
from .example_steps import step_list_sql_analytics
from .example_steps import step_pause_a_sql_analytics_pool
from .example_steps import step_rename_a_sql_analytics_pool
from .example_steps import step_resume_a_sql_analytics_pool
from .example_steps import step_update_a_sql_analytics_pool
from .example_steps import step_create_or_update
from .example_steps import step_create_or_update2
from .example_steps import step_get_blob_auditing
from .example_steps import step_get_a_connection
from .example_steps import step_get_a_sql_analytics_pool_user_activity
from .example_steps import step_get_sql_pool_geo_backup_policy
from .example_steps import step_set_metadata_sync
from .example_steps import step_get_metadata_sync
from .example_steps import step_get_the_result
from .example_steps import step_list_the_sql
from .example_steps import step_lists_a_sql_analytic_pool_s_replication_links
from .example_steps import step_get_a_list
from .example_steps import step_creates_sql_pool_restore_point_
from .example_steps import step_list_the_schema_in_a_sql_analytics_pool
from .example_steps import step_update_a_sql
from .example_steps import step_update_a_sql2
from .example_steps import step_get_a_security_alert_of_a_sql_analytics_pool
from .example_steps import step_updates_the_sensitivity
from .example_steps import step_gets_the_current
from .example_steps import step_gets_the_recommended
from .example_steps import step_disables_sensitivity_recommendations
from .example_steps import step_enables_sensitivity_recommendations
from .example_steps import step_list_the_columns
from .example_steps import step_list_the_tables
from .example_steps import step_create_or_update3
from .example_steps import step_get_transparent_data
from .example_steps import step_list_the_usages_of_a_sql_analytics_pool
from .example_steps import step_creates_or_updates
from .example_steps import step_get_a_vulnerability
from .example_steps import step_executes_a_sql
from .example_steps import step_export_a_database
from .example_steps import step_create_a_database
from .example_steps import step_create_a_database2
from .example_steps import step_create_a_database3
from .example_steps import step_get_a_sql_pool_s_vulnerability_assessment
from .example_steps import step_get_a_vulnerability2
from .example_steps import step_deletes_the_sensitivity
from .example_steps import step_create_or_update4
from .example_steps import step_get_workspace_active_directory_admin
from .example_steps import step_create_or_update5
from .example_steps import step_get_managed_identity_sql_control_settings
from .example_steps import step_delete_a_big_data_pool
from .example_steps import step_delete_integration_runtime_node
from .example_steps import step_delete_integration_runtime
from .example_steps import step_delete_an_ip_firewall_rule_from_a_workspace
from .example_steps import step_delete_private_endpoint_connection
from .example_steps import step_removes_a_database
from .example_steps import step_delete_a_privatelinkhub
from .example_steps import step_remove_a_database_s_vulnerability_assessment
from .example_steps import step_delete_a_sql_analytics_pool
from .example_steps import step_delete_workspace_active_directory_admin
from .example_steps import step_delete_a_workspace
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                   rg_16, rg_17):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                     rg_15, rg_16, rg_17):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                  rg_16, rg_17):
    setup_scenario(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                   rg_16, rg_17)
    step_create_or_update_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                      rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("identity.type", "SystemAssigned", case_sensitive=False),
        test.check("location", "East US", case_sensitive=False),
        test.check("defaultDataLakeStorage.accountUrl", "https://accountname.dfs.core.windows.net",
                   case_sensitive=False),
        test.check("defaultDataLakeStorage.filesystem", "default", case_sensitive=False),
        test.check("managedResourceGroupName", "workspaceManagedResourceGroupUnique", case_sensitive=False),
        test.check("managedVirtualNetwork", "default", case_sensitive=False),
        test.check("sqlAdministratorLogin", "login", case_sensitive=False),
        test.check("sqlAdministratorLoginPassword", "password", case_sensitive=False),
        test.check("tags.key", "value", case_sensitive=False),
        test.check("name", "{myWorkspace2}", case_sensitive=False),
    ])
    step_create_or_update_a_big_data_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                          rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("autoPause.delayInMinutes", 15),
        test.check("autoPause.enabled", True),
        test.check("autoScale.enabled", True),
        test.check("autoScale.maxNodeCount", 50),
        test.check("autoScale.minNodeCount", 3),
        test.check("defaultSparkLogFolder", "/logs", case_sensitive=False),
        test.check("nodeCount", 4),
        test.check("nodeSize", "Medium", case_sensitive=False),
        test.check("nodeSizeFamily", "MemoryOptimized", case_sensitive=False),
        test.check("sparkEventsFolder", "/events", case_sensitive=False),
        test.check("sparkVersion", "2.4", case_sensitive=False),
        test.check("tags.key", "value", case_sensitive=False),
        test.check("name", "{myBigDataPool}", case_sensitive=False),
    ])
    step_list_big_data_pools_in_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                            rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check('length(@)', 1),
    ])
    step_update_a_big_data_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("autoPause.delayInMinutes", 15),
        test.check("autoPause.enabled", True),
        test.check("autoScale.enabled", True),
        test.check("autoScale.maxNodeCount", 50),
        test.check("autoScale.minNodeCount", 3),
        test.check("defaultSparkLogFolder", "/logs", case_sensitive=False),
        test.check("nodeCount", 4),
        test.check("nodeSize", "Medium", case_sensitive=False),
        test.check("nodeSizeFamily", "MemoryOptimized", case_sensitive=False),
        test.check("sparkEventsFolder", "/events", case_sensitive=False),
        test.check("sparkVersion", "2.4", case_sensitive=False),
        test.check("tags.key", "value", case_sensitive=False),
        test.check("name", "{myBigDataPool}", case_sensitive=False),
    ])
    step_create_integration_runtime(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("properties.type", "SelfHosted", case_sensitive=False),
        test.check("properties.description", "A selfhosted integration runtime", case_sensitive=False),
        test.check("name", "{myIntegrationRuntime}", case_sensitive=False),
    ])
    step_get_integration_runtime(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("properties.type", "SelfHosted", case_sensitive=False),
        test.check("properties.description", "A selfhosted integration runtime", case_sensitive=False),
        test.check("name", "{myIntegrationRuntime}", case_sensitive=False),
    ])
    step_list_integration_runtimes(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check('length(@)', 1),
    ])
    step_start_integration_runtime(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_stop_integration_runtime(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                  rg_14, rg_15, rg_16, rg_17, checks=[])
    step_upgrade_integration_runtime(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                     rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_update_integration_runtime(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("name", "{myIntegrationRuntime}", case_sensitive=False),
    ])
    step_list_auth_keys(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                        rg_15, rg_16, rg_17, checks=[])
    step_regenerate_auth_key(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                             rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_connection_info(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                             rg_14, rg_15, rg_16, rg_17, checks=[])
    step_sync_credentials(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                          rg_15, rg_16, rg_17, checks=[])
    step_get_monitoring_data(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                             rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_integration_runtime_node_ip_address(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_integration_runtime_node(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                      rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_update_integration_runtime_node(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_integration_runtime_object_metadata(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_refresh_object_metadata(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_status(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                    rg_16, rg_17, checks=[])
    step_create_an_ip_firewall_rule(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_create_an_ip_firewall_rule(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_list_ip_firewall_rules_in_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                               rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_replace_all_ip_firewall_rules_in_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                      rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_azure_async_operation_header_result(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_location_header_result(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_approve_private_endpoint_connection(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                             rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_private_endpoint_connection(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_list_private_endpoint(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                               rg_14, rg_15, rg_16, rg_17, checks=[
        test.check('length(@)', 1),
    ])
    step_create_or_update_a_privatelinkhub(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                           rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("tags.key", "value", case_sensitive=False),
        test.check("name", "{myPrivateLinkHub}", case_sensitive=False),
    ])
    step_get_a_privatelinkhub(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("tags.key", "value", case_sensitive=False),
        test.check("name", "{myPrivateLinkHub}", case_sensitive=False),
    ])
    step_list_privatelinkhubs_in_resource_group(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                                rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check('length(@)', 1),
    ])
    step_list_privatelinkhubs_in_subscription(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                              rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check('length(@)', 1),
    ])
    step_update_a_privatelinkhub(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("tags.key", "value", case_sensitive=False),
        test.check("name", "{myPrivateLinkHub}", case_sensitive=False),
    ])
    step_get_a_big_data_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                             rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("autoPause.delayInMinutes", 15),
        test.check("autoPause.enabled", True),
        test.check("autoScale.enabled", True),
        test.check("autoScale.maxNodeCount", 50),
        test.check("autoScale.minNodeCount", 3),
        test.check("defaultSparkLogFolder", "/logs", case_sensitive=False),
        test.check("nodeCount", 4),
        test.check("nodeSize", "Medium", case_sensitive=False),
        test.check("nodeSizeFamily", "MemoryOptimized", case_sensitive=False),
        test.check("sparkEventsFolder", "/events", case_sensitive=False),
        test.check("sparkVersion", "2.4", case_sensitive=False),
        test.check("name", "{myBigDataPool}", case_sensitive=False),
    ])
    step_get_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                         rg_15, rg_16, rg_17, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("defaultDataLakeStorage.accountUrl", "https://accountname.dfs.core.windows.net",
                   case_sensitive=False),
        test.check("defaultDataLakeStorage.filesystem", "default", case_sensitive=False),
        test.check("sqlAdministratorLogin", "login", case_sensitive=False),
        test.check("sqlAdministratorLoginPassword", "password", case_sensitive=False),
        test.check("tags.key", "value", case_sensitive=False),
        test.check("name", "{myWorkspace2}", case_sensitive=False),
    ])
    step_list_workspaces_in_resource_group(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                           rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check('length(@)', 1),
    ])
    step_list_workspaces_in_subscription(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check('length(@)', 1),
    ])
    step_update_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                            rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("defaultDataLakeStorage.accountUrl", "https://accountname.dfs.core.windows.net",
                   case_sensitive=False),
        test.check("defaultDataLakeStorage.filesystem", "default", case_sensitive=False),
        test.check("sqlAdministratorLogin", "login", case_sensitive=False),
        test.check("sqlAdministratorLoginPassword", "password", case_sensitive=False),
        test.check("tags.key", "value", case_sensitive=False),
        test.check("name", "{myWorkspace2}", case_sensitive=False),
    ])
    step_get_private_link_resources_for_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                  rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_private_link_resources_for_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                  rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_create_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                     rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("collation", "", case_sensitive=False),
        test.check("createMode", "", case_sensitive=False),
        test.check("creationDate", "1970-01-01T00:00:00.000Z", case_sensitive=False),
        test.check("maxSizeBytes", 0),
        test.check("recoverableDatabaseId", "", case_sensitive=False),
        test.check("restorePointInTime", "1970-01-01T00:00:00.000Z", case_sensitive=False),
        test.check("sourceDatabaseId", "", case_sensitive=False),
        test.check("sku.name", "", case_sensitive=False),
        test.check("sku.tier", "", case_sensitive=False),
        test.check("name", "{mySqlPool2}", case_sensitive=False),
    ])
    step_get_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                  rg_14, rg_15, rg_16, rg_17, checks=[])
    step_list_sql_analytics_pools_in_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_list_sql_analytics(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                            rg_14, rg_15, rg_16, rg_17, checks=[])
    step_pause_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_rename_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                     rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_resume_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                     rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_update_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                     rg_13, rg_14, rg_15, rg_16, rg_17, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("collation", "", case_sensitive=False),
        test.check("createMode", "", case_sensitive=False),
        test.check("creationDate", "1970-01-01T00:00:00.000Z", case_sensitive=False),
        test.check("maxSizeBytes", 0),
        test.check("recoverableDatabaseId", "", case_sensitive=False),
        test.check("restorePointInTime", "1970-01-01T00:00:00.000Z", case_sensitive=False),
        test.check("sourceDatabaseId", "", case_sensitive=False),
        test.check("sku.name", "", case_sensitive=False),
        test.check("sku.tier", "", case_sensitive=False),
        test.check("name", "{mySqlPool2}", case_sensitive=False),
    ])
    step_create_or_update(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                          rg_15, rg_16, rg_17, checks=[])
    step_create_or_update2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17, checks=[])
    step_get_blob_auditing(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17, checks=[])
    step_get_a_connection(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                          rg_15, rg_16, rg_17, checks=[])
    step_get_a_sql_analytics_pool_user_activity(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                                rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_sql_pool_geo_backup_policy(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                        rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_set_metadata_sync(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17, checks=[])
    step_get_metadata_sync(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17, checks=[])
    step_get_the_result(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                        rg_15, rg_16, rg_17, checks=[])
    step_list_the_sql(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                      rg_15, rg_16, rg_17, checks=[])
    step_lists_a_sql_analytic_pool_s_replication_links(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                       rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_a_list(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                    rg_16, rg_17, checks=[])
    step_creates_sql_pool_restore_point_(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_list_the_schema_in_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_update_a_sql(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                      rg_15, rg_16, rg_17, checks=[])
    step_update_a_sql2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                       rg_15, rg_16, rg_17, checks=[])
    step_get_a_security_alert_of_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                      rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_updates_the_sensitivity(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17, checks=[])
    step_gets_the_current(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                          rg_15, rg_16, rg_17, checks=[])
    step_gets_the_recommended(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, rg_16, rg_17, checks=[])
    step_disables_sensitivity_recommendations(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                              rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_enables_sensitivity_recommendations(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                             rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_list_the_columns(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                          rg_15, rg_16, rg_17, checks=[])
    step_list_the_tables(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                         rg_15, rg_16, rg_17, checks=[])
    step_create_or_update3(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17, checks=[])
    step_get_transparent_data(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, rg_16, rg_17, checks=[])
    step_list_the_usages_of_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_creates_or_updates(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                            rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_a_vulnerability(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                             rg_14, rg_15, rg_16, rg_17, checks=[])
    step_executes_a_sql(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                        rg_15, rg_16, rg_17, checks=[])
    step_export_a_database(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17, checks=[])
    step_create_a_database(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17, checks=[])
    step_create_a_database2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                            rg_14, rg_15, rg_16, rg_17, checks=[])
    step_create_a_database3(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                            rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_a_sql_pool_s_vulnerability_assessment(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                   rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_get_a_vulnerability2(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, rg_16, rg_17, checks=[])
    step_deletes_the_sensitivity(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17, checks=[])
    step_create_or_update4(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17, checks=[])
    step_get_workspace_active_directory_admin(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                              rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_create_or_update5(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                           rg_15, rg_16, rg_17, checks=[])
    step_get_managed_identity_sql_control_settings(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                   rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_delete_a_big_data_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                rg_14, rg_15, rg_16, rg_17, checks=[])
    step_delete_integration_runtime_node(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                         rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_delete_integration_runtime(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                    rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_delete_an_ip_firewall_rule_from_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                     rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_delete_private_endpoint_connection(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11,
                                            rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_removes_a_database(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                            rg_14, rg_15, rg_16, rg_17, checks=[])
    step_delete_a_privatelinkhub(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                                 rg_14, rg_15, rg_16, rg_17, checks=[])
    step_remove_a_database_s_vulnerability_assessment(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                      rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_delete_a_sql_analytics_pool(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12,
                                     rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_delete_workspace_active_directory_admin(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10,
                                                 rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17, checks=[])
    step_delete_a_workspace(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13,
                            rg_14, rg_15, rg_16, rg_17, checks=[])
    cleanup_scenario(test, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                     rg_15, rg_16, rg_17)


# Test class for ${scenarioName}
@try_manual
class SynapseScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitestsynapse_Default-SQL-SouthEastAsia'[:7], key='rg_5', parameter_name=''
                           'rg_5')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_ExampleResourceGroup'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_resourceGroup1'[:7], key='rg_2', parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_sqlcrudtest-6845'[:7], key='rg_3', parameter_name='rg_3')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_sqlcrudtest-6852'[:7], key='rg_4', parameter_name='rg_4')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_sqlcrudtest-4799'[:7], key='rg_6', parameter_name='rg_6')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_blobauditingtest-6852'[:7], key='rg_7', parameter_name='rg_7')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_blobauditingtest-4799'[:7], key='rg_8', parameter_name='rg_8')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_sqlcrudtest-7398'[:7], key='rg_9', parameter_name='rg_9')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_sqlcrudtest-6730'[:7], key='rg_10', parameter_name='rg_10')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_myRG'[:7], key='rg_11', parameter_name='rg_11')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_vulnerabilityaseessmenttest-4799'[:7], key='rg_12',
                           parameter_name='rg_12')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_vulnerabilityassessmenttest-4711'[:7], key='rg_13',
                           parameter_name='rg_13')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_vulnerabilityassessmenttest-4799'[:7], key='rg_14',
                           parameter_name='rg_14')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_securityalert-6852'[:7], key='rg_15', parameter_name='rg_15')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_securityalert-4799'[:7], key='rg_16', parameter_name='rg_16')
    @ResourceGroupPreparer(name_prefix='clitestsynapse_exampleResourceGroup'[:7], key='rg_17', parameter_name='rg_17')
    def test_synapse(self, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14,
                     rg_15, rg_16, rg_17):

        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myWorkspace5': 'testsvr',
            'myWorkspace': 'ExampleWorkspace',
            'myWorkspace2': 'workspace1',
            'myWorkspace3': 'sqlcrudtest-7177',
            'myWorkspace4': 'sqlcrudtest-2080',
            'myWorkspace6': 'sqlcrudtest-5961',
            'myWorkspace7': 'testserver',
            'myWorkspace8': 'sqlcrudtest-6440',
            'myWorkspace9': 'blobauditingtest-2080',
            'myWorkspace10': 'blobauditingtest-6440',
            'myWorkspace11': 'sqlcrudtest-4645',
            'myWorkspace12': 'sqlcrudtest-9007',
            'myWorkspace13': 'myServer',
            'myWorkspace14': 'serverName',
            'myWorkspace15': 'vulnerabilityaseessmenttest-6440',
            'myWorkspace16': 'vulnerabilityassessmenttest-6411',
            'myWorkspace17': 'vulnerabilityassessmenttest-6440',
            'myWorkspace18': 'securityalert-2080',
            'myWorkspace19': 'securityalert-6440',
            'myWorkspace20': 'exampleWorkspace',
            'myIntegrationRuntime': 'exampleIntegrationRuntime',
            'myIntegrationRuntime2': 'exampleManagedIntegrationRuntime',
            'myIntegrationRuntime3': 'testactivityv2',
            'myPrivateLinkResource': 'sql',
            'myPrivateEndpointConnection': 'ExamplePrivateEndpointConnection',
            'myPrivateLinkHub': 'privateLinkHub1',
            'myBigDataPool': 'ExamplePool',
            'mySqlPool4': 'newtestdb',
            'mySqlPool8': '3481',
            'mySqlPool': 'sqlcrudtest-9187',
            'mySqlPool2': 'ExampleSqlPool',
            'mySqlPool3': 'testdwdb',
            'mySqlPool5': 'testdb',
            'mySqlPool6': 'testdw',
            'mySqlPool7': 'testDatabase',
            'mySqlPool9': 'myDatabase',
        })

        call_scenario(self, rg_5, rg, rg_2, rg_3, rg_4, rg_6, rg_7, rg_8, rg_9, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15, rg_16, rg_17)
        calc_coverage(__file__)
        raise_if()

