# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_testserver.generated._client_factory import cf_array
    testserver_array = CliCommandType(
        operations_tmpl='azext_testserver.vendored_sdks.testserver.operations._array_operations#ArrayOperations.{}',
        client_factory=cf_array)
    with self.command_group('testserver array', testserver_array, client_factory=cf_array, is_experimental=True) as g:
        g.custom_command('get-array-empty', 'testserver_array_get_array_empty')
        g.custom_command('get-array-item-empty', 'testserver_array_get_array_item_empty')
        g.custom_command('get-array-item-null', 'testserver_array_get_array_item_null')
        g.custom_command('get-array-null', 'testserver_array_get_array_null')
        g.custom_command('get-array-valid', 'testserver_array_get_array_valid')
        g.custom_command('get-base64-url', 'testserver_array_get_base64_url')
        g.custom_command('get-boolean-invalid-null', 'testserver_array_get_boolean_invalid_null')
        g.custom_command('get-boolean-invalid-string', 'testserver_array_get_boolean_invalid_string')
        g.custom_command('get-boolean-tfft', 'testserver_array_get_boolean_tfft')
        g.custom_command('get-byte-invalid-null', 'testserver_array_get_byte_invalid_null')
        g.custom_command('get-byte-valid', 'testserver_array_get_byte_valid')
        g.custom_command('get-complex-empty', 'testserver_array_get_complex_empty')
        g.custom_command('get-complex-item-empty', 'testserver_array_get_complex_item_empty')
        g.custom_command('get-complex-item-null', 'testserver_array_get_complex_item_null')
        g.custom_command('get-complex-null', 'testserver_array_get_complex_null')
        g.custom_command('get-complex-valid', 'testserver_array_get_complex_valid')
        g.custom_command('get-date-invalid-char', 'testserver_array_get_date_invalid_char')
        g.custom_command('get-date-invalid-null', 'testserver_array_get_date_invalid_null')
        g.custom_command('get-date-time-invalid-char', 'testserver_array_get_date_time_invalid_char')
        g.custom_command('get-date-time-invalid-null', 'testserver_array_get_date_time_invalid_null')
        g.custom_command('get-date-time-rfc1123-valid', 'testserver_array_get_date_time_rfc1123_valid')
        g.custom_command('get-date-time-valid', 'testserver_array_get_date_time_valid')
        g.custom_command('get-date-valid', 'testserver_array_get_date_valid')
        g.custom_command('get-dictionary-empty', 'testserver_array_get_dictionary_empty')
        g.custom_command('get-dictionary-item-empty', 'testserver_array_get_dictionary_item_empty')
        g.custom_command('get-dictionary-item-null', 'testserver_array_get_dictionary_item_null')
        g.custom_command('get-dictionary-null', 'testserver_array_get_dictionary_null')
        g.custom_command('get-dictionary-valid', 'testserver_array_get_dictionary_valid')
        g.custom_command('get-double-invalid-null', 'testserver_array_get_double_invalid_null')
        g.custom_command('get-double-invalid-string', 'testserver_array_get_double_invalid_string')
        g.custom_command('get-double-valid', 'testserver_array_get_double_valid')
        g.custom_command('get-duration-valid', 'testserver_array_get_duration_valid')
        g.custom_command('get-empty', 'testserver_array_get_empty')
        g.custom_command('get-enum-valid', 'testserver_array_get_enum_valid')
        g.custom_command('get-float-invalid-null', 'testserver_array_get_float_invalid_null')
        g.custom_command('get-float-invalid-string', 'testserver_array_get_float_invalid_string')
        g.custom_command('get-float-valid', 'testserver_array_get_float_valid')
        g.custom_command('get-int-invalid-null', 'testserver_array_get_int_invalid_null')
        g.custom_command('get-int-invalid-string', 'testserver_array_get_int_invalid_string')
        g.custom_command('get-integer-valid', 'testserver_array_get_integer_valid')
        g.custom_command('get-invalid', 'testserver_array_get_invalid')
        g.custom_command('get-long-invalid-null', 'testserver_array_get_long_invalid_null')
        g.custom_command('get-long-invalid-string', 'testserver_array_get_long_invalid_string')
        g.custom_command('get-long-valid', 'testserver_array_get_long_valid')
        g.custom_command('get-null', 'testserver_array_get_null')
        g.custom_command('get-string-enum-valid', 'testserver_array_get_string_enum_valid')
        g.custom_command('get-string-valid', 'testserver_array_get_string_valid')
        g.custom_command('get-string-with-invalid', 'testserver_array_get_string_with_invalid')
        g.custom_command('get-string-with-null', 'testserver_array_get_string_with_null')
        g.custom_command('get-uuid-invalid-char', 'testserver_array_get_uuid_invalid_char')
        g.custom_command('get-uuid-valid', 'testserver_array_get_uuid_valid')
        g.custom_command('put-array-valid', 'testserver_array_put_array_valid')
        g.custom_command('put-boolean-tfft', 'testserver_array_put_boolean_tfft')
        g.custom_command('put-byte-valid', 'testserver_array_put_byte_valid')
        g.custom_command('put-complex-valid', 'testserver_array_put_complex_valid')
        g.custom_command('put-date-time-rfc1123-valid', 'testserver_array_put_date_time_rfc1123_valid')
        g.custom_command('put-date-time-valid', 'testserver_array_put_date_time_valid')
        g.custom_command('put-date-valid', 'testserver_array_put_date_valid')
        g.custom_command('put-dictionary-valid', 'testserver_array_put_dictionary_valid')
        g.custom_command('put-double-valid', 'testserver_array_put_double_valid')
        g.custom_command('put-duration-valid', 'testserver_array_put_duration_valid')
        g.custom_command('put-empty', 'testserver_array_put_empty')
        g.custom_command('put-enum-valid', 'testserver_array_put_enum_valid')
        g.custom_command('put-float-valid', 'testserver_array_put_float_valid')
        g.custom_command('put-integer-valid', 'testserver_array_put_integer_valid')
        g.custom_command('put-long-valid', 'testserver_array_put_long_valid')
        g.custom_command('put-string-enum-valid', 'testserver_array_put_string_enum_valid')
        g.custom_command('put-string-valid', 'testserver_array_put_string_valid')
        g.custom_command('put-uuid-valid', 'testserver_array_put_uuid_valid')

    from azext_testserver.generated._client_factory import cf_bool
    testserver_bool = CliCommandType(
        operations_tmpl='azext_testserver.vendored_sdks.testserver.operations._bool_operations#BoolOperations.{}',
        client_factory=cf_bool)
    with self.command_group('testserver bool', testserver_bool, client_factory=cf_bool, is_experimental=True) as g:
        g.custom_command('get-false', 'testserver_bool_get_false')
        g.custom_command('get-invalid', 'testserver_bool_get_invalid')
        g.custom_command('get-null', 'testserver_bool_get_null')
        g.custom_command('get-true', 'testserver_bool_get_true')
        g.custom_command('put-false', 'testserver_bool_put_false')
        g.custom_command('put-true', 'testserver_bool_put_true')
