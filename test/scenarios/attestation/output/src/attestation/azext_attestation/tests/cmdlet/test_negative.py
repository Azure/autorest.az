# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long

from azure.cli.testsdk import ScenarioTest
from azure.core.exceptions import ResourceNotFoundError


# Test class for Scenario
class NegativeTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(NegativeTest, self).__init__(*args, **kwargs)

    def test_create_provider(self):
        # From /Operation/put/AttestationProviders_Create
        try:
            self.cmd('az attestation create-provider '
                     '--provider-name "myattestationprovider" '
                     '--resource-group "MyResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

        # From /Operation/put/AttestationProviders_Create_MaximumSet_Gen
        try:
            self.cmd('az attestation create-provider '
                     '--provider-name "myattestationprovider" '
                     '--resource-group "MyResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

        # From /Operation/put/AttestationProviders_Create_MinimumSet_Gen
        try:
            self.cmd('az attestation create-provider '
                     '--resource-group "MyResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_list_operation(self):
        # From /Operation/get/Operations_List
        try:
            self.cmd('az attestation list-operation')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_attestation_provider_provider_list(self):
        # From /AttestationProviders/get/AttestationProviders_ListByResourceGroup
        try:
            self.cmd('az attestation attestation-provider provider list '
                     '--resource-group "testrg1"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_attestation_provider_provider_list2(self):
        # From /AttestationProviders/get/AttestationProviders_List
        try:
            self.cmd('az attestation attestation-provider provider list')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_attestation_provider_show(self):
        # From /AttestationProviders/get/AttestationProviders_Get
        try:
            self.cmd('az attestation attestation-provider show '
                     '--provider-name "myattestationprovider" '
                     '--resource-group "MyResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_attestation_provider_update(self):
        # From /AttestationProviders/patch/AttestationProviders_Update
        try:
            self.cmd('az attestation attestation-provider update '
                     '--provider-name "myattestationprovider" '
                     '--resource-group "MyResourceGroup" '
                     '--tags Property1="Value1" Property2="Value2" Property3="Value3"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_attestation_provider_delete(self):
        # From /AttestationProviders/delete/AttestationProviders_Delete
        try:
            self.cmd('az attestation attestation-provider delete '
                     '--provider-name "myattestationprovider" '
                     '--resource-group "sample-resource-group"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")
