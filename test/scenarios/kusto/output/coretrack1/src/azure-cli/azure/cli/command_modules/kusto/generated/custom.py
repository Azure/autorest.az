# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from knack.util import CLIError
from azure.cli.core.util import sdk_no_wait


def kusto_cluster_list(client,
                       resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def kusto_cluster_show(client,
                       resource_group_name,
                       cluster_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name)


def kusto_cluster_create(client,
                         resource_group_name,
                         cluster_name,
                         location,
                         sku,
                         tags=None,
                         zones=None,
                         trusted_external_tenants=None,
                         optimized_autoscale=None,
                         enable_disk_encryption=None,
                         enable_streaming_ingest=None,
                         virtual_network_configuration=None,
                         key_vault_properties=None,
                         enable_purge=None,
                         enable_double_encryption=None,
                         type_=None,
                         user_assigned_identities=None,
                         no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    parameters['location'] = location
    parameters['sku'] = sku
    if zones is not None:
        parameters['zones'] = zones
    if trusted_external_tenants is not None:
        parameters['trusted_external_tenants'] = trusted_external_tenants
    if optimized_autoscale is not None:
        parameters['optimized_autoscale'] = optimized_autoscale
    if enable_disk_encryption is not None:
        parameters['enable_disk_encryption'] = enable_disk_encryption
    if enable_streaming_ingest is not None:
        parameters['enable_streaming_ingest'] = enable_streaming_ingest
    else:
        parameters['enable_streaming_ingest'] = False
    if virtual_network_configuration is not None:
        parameters['virtual_network_configuration'] = virtual_network_configuration
    if key_vault_properties is not None:
        parameters['key_vault_properties'] = key_vault_properties
    if enable_purge is not None:
        parameters['enable_purge'] = enable_purge
    else:
        parameters['enable_purge'] = False
    if enable_double_encryption is not None:
        parameters['enable_double_encryption'] = enable_double_encryption
    else:
        parameters['enable_double_encryption'] = False
    parameters['identity'] = {}
    if type_ is not None:
        parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(parameters['identity']) == 0:
        del parameters['identity']
    return sdk_no_wait(no_wait,
                       client.create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       parameters=parameters)


def kusto_cluster_update(client,
                         resource_group_name,
                         cluster_name,
                         tags=None,
                         location=None,
                         sku=None,
                         trusted_external_tenants=None,
                         optimized_autoscale=None,
                         enable_disk_encryption=None,
                         enable_streaming_ingest=None,
                         virtual_network_configuration=None,
                         key_vault_properties=None,
                         enable_purge=None,
                         enable_double_encryption=None,
                         type_=None,
                         user_assigned_identities=None,
                         no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    if location is not None:
        parameters['location'] = location
    if sku is not None:
        parameters['sku'] = sku
    if trusted_external_tenants is not None:
        parameters['trusted_external_tenants'] = trusted_external_tenants
    if optimized_autoscale is not None:
        parameters['optimized_autoscale'] = optimized_autoscale
    if enable_disk_encryption is not None:
        parameters['enable_disk_encryption'] = enable_disk_encryption
    if enable_streaming_ingest is not None:
        parameters['enable_streaming_ingest'] = enable_streaming_ingest
    else:
        parameters['enable_streaming_ingest'] = False
    if virtual_network_configuration is not None:
        parameters['virtual_network_configuration'] = virtual_network_configuration
    if key_vault_properties is not None:
        parameters['key_vault_properties'] = key_vault_properties
    if enable_purge is not None:
        parameters['enable_purge'] = enable_purge
    else:
        parameters['enable_purge'] = False
    if enable_double_encryption is not None:
        parameters['enable_double_encryption'] = enable_double_encryption
    else:
        parameters['enable_double_encryption'] = False
    parameters['identity'] = {}
    if type_ is not None:
        parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(parameters['identity']) == 0:
        del parameters['identity']
    return sdk_no_wait(no_wait,
                       client.update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       parameters=parameters)


def kusto_cluster_delete(client,
                         resource_group_name,
                         cluster_name,
                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def kusto_cluster_add_language_extension(client,
                                         resource_group_name,
                                         cluster_name,
                                         value=None,
                                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.add_language_extensions,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       value=value)


def kusto_cluster_detach_follower_database(client,
                                           resource_group_name,
                                           cluster_name,
                                           cluster_resource_id,
                                           attached_database_configuration_name,
                                           no_wait=False):
    return sdk_no_wait(no_wait,
                       client.detach_follower_databases,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       cluster_resource_id=cluster_resource_id,
                       attached_database_configuration_name=attached_database_configuration_name)


def kusto_cluster_diagnose_virtual_network(client,
                                           resource_group_name,
                                           cluster_name,
                                           no_wait=False):
    return sdk_no_wait(no_wait,
                       client.diagnose_virtual_network,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def kusto_cluster_list_follower_database(client,
                                         resource_group_name,
                                         cluster_name):
    return client.list_follower_databases(resource_group_name=resource_group_name,
                                          cluster_name=cluster_name)


def kusto_cluster_list_language_extension(client,
                                          resource_group_name,
                                          cluster_name):
    return client.list_language_extensions(resource_group_name=resource_group_name,
                                           cluster_name=cluster_name)


def kusto_cluster_list_sku(client,
                           resource_group_name=None,
                           cluster_name=None):
    if resource_group_name and cluster_name is not None:
        return client.list_skus_by_resource(resource_group_name=resource_group_name,
                                            cluster_name=cluster_name)
    return client.list_skus()


def kusto_cluster_remove_language_extension(client,
                                            resource_group_name,
                                            cluster_name,
                                            value=None,
                                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.remove_language_extensions,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       value=value)


def kusto_cluster_start(client,
                        resource_group_name,
                        cluster_name,
                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.start,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def kusto_cluster_stop(client,
                       resource_group_name,
                       cluster_name,
                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.stop,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def kusto_cluster_principal_assignment_list(client,
                                            resource_group_name,
                                            cluster_name):
    return client.list(resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def kusto_cluster_principal_assignment_show(client,
                                            resource_group_name,
                                            cluster_name,
                                            principal_assignment_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      principal_assignment_name=principal_assignment_name)


def kusto_cluster_principal_assignment_create(client,
                                              resource_group_name,
                                              cluster_name,
                                              principal_assignment_name,
                                              principal_id=None,
                                              role=None,
                                              tenant_id=None,
                                              principal_type=None,
                                              no_wait=False):
    parameters = {}
    if principal_id is not None:
        parameters['principal_id'] = principal_id
    if role is not None:
        parameters['role'] = role
    if tenant_id is not None:
        parameters['tenant_id'] = tenant_id
    if principal_type is not None:
        parameters['principal_type'] = principal_type
    return sdk_no_wait(no_wait,
                       client.create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       principal_assignment_name=principal_assignment_name,
                       parameters=parameters)


def kusto_cluster_principal_assignment_update(instance,
                                              resource_group_name,
                                              cluster_name,
                                              principal_assignment_name,
                                              principal_id=None,
                                              role=None,
                                              tenant_id=None,
                                              principal_type=None,
                                              no_wait=False):
    if principal_id is not None:
        instance.principal_id = principal_id
    if role is not None:
        instance.role = role
    if tenant_id is not None:
        instance.tenant_id = tenant_id
    if principal_type is not None:
        instance.principal_type = principal_type
    return instance


def kusto_cluster_principal_assignment_delete(client,
                                              resource_group_name,
                                              cluster_name,
                                              principal_assignment_name,
                                              no_wait=False):
    return sdk_no_wait(no_wait,
                       client.delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       principal_assignment_name=principal_assignment_name)


def kusto_database_list(client,
                        resource_group_name,
                        cluster_name):
    return client.list_by_cluster(resource_group_name=resource_group_name,
                                  cluster_name=cluster_name)


def kusto_database_show(client,
                        resource_group_name,
                        cluster_name,
                        database_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      database_name=database_name)


def kusto_database_create(client,
                          resource_group_name,
                          cluster_name,
                          database_name,
                          read_write_database=None,
                          read_only_following_database=None,
                          no_wait=False):
    all_parameters = []
    if read_write_database is not None:
        all_parameters.append(read_write_database)
    if read_only_following_database is not None:
        all_parameters.append(read_only_following_database)
    if len(all_parameters) > 1:
        raise CLIError('at most one of  read_write_database, read_only_following_database is needed for parameters!')
    if len(all_parameters) != 1:
        raise CLIError('parameters is required. but none of read_write_database, read_only_following_database is '
                       'provided!')
    parameters = all_parameters[0] if len(all_parameters) == 1 else None
    return sdk_no_wait(no_wait,
                       client.create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       parameters=parameters)


def kusto_database_update(client,
                          resource_group_name,
                          cluster_name,
                          database_name,
                          read_write_database=None,
                          read_only_following_database=None,
                          no_wait=False):
    all_parameters = []
    if read_write_database is not None:
        all_parameters.append(read_write_database)
    if read_only_following_database is not None:
        all_parameters.append(read_only_following_database)
    if len(all_parameters) > 1:
        raise CLIError('at most one of  read_write_database, read_only_following_database is needed for parameters!')
    if len(all_parameters) != 1:
        raise CLIError('parameters is required. but none of read_write_database, read_only_following_database is '
                       'provided!')
    parameters = all_parameters[0] if len(all_parameters) == 1 else None
    return sdk_no_wait(no_wait,
                       client.update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       parameters=parameters)


def kusto_database_delete(client,
                          resource_group_name,
                          cluster_name,
                          database_name,
                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name)


def kusto_database_add_principal(client,
                                 resource_group_name,
                                 cluster_name,
                                 database_name,
                                 value=None):
    return client.add_principals(resource_group_name=resource_group_name,
                                 cluster_name=cluster_name,
                                 database_name=database_name,
                                 value=value)


def kusto_database_list_principal(client,
                                  resource_group_name,
                                  cluster_name,
                                  database_name):
    return client.list_principals(resource_group_name=resource_group_name,
                                  cluster_name=cluster_name,
                                  database_name=database_name)


def kusto_database_remove_principal(client,
                                    resource_group_name,
                                    cluster_name,
                                    database_name,
                                    value=None):
    return client.remove_principals(resource_group_name=resource_group_name,
                                    cluster_name=cluster_name,
                                    database_name=database_name,
                                    value=value)


def kusto_database_principal_assignment_list(client,
                                             resource_group_name,
                                             cluster_name,
                                             database_name):
    return client.list(resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name)


def kusto_database_principal_assignment_show(client,
                                             resource_group_name,
                                             cluster_name,
                                             database_name,
                                             principal_assignment_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      database_name=database_name,
                      principal_assignment_name=principal_assignment_name)


def kusto_database_principal_assignment_create(client,
                                               resource_group_name,
                                               cluster_name,
                                               database_name,
                                               principal_assignment_name,
                                               principal_id=None,
                                               role=None,
                                               tenant_id=None,
                                               principal_type=None,
                                               no_wait=False):
    parameters = {}
    if principal_id is not None:
        parameters['principal_id'] = principal_id
    if role is not None:
        parameters['role'] = role
    if tenant_id is not None:
        parameters['tenant_id'] = tenant_id
    if principal_type is not None:
        parameters['principal_type'] = principal_type
    return sdk_no_wait(no_wait,
                       client.create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       principal_assignment_name=principal_assignment_name,
                       parameters=parameters)


def kusto_database_principal_assignment_update(instance,
                                               resource_group_name,
                                               cluster_name,
                                               database_name,
                                               principal_assignment_name,
                                               principal_id=None,
                                               role=None,
                                               tenant_id=None,
                                               principal_type=None,
                                               no_wait=False):
    if principal_id is not None:
        instance.principal_id = principal_id
    if role is not None:
        instance.role = role
    if tenant_id is not None:
        instance.tenant_id = tenant_id
    if principal_type is not None:
        instance.principal_type = principal_type
    return instance


def kusto_database_principal_assignment_delete(client,
                                               resource_group_name,
                                               cluster_name,
                                               database_name,
                                               principal_assignment_name,
                                               no_wait=False):
    return sdk_no_wait(no_wait,
                       client.delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       principal_assignment_name=principal_assignment_name)


def kusto_attached_database_configuration_list(client,
                                               resource_group_name,
                                               cluster_name):
    return client.list_by_cluster(resource_group_name=resource_group_name,
                                  cluster_name=cluster_name)


def kusto_attached_database_configuration_show(client,
                                               resource_group_name,
                                               cluster_name,
                                               attached_database_configuration_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      attached_database_configuration_name=attached_database_configuration_name)


def kusto_attached_database_configuration_create(client,
                                                 resource_group_name,
                                                 cluster_name,
                                                 attached_database_configuration_name,
                                                 location=None,
                                                 database_name=None,
                                                 cluster_resource_id=None,
                                                 default_principals_modification_kind=None,
                                                 no_wait=False):
    parameters = {}
    if location is not None:
        parameters['location'] = location
    if database_name is not None:
        parameters['database_name'] = database_name
    if cluster_resource_id is not None:
        parameters['cluster_resource_id'] = cluster_resource_id
    if default_principals_modification_kind is not None:
        parameters['default_principals_modification_kind'] = default_principals_modification_kind
    return sdk_no_wait(no_wait,
                       client.create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       attached_database_configuration_name=attached_database_configuration_name,
                       parameters=parameters)


def kusto_attached_database_configuration_update(instance,
                                                 resource_group_name,
                                                 cluster_name,
                                                 attached_database_configuration_name,
                                                 location=None,
                                                 database_name=None,
                                                 cluster_resource_id=None,
                                                 default_principals_modification_kind=None,
                                                 no_wait=False):
    if location is not None:
        instance.location = location
    if database_name is not None:
        instance.database_name = database_name
    if cluster_resource_id is not None:
        instance.cluster_resource_id = cluster_resource_id
    if default_principals_modification_kind is not None:
        instance.default_principals_modification_kind = default_principals_modification_kind
    return instance


def kusto_attached_database_configuration_delete(client,
                                                 resource_group_name,
                                                 cluster_name,
                                                 attached_database_configuration_name,
                                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       attached_database_configuration_name=attached_database_configuration_name)


def kusto_data_connection_list(client,
                               resource_group_name,
                               cluster_name,
                               database_name):
    return client.list_by_database(resource_group_name=resource_group_name,
                                   cluster_name=cluster_name,
                                   database_name=database_name)


def kusto_data_connection_show(client,
                               resource_group_name,
                               cluster_name,
                               database_name,
                               data_connection_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      database_name=database_name,
                      data_connection_name=data_connection_name)


def kusto_data_connection_create(client,
                                 resource_group_name,
                                 cluster_name,
                                 database_name,
                                 data_connection_name,
                                 event_hub_data_connection=None,
                                 iot_hub_data_connection=None,
                                 event_grid_data_connection=None,
                                 no_wait=False):
    all_parameters = []
    if event_hub_data_connection is not None:
        all_parameters.append(event_hub_data_connection)
    if iot_hub_data_connection is not None:
        all_parameters.append(iot_hub_data_connection)
    if event_grid_data_connection is not None:
        all_parameters.append(event_grid_data_connection)
    if len(all_parameters) > 1:
        raise CLIError('at most one of  event_hub_data_connection, iot_hub_data_connection, event_grid_data_connection '
                       'is needed for parameters!')
    if len(all_parameters) != 1:
        raise CLIError('parameters is required. but none of event_hub_data_connection, iot_hub_data_connection, '
                       'event_grid_data_connection is provided!')
    parameters = all_parameters[0] if len(all_parameters) == 1 else None
    return sdk_no_wait(no_wait,
                       client.create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       data_connection_name=data_connection_name,
                       parameters=parameters)


def kusto_data_connection_update(client,
                                 resource_group_name,
                                 cluster_name,
                                 database_name,
                                 data_connection_name,
                                 event_hub_data_connection=None,
                                 iot_hub_data_connection=None,
                                 event_grid_data_connection=None,
                                 no_wait=False):
    all_parameters = []
    if event_hub_data_connection is not None:
        all_parameters.append(event_hub_data_connection)
    if iot_hub_data_connection is not None:
        all_parameters.append(iot_hub_data_connection)
    if event_grid_data_connection is not None:
        all_parameters.append(event_grid_data_connection)
    if len(all_parameters) > 1:
        raise CLIError('at most one of  event_hub_data_connection, iot_hub_data_connection, event_grid_data_connection '
                       'is needed for parameters!')
    if len(all_parameters) != 1:
        raise CLIError('parameters is required. but none of event_hub_data_connection, iot_hub_data_connection, '
                       'event_grid_data_connection is provided!')
    parameters = all_parameters[0] if len(all_parameters) == 1 else None
    return sdk_no_wait(no_wait,
                       client.update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       data_connection_name=data_connection_name,
                       parameters=parameters)


def kusto_data_connection_delete(client,
                                 resource_group_name,
                                 cluster_name,
                                 database_name,
                                 data_connection_name,
                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       data_connection_name=data_connection_name)


def kusto_data_connection_data_connection_validation(client,
                                                     resource_group_name,
                                                     cluster_name,
                                                     database_name,
                                                     data_connection_name=None,
                                                     event_hub_data_connection=None,
                                                     iot_hub_data_connection=None,
                                                     event_grid_data_connection=None,
                                                     no_wait=False):
    all_properties = []
    if event_hub_data_connection is not None:
        all_properties.append(event_hub_data_connection)
    if iot_hub_data_connection is not None:
        all_properties.append(iot_hub_data_connection)
    if event_grid_data_connection is not None:
        all_properties.append(event_grid_data_connection)
    if len(all_properties) > 1:
        raise CLIError('at most one of  event_hub_data_connection, iot_hub_data_connection, event_grid_data_connection '
                       'is needed for properties!')
    properties = all_properties[0] if len(all_properties) == 1 else None
    return sdk_no_wait(no_wait,
                       client.data_connection_validation,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       data_connection_name=data_connection_name,
                       properties=properties)
