# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import ManagedNetworkManagementClientConfiguration
from .operations import ManagedNetworksOperations
from .operations import ScopeAssignmentsOperations
from .operations import ManagedNetworkGroupsOperations
from .operations import ManagedNetworkPeeringPoliciesOperations
from .operations import Operations
from .. import models


class ManagedNetworkManagementClient(object):
    """The Microsoft Azure Managed Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to programmatically view, control, change, and monitor your entire Azure network centrally and with ease.

    :ivar managed_networks: ManagedNetworksOperations operations
    :vartype managed_networks: managed_network_management_client.aio.operations.ManagedNetworksOperations
    :ivar scope_assignments: ScopeAssignmentsOperations operations
    :vartype scope_assignments: managed_network_management_client.aio.operations.ScopeAssignmentsOperations
    :ivar managed_network_groups: ManagedNetworkGroupsOperations operations
    :vartype managed_network_groups: managed_network_management_client.aio.operations.ManagedNetworkGroupsOperations
    :ivar managed_network_peering_policies: ManagedNetworkPeeringPoliciesOperations operations
    :vartype managed_network_peering_policies: managed_network_management_client.aio.operations.ManagedNetworkPeeringPoliciesOperations
    :ivar operations: Operations operations
    :vartype operations: managed_network_management_client.aio.operations.Operations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param subscription_id: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        subscription_id: str,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = ManagedNetworkManagementClientConfiguration(credential, subscription_id, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.managed_networks = ManagedNetworksOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.scope_assignments = ScopeAssignmentsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.managed_network_groups = ManagedNetworkGroupsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.managed_network_peering_policies = ManagedNetworkPeeringPoliciesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operations = Operations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "ManagedNetworkManagementClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
