# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long

from azure.cli.testsdk import ScenarioTest
from azure.core.exceptions import ResourceNotFoundError


# Test class for Scenario
class NegativeTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(NegativeTest, self).__init__(*args, **kwargs)

    # EXAMPLE: /SpatialAnchorsAccounts/post/Regenerate spatial anchors account keys
    def test_regenerate_key2(self):
        try:
            self.cmd('az spatial-anchors-account regenerate-key '
                     '--account-name "MyAccount" '
                     '--serial 1 '
                     '--resource-group "MyResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    # EXAMPLE: /RemoteRenderingAccounts/get/List remote rendering accounts by resource group
    def test_list(self):
        try:
            self.cmd('az remote-rendering-account list '
                     '--resource-group "MyResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    # EXAMPLE: /RemoteRenderingAccounts/get/List remote rendering accounts by subscription
    def test_list2(self):
        try:
            self.cmd('az remote-rendering-account list')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    # EXAMPLE: /RemoteRenderingAccounts/get/Get remote rendering account
    def test_show(self):
        try:
            self.cmd('az remote-rendering-account show '
                     '--account-name "MyAccount" '
                     '--resource-group "MyResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    # EXAMPLE: /RemoteRenderingAccounts/put/Create remote rendering account
    def test_create(self):
        try:
            self.cmd('az remote-rendering-account create '
                     '--account-name "MyAccount" '
                     '--location "eastus2euap" '
                     '--resource-group "MyResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    # EXAMPLE: /RemoteRenderingAccounts/patch/Update remote rendering account
    def test_update(self):
        try:
            self.cmd('az remote-rendering-account update '
                     '--account-name "MyAccount" '
                     '--location "eastus2euap" '
                     '--tags hero="romeo" heroine="juliet" '
                     '--resource-group "MyResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    # EXAMPLE: /RemoteRenderingAccounts/delete/Delete remote rendering account
    def test_delete(self):
        try:
            self.cmd('az remote-rendering-account delete -y '
                     '--account-name "MyAccount" '
                     '--resource-group "MyResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    # EXAMPLE: /RemoteRenderingAccounts/post/List remote rendering account key
    def test_list_key(self):
        try:
            self.cmd('az remote-rendering-account list-key '
                     '--account-name "MyAccount" '
                     '--resource-group "MyResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    # EXAMPLE: /RemoteRenderingAccounts/post/Regenerate remote rendering account keys
    def test_regenerate_key(self):
        try:
            self.cmd('az remote-rendering-account regenerate-key '
                     '--account-name "MyAccount" '
                     '--serial 1 '
                     '--resource-group "MyResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")
