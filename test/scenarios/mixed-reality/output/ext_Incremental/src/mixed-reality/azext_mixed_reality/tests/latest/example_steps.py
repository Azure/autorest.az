# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: Create remote rendering account
@try_manual
def step_create(test, checks):
    if checks is None:
        checks = []
    test.cmd('az remote-rendering-account create '
             '--resource-group "{resourceGroupName}" '
             '--account-name "MyAccount" '
             '--location "eastus2euap"',
             checks=checks)


# EXAMPLE: Regenerate remote rendering account keys
@try_manual
def step_regenerate_key(test, checks):
    if checks is None:
        checks = []
    test.cmd('az remote-rendering-account regenerate-key '
             '--resource-group "{resourceGroupName}" '
             '--account-name "MyAccount" '
             '--serial 1',
             checks=checks)


# EXAMPLE: Get remote rendering account
@try_manual
def step_show(test, checks):
    if checks is None:
        checks = []
    test.cmd('az remote-rendering-account show '
             '--resource-group "{resourceGroupName}" '
             '--account-name "MyAccount"',
             checks=checks)


# EXAMPLE: List remote rendering accounts by resource group
@try_manual
def step_list(test, checks):
    if checks is None:
        checks = []
    test.cmd('az remote-rendering-account list '
             '--resource-group "{resourceGroupName}"',
             checks=checks)


# EXAMPLE: List remote rendering accounts by subscription
@try_manual
def step_list2(test, checks):
    if checks is None:
        checks = []
    test.cmd('az remote-rendering-account list',
             checks=checks)


# EXAMPLE: List remote rendering account key
@try_manual
def step_list_key(test, checks):
    if checks is None:
        checks = []
    test.cmd('az remote-rendering-account list-key '
             '--resource-group "{resourceGroupName}" '
             '--account-name "MyAccount"',
             checks=checks)


# EXAMPLE: Update remote rendering account
@try_manual
def step_update(test, checks):
    if checks is None:
        checks = []
    test.cmd('az remote-rendering-account update '
             '--resource-group "{resourceGroupName}" '
             '--account-name "MyAccount" '
             '--location "eastus2euap" '
             '--tags heroine="juliet" hero="romeo"',
             checks=checks)


# EXAMPLE: Delete remote rendering account
@try_manual
def step_delete(test, checks):
    if checks is None:
        checks = []
    test.cmd('az remote-rendering-account delete -y '
             '--resource-group "{resourceGroupName}" '
             '--account-name "MyAccount"',
             checks=checks)


# EXAMPLE: Create spatial anchor account
@try_manual
def step_create_spatial_anchor_account(test, checks):
    if checks is None:
        checks = []
    test.cmd('az rest --method put '
             '--url "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedRealit'
             'y/spatialAnchorsAccounts/MyAccount?api-version=2020-05-01"',
             checks=checks)


# EXAMPLE: Regenerate spatial anchors account keys
@try_manual
def step_regenerate_key2(test, checks):
    if checks is None:
        checks = []
    test.cmd('az spatial-anchors-account regenerate-key '
             '--resource-group "{resourceGroupName}" '
             '--account-name "MyAccount" '
             '--serial 1',
             checks=checks)
