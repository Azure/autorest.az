# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .swagger_steps import step_create
from .swagger_steps import step_regenerate_key
from .swagger_steps import step_show
from .swagger_steps import step_list
from .swagger_steps import step_list2
from .swagger_steps import step_list_key
from .swagger_steps import step_update
from .swagger_steps import step_delete
from .swagger_steps import step_create_spatial_anchor_account
from .swagger_steps import step_regenerate_key2
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_fakedremoterenderingscenario
@try_manual
def setup_fakedremoterenderingscenario(test):
    cmd = "az deployment group create --resource-group {{rg}} --template-file \"{}\"".format(os.path.join(TEST_DIR, 'depSto.json'))
    o = test.cmd(cmd).get_output_in_json()
    kwargs = {k: v.get("value") for k, v in o.get('properties', {}).get('outputs', {}).items()}
    test.kwargs.update(kwargs)


# Env cleanup_fakedremoterenderingscenario
@try_manual
def cleanup_fakedremoterenderingscenario(test):
    pass


# Testcase: fakedremoterenderingscenario
@try_manual
def call_fakedremoterenderingscenario(test):
    setup_fakedremoterenderingscenario(test)
    step_create(test, checks=[])
    step_regenerate_key(test, checks=[])
    step_show(test, checks=[])
    step_list(test, checks=[])
    step_list2(test, checks=[])
    step_list_key(test, checks=[])
    step_update(test, checks=[])
    step_delete(test, checks=[])
    cleanup_fakedremoterenderingscenario(test)


# Test class for fakedremoterenderingscenario
@try_manual
class Mixed_realityfakedremoterenderingscenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(Mixed_realityfakedremoterenderingscenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscriptionId': self.get_subscription_id(),
            'location': 'westus',
        })


    @ResourceGroupPreparer(name_prefix='clitest', key='resourceGroupName')
    def test_mixed_reality_fakedremoterenderingscenario(self):
        call_fakedremoterenderingscenario(self)
        calc_coverage(__file__)
        raise_if()

# Env setup_fakedspatialanchorsscenario
@try_manual
def setup_fakedspatialanchorsscenario(test):
    cmd = "az deployment group create --resource-group {{rg}} --template-file \"{}\"".format(os.path.join(TEST_DIR, 'depSto.json'))
    o = test.cmd(cmd).get_output_in_json()
    kwargs = {k: v.get("value") for k, v in o.get('properties', {}).get('outputs', {}).items()}
    test.kwargs.update(kwargs)


# Env cleanup_fakedspatialanchorsscenario
@try_manual
def cleanup_fakedspatialanchorsscenario(test):
    pass


# Testcase: fakedspatialanchorsscenario
@try_manual
def call_fakedspatialanchorsscenario(test):
    setup_fakedspatialanchorsscenario(test)
    step_create_spatial_anchor_account(test, checks=[])
    step_regenerate_key2(test, checks=[])
    cleanup_fakedspatialanchorsscenario(test)


# Test class for fakedspatialanchorsscenario
@try_manual
class Mixed_realityfakedspatialanchorsscenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(Mixed_realityfakedspatialanchorsscenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscriptionId': self.get_subscription_id(),
            'location': 'westus',
        })


    @ResourceGroupPreparer(name_prefix='clitest', key='resourceGroupName')
    def test_mixed_reality_fakedspatialanchorsscenario(self):
        call_fakedspatialanchorsscenario(self)
        calc_coverage(__file__)
        raise_if()
