# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines


def users_user_list(client,
                    orderby=None,
                    select=None,
                    expand=None):
    return client.list_user(orderby=orderby,
                            select=select,
                            expand=expand)


def users_user_show(client,
                    user_id,
                    select=None,
                    expand=None):
    return client.get_user(user_id=user_id,
                           select=select,
                           expand=expand)


def users_user_create(client,
                      id_=None,
                      deleted_date_time=None,
                      account_enabled=None,
                      age_group=None,
                      assigned_licenses=None,
                      assigned_plans=None,
                      business_phones=None,
                      city=None,
                      company_name=None,
                      consent_provided_for_minor=None,
                      country=None,
                      created_date_time=None,
                      creation_type=None,
                      department=None,
                      display_name=None,
                      employee_id=None,
                      external_user_state=None,
                      external_user_state_change_date_time=None,
                      fax_number=None,
                      given_name=None,
                      identities=None,
                      im_addresses=None,
                      is_resource_account=None,
                      job_title=None,
                      last_password_change_date_time=None,
                      legal_age_group_classification=None,
                      license_assignment_states=None,
                      mail=None,
                      mail_nickname=None,
                      mobile_phone=None,
                      office_location=None,
                      on_premises_distinguished_name=None,
                      on_premises_domain_name=None,
                      on_premises_extension_attributes=None,
                      on_premises_immutable_id=None,
                      on_premises_last_sync_date_time=None,
                      on_premises_provisioning_errors=None,
                      on_premises_sam_account_name=None,
                      on_premises_security_identifier=None,
                      on_premises_sync_enabled=None,
                      on_premises_user_principal_name=None,
                      other_mails=None,
                      password_policies=None,
                      password_profile=None,
                      postal_code=None,
                      preferred_language=None,
                      provisioned_plans=None,
                      proxy_addresses=None,
                      show_in_address_list=None,
                      sign_in_sessions_valid_from_date_time=None,
                      state=None,
                      street_address=None,
                      surname=None,
                      usage_location=None,
                      user_principal_name=None,
                      user_type=None,
                      device_enrollment_limit=None,
                      about_me=None,
                      birthday=None,
                      hire_date=None,
                      interests=None,
                      my_site=None,
                      past_projects=None,
                      preferred_name=None,
                      responsibilities=None,
                      schools=None,
                      skills=None,
                      app_role_assignments=None,
                      created_objects=None,
                      direct_reports=None,
                      license_details=None,
                      manager=None,
                      member_of=None,
                      oauth2_permission_grants=None,
                      owned_devices=None,
                      owned_objects=None,
                      registered_devices=None,
                      scoped_role_member_of=None,
                      transitive_member_of=None,
                      calendar=None,
                      calendar_groups=None,
                      calendars=None,
                      calendar_view=None,
                      contact_folders=None,
                      contacts=None,
                      events=None,
                      mail_folders=None,
                      messages=None,
                      people=None,
                      photo=None,
                      photos=None,
                      drive=None,
                      drives=None,
                      followed_sites=None,
                      extensions=None,
                      managed_devices=None,
                      managed_app_registrations=None,
                      device_management_troubleshooting_events=None,
                      activities=None,
                      online_meetings=None,
                      joined_teams=None,
                      body_contains=None,
                      body_or_subject_contains=None,
                      categories=None,
                      from_addresses=None,
                      has_attachments=None,
                      header_contains=None,
                      importance=None,
                      exceptions_is_approval_request=None,
                      exceptions_is_automatic_forward=None,
                      exceptions_is_automatic_reply=None,
                      exceptions_is_encrypted=None,
                      exceptions_is_meeting_request=None,
                      exceptions_is_meeting_response=None,
                      exceptions_is_non_delivery_report=None,
                      exceptions_is_permission_controlled=None,
                      exceptions_is_read_receipt=None,
                      exceptions_is_signed=None,
                      exceptions_is_voicemail=None,
                      message_action_flag=None,
                      not_sent_to_me=None,
                      recipient_contains=None,
                      sender_contains=None,
                      sensitivity=None,
                      sent_cc_me=None,
                      sent_only_to_me=None,
                      sent_to_addresses=None,
                      sent_to_me=None,
                      sent_to_or_cc_me=None,
                      subject_contains=None,
                      within_size_range=None,
                      microsoft_graph_message_rule_predicates_body_contains=None,
                      microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains=None,
                      microsoft_graph_message_rule_predicates_categories=None,
                      microsoft_graph_message_rule_predicates_from_addresses=None,
                      boolean_has_attachments=None,
                      microsoft_graph_message_rule_predicates_header_contains=None,
                      microsoft_graph_importance=None,
                      is_approval_request=None,
                      is_automatic_forward=None,
                      is_automatic_reply=None,
                      is_encrypted=None,
                      is_meeting_request=None,
                      is_meeting_response=None,
                      is_non_delivery_report=None,
                      is_permission_controlled=None,
                      is_read_receipt=None,
                      is_signed=None,
                      is_voicemail=None,
                      microsoft_graph_message_action_flag_message_action_flag=None,
                      boolean_not_sent_to_me=None,
                      microsoft_graph_message_rule_predicates_recipient_contains=None,
                      microsoft_graph_message_rule_predicates_sender_contains=None,
                      microsoft_graph_sensitivity=None,
                      boolean_sent_cc_me=None,
                      boolean_sent_only_to_me=None,
                      microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses=None,
                      boolean_sent_to_me=None,
                      boolean_sent_to_or_cc_me=None,
                      microsoft_graph_message_rule_predicates_subject_contains=None,
                      microsoft_graph_size_range_within_size_range=None,
                      microsoft_graph_entity_id=None,
                      notebooks=None,
                      operations=None,
                      pages=None,
                      resources=None,
                      section_groups=None,
                      sections=None,
                      id1=None,
                      contribution_to_content_discovery_as_organization_disabled=None,
                      contribution_to_content_discovery_disabled=None,
                      id2=None,
                      microsoft_graph_change_tracked_entity_created_date_time_created_date_time=None,
                      last_modified_date_time=None,
                      application=None,
                      device=None,
                      user=None,
                      availability=None,
                      id3=None,
                      shared=None,
                      trending=None,
                      used=None,
                      id4=None,
                      plans=None,
                      tasks=None,
                      id5=None,
                      master_categories=None,
                      id6=None,
                      overrides=None,
                      archive_folder=None,
                      automatic_replies_setting=None,
                      date_format=None,
                      delegate_meeting_message_delivery_options=None,
                      language=None,
                      time_format=None,
                      time_zone=None,
                      working_hours=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if account_enabled is not None:
        body['account_enabled'] = account_enabled
    if age_group is not None:
        body['age_group'] = age_group
    if assigned_licenses is not None:
        body['assigned_licenses'] = assigned_licenses
    if assigned_plans is not None:
        body['assigned_plans'] = assigned_plans
    if business_phones is not None:
        body['business_phones'] = business_phones
    if city is not None:
        body['city'] = city
    if company_name is not None:
        body['company_name'] = company_name
    if consent_provided_for_minor is not None:
        body['consent_provided_for_minor'] = consent_provided_for_minor
    if country is not None:
        body['country'] = country
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if creation_type is not None:
        body['creation_type'] = creation_type
    if department is not None:
        body['department'] = department
    if display_name is not None:
        body['display_name'] = display_name
    if employee_id is not None:
        body['employee_id'] = employee_id
    if external_user_state is not None:
        body['external_user_state'] = external_user_state
    if external_user_state_change_date_time is not None:
        body['external_user_state_change_date_time'] = external_user_state_change_date_time
    if fax_number is not None:
        body['fax_number'] = fax_number
    if given_name is not None:
        body['given_name'] = given_name
    if identities is not None:
        body['identities'] = identities
    if im_addresses is not None:
        body['im_addresses'] = im_addresses
    if is_resource_account is not None:
        body['is_resource_account'] = is_resource_account
    if job_title is not None:
        body['job_title'] = job_title
    if last_password_change_date_time is not None:
        body['last_password_change_date_time'] = last_password_change_date_time
    if legal_age_group_classification is not None:
        body['legal_age_group_classification'] = legal_age_group_classification
    if license_assignment_states is not None:
        body['license_assignment_states'] = license_assignment_states
    if mail is not None:
        body['mail'] = mail
    if mail_nickname is not None:
        body['mail_nickname'] = mail_nickname
    if mobile_phone is not None:
        body['mobile_phone'] = mobile_phone
    if office_location is not None:
        body['office_location'] = office_location
    if on_premises_distinguished_name is not None:
        body['on_premises_distinguished_name'] = on_premises_distinguished_name
    if on_premises_domain_name is not None:
        body['on_premises_domain_name'] = on_premises_domain_name
    if on_premises_extension_attributes is not None:
        body['on_premises_extension_attributes'] = on_premises_extension_attributes
    if on_premises_immutable_id is not None:
        body['on_premises_immutable_id'] = on_premises_immutable_id
    if on_premises_last_sync_date_time is not None:
        body['on_premises_last_sync_date_time'] = on_premises_last_sync_date_time
    if on_premises_provisioning_errors is not None:
        body['on_premises_provisioning_errors'] = on_premises_provisioning_errors
    if on_premises_sam_account_name is not None:
        body['on_premises_sam_account_name'] = on_premises_sam_account_name
    if on_premises_security_identifier is not None:
        body['on_premises_security_identifier'] = on_premises_security_identifier
    if on_premises_sync_enabled is not None:
        body['on_premises_sync_enabled'] = on_premises_sync_enabled
    if on_premises_user_principal_name is not None:
        body['on_premises_user_principal_name'] = on_premises_user_principal_name
    if other_mails is not None:
        body['other_mails'] = other_mails
    if password_policies is not None:
        body['password_policies'] = password_policies
    if password_profile is not None:
        body['password_profile'] = password_profile
    if postal_code is not None:
        body['postal_code'] = postal_code
    if preferred_language is not None:
        body['preferred_language'] = preferred_language
    if provisioned_plans is not None:
        body['provisioned_plans'] = provisioned_plans
    if proxy_addresses is not None:
        body['proxy_addresses'] = proxy_addresses
    if show_in_address_list is not None:
        body['show_in_address_list'] = show_in_address_list
    if sign_in_sessions_valid_from_date_time is not None:
        body['sign_in_sessions_valid_from_date_time'] = sign_in_sessions_valid_from_date_time
    if state is not None:
        body['state'] = state
    if street_address is not None:
        body['street_address'] = street_address
    if surname is not None:
        body['surname'] = surname
    if usage_location is not None:
        body['usage_location'] = usage_location
    if user_principal_name is not None:
        body['user_principal_name'] = user_principal_name
    if user_type is not None:
        body['user_type'] = user_type
    if device_enrollment_limit is not None:
        body['device_enrollment_limit'] = device_enrollment_limit
    if about_me is not None:
        body['about_me'] = about_me
    if birthday is not None:
        body['birthday'] = birthday
    if hire_date is not None:
        body['hire_date'] = hire_date
    if interests is not None:
        body['interests'] = interests
    if my_site is not None:
        body['my_site'] = my_site
    if past_projects is not None:
        body['past_projects'] = past_projects
    if preferred_name is not None:
        body['preferred_name'] = preferred_name
    if responsibilities is not None:
        body['responsibilities'] = responsibilities
    if schools is not None:
        body['schools'] = schools
    if skills is not None:
        body['skills'] = skills
    if app_role_assignments is not None:
        body['app_role_assignments'] = app_role_assignments
    if created_objects is not None:
        body['created_objects'] = created_objects
    if direct_reports is not None:
        body['direct_reports'] = direct_reports
    if license_details is not None:
        body['license_details'] = license_details
    if manager is not None:
        body['manager'] = manager
    if member_of is not None:
        body['member_of'] = member_of
    if oauth2_permission_grants is not None:
        body['oauth2_permission_grants'] = oauth2_permission_grants
    if owned_devices is not None:
        body['owned_devices'] = owned_devices
    if owned_objects is not None:
        body['owned_objects'] = owned_objects
    if registered_devices is not None:
        body['registered_devices'] = registered_devices
    if scoped_role_member_of is not None:
        body['scoped_role_member_of'] = scoped_role_member_of
    if transitive_member_of is not None:
        body['transitive_member_of'] = transitive_member_of
    if calendar is not None:
        body['calendar'] = calendar
    if calendar_groups is not None:
        body['calendar_groups'] = calendar_groups
    if calendars is not None:
        body['calendars'] = calendars
    if calendar_view is not None:
        body['calendar_view'] = calendar_view
    if contact_folders is not None:
        body['contact_folders'] = contact_folders
    if contacts is not None:
        body['contacts'] = contacts
    if events is not None:
        body['events'] = events
    if mail_folders is not None:
        body['mail_folders'] = mail_folders
    if messages is not None:
        body['messages'] = messages
    if people is not None:
        body['people'] = people
    if photo is not None:
        body['photo'] = photo
    if photos is not None:
        body['photos'] = photos
    if drive is not None:
        body['drive'] = drive
    if drives is not None:
        body['drives'] = drives
    if followed_sites is not None:
        body['followed_sites'] = followed_sites
    if extensions is not None:
        body['extensions'] = extensions
    if managed_devices is not None:
        body['managed_devices'] = managed_devices
    if managed_app_registrations is not None:
        body['managed_app_registrations'] = managed_app_registrations
    if device_management_troubleshooting_events is not None:
        body['device_management_troubleshooting_events'] = device_management_troubleshooting_events
    if activities is not None:
        body['activities'] = activities
    if online_meetings is not None:
        body['online_meetings'] = online_meetings
    if joined_teams is not None:
        body['joined_teams'] = joined_teams
    body['exceptions'] = {}
    if body_contains is not None:
        body['exceptions']['body_contains'] = body_contains
    if body_or_subject_contains is not None:
        body['exceptions']['body_or_subject_contains'] = body_or_subject_contains
    if categories is not None:
        body['exceptions']['categories'] = categories
    if from_addresses is not None:
        body['exceptions']['from_addresses'] = from_addresses
    if has_attachments is not None:
        body['exceptions']['has_attachments'] = has_attachments
    if header_contains is not None:
        body['exceptions']['header_contains'] = header_contains
    if importance is not None:
        body['exceptions']['importance'] = importance
    if exceptions_is_approval_request is not None:
        body['exceptions']['is_approval_request'] = exceptions_is_approval_request
    if exceptions_is_automatic_forward is not None:
        body['exceptions']['is_automatic_forward'] = exceptions_is_automatic_forward
    if exceptions_is_automatic_reply is not None:
        body['exceptions']['is_automatic_reply'] = exceptions_is_automatic_reply
    if exceptions_is_encrypted is not None:
        body['exceptions']['is_encrypted'] = exceptions_is_encrypted
    if exceptions_is_meeting_request is not None:
        body['exceptions']['is_meeting_request'] = exceptions_is_meeting_request
    if exceptions_is_meeting_response is not None:
        body['exceptions']['is_meeting_response'] = exceptions_is_meeting_response
    if exceptions_is_non_delivery_report is not None:
        body['exceptions']['is_non_delivery_report'] = exceptions_is_non_delivery_report
    if exceptions_is_permission_controlled is not None:
        body['exceptions']['is_permission_controlled'] = exceptions_is_permission_controlled
    if exceptions_is_read_receipt is not None:
        body['exceptions']['is_read_receipt'] = exceptions_is_read_receipt
    if exceptions_is_signed is not None:
        body['exceptions']['is_signed'] = exceptions_is_signed
    if exceptions_is_voicemail is not None:
        body['exceptions']['is_voicemail'] = exceptions_is_voicemail
    if message_action_flag is not None:
        body['exceptions']['message_action_flag'] = message_action_flag
    if not_sent_to_me is not None:
        body['exceptions']['not_sent_to_me'] = not_sent_to_me
    if recipient_contains is not None:
        body['exceptions']['recipient_contains'] = recipient_contains
    if sender_contains is not None:
        body['exceptions']['sender_contains'] = sender_contains
    if sensitivity is not None:
        body['exceptions']['sensitivity'] = sensitivity
    if sent_cc_me is not None:
        body['exceptions']['sent_cc_me'] = sent_cc_me
    if sent_only_to_me is not None:
        body['exceptions']['sent_only_to_me'] = sent_only_to_me
    if sent_to_addresses is not None:
        body['exceptions']['sent_to_addresses'] = sent_to_addresses
    if sent_to_me is not None:
        body['exceptions']['sent_to_me'] = sent_to_me
    if sent_to_or_cc_me is not None:
        body['exceptions']['sent_to_or_cc_me'] = sent_to_or_cc_me
    if subject_contains is not None:
        body['exceptions']['subject_contains'] = subject_contains
    if within_size_range is not None:
        body['exceptions']['within_size_range'] = within_size_range
    if len(body['exceptions']) == 0:
        del body['exceptions']
    body['conditions'] = {}
    if microsoft_graph_message_rule_predicates_body_contains is not None:
        body['conditions']['body_contains'] = microsoft_graph_message_rule_predicates_body_contains
    if microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains is not None:
        body['conditions']['body_or_subject_contains'] = microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains
    if microsoft_graph_message_rule_predicates_categories is not None:
        body['conditions']['categories'] = microsoft_graph_message_rule_predicates_categories
    if microsoft_graph_message_rule_predicates_from_addresses is not None:
        body['conditions']['from_addresses'] = microsoft_graph_message_rule_predicates_from_addresses
    if boolean_has_attachments is not None:
        body['conditions']['has_attachments'] = boolean_has_attachments
    if microsoft_graph_message_rule_predicates_header_contains is not None:
        body['conditions']['header_contains'] = microsoft_graph_message_rule_predicates_header_contains
    if microsoft_graph_importance is not None:
        body['conditions']['importance'] = microsoft_graph_importance
    if is_approval_request is not None:
        body['conditions']['is_approval_request'] = is_approval_request
    if is_automatic_forward is not None:
        body['conditions']['is_automatic_forward'] = is_automatic_forward
    if is_automatic_reply is not None:
        body['conditions']['is_automatic_reply'] = is_automatic_reply
    if is_encrypted is not None:
        body['conditions']['is_encrypted'] = is_encrypted
    if is_meeting_request is not None:
        body['conditions']['is_meeting_request'] = is_meeting_request
    if is_meeting_response is not None:
        body['conditions']['is_meeting_response'] = is_meeting_response
    if is_non_delivery_report is not None:
        body['conditions']['is_non_delivery_report'] = is_non_delivery_report
    if is_permission_controlled is not None:
        body['conditions']['is_permission_controlled'] = is_permission_controlled
    if is_read_receipt is not None:
        body['conditions']['is_read_receipt'] = is_read_receipt
    if is_signed is not None:
        body['conditions']['is_signed'] = is_signed
    if is_voicemail is not None:
        body['conditions']['is_voicemail'] = is_voicemail
    if microsoft_graph_message_action_flag_message_action_flag is not None:
        body['conditions']['message_action_flag'] = microsoft_graph_message_action_flag_message_action_flag
    if boolean_not_sent_to_me is not None:
        body['conditions']['not_sent_to_me'] = boolean_not_sent_to_me
    if microsoft_graph_message_rule_predicates_recipient_contains is not None:
        body['conditions']['recipient_contains'] = microsoft_graph_message_rule_predicates_recipient_contains
    if microsoft_graph_message_rule_predicates_sender_contains is not None:
        body['conditions']['sender_contains'] = microsoft_graph_message_rule_predicates_sender_contains
    if microsoft_graph_sensitivity is not None:
        body['conditions']['sensitivity'] = microsoft_graph_sensitivity
    if boolean_sent_cc_me is not None:
        body['conditions']['sent_cc_me'] = boolean_sent_cc_me
    if boolean_sent_only_to_me is not None:
        body['conditions']['sent_only_to_me'] = boolean_sent_only_to_me
    if microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses is not None:
        body['conditions']['sent_to_addresses'] = microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses
    if boolean_sent_to_me is not None:
        body['conditions']['sent_to_me'] = boolean_sent_to_me
    if boolean_sent_to_or_cc_me is not None:
        body['conditions']['sent_to_or_cc_me'] = boolean_sent_to_or_cc_me
    if microsoft_graph_message_rule_predicates_subject_contains is not None:
        body['conditions']['subject_contains'] = microsoft_graph_message_rule_predicates_subject_contains
    if microsoft_graph_size_range_within_size_range is not None:
        body['conditions']['within_size_range'] = microsoft_graph_size_range_within_size_range
    if len(body['conditions']) == 0:
        del body['conditions']
    body['onenote'] = {}
    if microsoft_graph_entity_id is not None:
        body['onenote']['id'] = microsoft_graph_entity_id
    if notebooks is not None:
        body['onenote']['notebooks'] = notebooks
    if operations is not None:
        body['onenote']['operations'] = operations
    if pages is not None:
        body['onenote']['pages'] = pages
    if resources is not None:
        body['onenote']['resources'] = resources
    if section_groups is not None:
        body['onenote']['section_groups'] = section_groups
    if sections is not None:
        body['onenote']['sections'] = sections
    if len(body['onenote']) == 0:
        del body['onenote']
    body['settings'] = {}
    if id1 is not None:
        body['settings']['id'] = id1
    if contribution_to_content_discovery_as_organization_disabled is not None:
        body['settings']['contribution_to_content_discovery_as_organization_disabled'] = contribution_to_content_discovery_as_organization_disabled
    if contribution_to_content_discovery_disabled is not None:
        body['settings']['contribution_to_content_discovery_disabled'] = contribution_to_content_discovery_disabled
    body['settings']['shift_preferences'] = {}
    if id2 is not None:
        body['settings']['shift_preferences']['id'] = id2
    if microsoft_graph_change_tracked_entity_created_date_time_created_date_time is not None:
        body['settings']['shift_preferences']['created_date_time'] = microsoft_graph_change_tracked_entity_created_date_time_created_date_time
    if last_modified_date_time is not None:
        body['settings']['shift_preferences']['last_modified_date_time'] = last_modified_date_time
    body['settings']['shift_preferences']['last_modified_by'] = {}
    if application is not None:
        body['settings']['shift_preferences']['last_modified_by']['application'] = application
    if device is not None:
        body['settings']['shift_preferences']['last_modified_by']['device'] = device
    if user is not None:
        body['settings']['shift_preferences']['last_modified_by']['user'] = user
    if len(body['settings']['shift_preferences']['last_modified_by']) == 0:
        del body['settings']['shift_preferences']['last_modified_by']
    if availability is not None:
        body['settings']['shift_preferences']['availability'] = availability
    if len(body['settings']['shift_preferences']) == 0:
        del body['settings']['shift_preferences']
    if len(body['settings']) == 0:
        del body['settings']
    body['insights'] = {}
    if id3 is not None:
        body['insights']['id'] = id3
    if shared is not None:
        body['insights']['shared'] = shared
    if trending is not None:
        body['insights']['trending'] = trending
    if used is not None:
        body['insights']['used'] = used
    if len(body['insights']) == 0:
        del body['insights']
    body['planner'] = {}
    if id4 is not None:
        body['planner']['id'] = id4
    if plans is not None:
        body['planner']['plans'] = plans
    if tasks is not None:
        body['planner']['tasks'] = tasks
    if len(body['planner']) == 0:
        del body['planner']
    body['outlook'] = {}
    if id5 is not None:
        body['outlook']['id'] = id5
    if master_categories is not None:
        body['outlook']['master_categories'] = master_categories
    if len(body['outlook']) == 0:
        del body['outlook']
    body['inference_classification'] = {}
    if id6 is not None:
        body['inference_classification']['id'] = id6
    if overrides is not None:
        body['inference_classification']['overrides'] = overrides
    if len(body['inference_classification']) == 0:
        del body['inference_classification']
    body['mailbox_settings'] = {}
    if archive_folder is not None:
        body['mailbox_settings']['archive_folder'] = archive_folder
    if automatic_replies_setting is not None:
        body['mailbox_settings']['automatic_replies_setting'] = automatic_replies_setting
    if date_format is not None:
        body['mailbox_settings']['date_format'] = date_format
    if delegate_meeting_message_delivery_options is not None:
        body['mailbox_settings']['delegate_meeting_message_delivery_options'] = delegate_meeting_message_delivery_options
    if language is not None:
        body['mailbox_settings']['language'] = language
    if time_format is not None:
        body['mailbox_settings']['time_format'] = time_format
    if time_zone is not None:
        body['mailbox_settings']['time_zone'] = time_zone
    if working_hours is not None:
        body['mailbox_settings']['working_hours'] = working_hours
    if len(body['mailbox_settings']) == 0:
        del body['mailbox_settings']
    return client.create_user(body=body)


def users_user_update(client,
                      user_id,
                      id_=None,
                      deleted_date_time=None,
                      account_enabled=None,
                      age_group=None,
                      assigned_licenses=None,
                      assigned_plans=None,
                      business_phones=None,
                      city=None,
                      company_name=None,
                      consent_provided_for_minor=None,
                      country=None,
                      created_date_time=None,
                      creation_type=None,
                      department=None,
                      display_name=None,
                      employee_id=None,
                      external_user_state=None,
                      external_user_state_change_date_time=None,
                      fax_number=None,
                      given_name=None,
                      identities=None,
                      im_addresses=None,
                      is_resource_account=None,
                      job_title=None,
                      last_password_change_date_time=None,
                      legal_age_group_classification=None,
                      license_assignment_states=None,
                      mail=None,
                      mail_nickname=None,
                      mobile_phone=None,
                      office_location=None,
                      on_premises_distinguished_name=None,
                      on_premises_domain_name=None,
                      on_premises_extension_attributes=None,
                      on_premises_immutable_id=None,
                      on_premises_last_sync_date_time=None,
                      on_premises_provisioning_errors=None,
                      on_premises_sam_account_name=None,
                      on_premises_security_identifier=None,
                      on_premises_sync_enabled=None,
                      on_premises_user_principal_name=None,
                      other_mails=None,
                      password_policies=None,
                      password_profile=None,
                      postal_code=None,
                      preferred_language=None,
                      provisioned_plans=None,
                      proxy_addresses=None,
                      show_in_address_list=None,
                      sign_in_sessions_valid_from_date_time=None,
                      state=None,
                      street_address=None,
                      surname=None,
                      usage_location=None,
                      user_principal_name=None,
                      user_type=None,
                      device_enrollment_limit=None,
                      about_me=None,
                      birthday=None,
                      hire_date=None,
                      interests=None,
                      my_site=None,
                      past_projects=None,
                      preferred_name=None,
                      responsibilities=None,
                      schools=None,
                      skills=None,
                      app_role_assignments=None,
                      created_objects=None,
                      direct_reports=None,
                      license_details=None,
                      manager=None,
                      member_of=None,
                      oauth2_permission_grants=None,
                      owned_devices=None,
                      owned_objects=None,
                      registered_devices=None,
                      scoped_role_member_of=None,
                      transitive_member_of=None,
                      calendar=None,
                      calendar_groups=None,
                      calendars=None,
                      calendar_view=None,
                      contact_folders=None,
                      contacts=None,
                      events=None,
                      mail_folders=None,
                      messages=None,
                      people=None,
                      photo=None,
                      photos=None,
                      drive=None,
                      drives=None,
                      followed_sites=None,
                      extensions=None,
                      managed_devices=None,
                      managed_app_registrations=None,
                      device_management_troubleshooting_events=None,
                      activities=None,
                      online_meetings=None,
                      joined_teams=None,
                      body_contains=None,
                      body_or_subject_contains=None,
                      categories=None,
                      from_addresses=None,
                      has_attachments=None,
                      header_contains=None,
                      importance=None,
                      exceptions_is_approval_request=None,
                      exceptions_is_automatic_forward=None,
                      exceptions_is_automatic_reply=None,
                      exceptions_is_encrypted=None,
                      exceptions_is_meeting_request=None,
                      exceptions_is_meeting_response=None,
                      exceptions_is_non_delivery_report=None,
                      exceptions_is_permission_controlled=None,
                      exceptions_is_read_receipt=None,
                      exceptions_is_signed=None,
                      exceptions_is_voicemail=None,
                      message_action_flag=None,
                      not_sent_to_me=None,
                      recipient_contains=None,
                      sender_contains=None,
                      sensitivity=None,
                      sent_cc_me=None,
                      sent_only_to_me=None,
                      sent_to_addresses=None,
                      sent_to_me=None,
                      sent_to_or_cc_me=None,
                      subject_contains=None,
                      within_size_range=None,
                      microsoft_graph_message_rule_predicates_body_contains=None,
                      microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains=None,
                      microsoft_graph_message_rule_predicates_categories=None,
                      microsoft_graph_message_rule_predicates_from_addresses=None,
                      boolean_has_attachments=None,
                      microsoft_graph_message_rule_predicates_header_contains=None,
                      microsoft_graph_importance=None,
                      is_approval_request=None,
                      is_automatic_forward=None,
                      is_automatic_reply=None,
                      is_encrypted=None,
                      is_meeting_request=None,
                      is_meeting_response=None,
                      is_non_delivery_report=None,
                      is_permission_controlled=None,
                      is_read_receipt=None,
                      is_signed=None,
                      is_voicemail=None,
                      microsoft_graph_message_action_flag_message_action_flag=None,
                      boolean_not_sent_to_me=None,
                      microsoft_graph_message_rule_predicates_recipient_contains=None,
                      microsoft_graph_message_rule_predicates_sender_contains=None,
                      microsoft_graph_sensitivity=None,
                      boolean_sent_cc_me=None,
                      boolean_sent_only_to_me=None,
                      microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses=None,
                      boolean_sent_to_me=None,
                      boolean_sent_to_or_cc_me=None,
                      microsoft_graph_message_rule_predicates_subject_contains=None,
                      microsoft_graph_size_range_within_size_range=None,
                      microsoft_graph_entity_id=None,
                      notebooks=None,
                      operations=None,
                      pages=None,
                      resources=None,
                      section_groups=None,
                      sections=None,
                      id1=None,
                      contribution_to_content_discovery_as_organization_disabled=None,
                      contribution_to_content_discovery_disabled=None,
                      id2=None,
                      microsoft_graph_change_tracked_entity_created_date_time_created_date_time=None,
                      last_modified_date_time=None,
                      application=None,
                      device=None,
                      user=None,
                      availability=None,
                      id3=None,
                      shared=None,
                      trending=None,
                      used=None,
                      id4=None,
                      plans=None,
                      tasks=None,
                      id5=None,
                      master_categories=None,
                      id6=None,
                      overrides=None,
                      archive_folder=None,
                      automatic_replies_setting=None,
                      date_format=None,
                      delegate_meeting_message_delivery_options=None,
                      language=None,
                      time_format=None,
                      time_zone=None,
                      working_hours=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if account_enabled is not None:
        body['account_enabled'] = account_enabled
    if age_group is not None:
        body['age_group'] = age_group
    if assigned_licenses is not None:
        body['assigned_licenses'] = assigned_licenses
    if assigned_plans is not None:
        body['assigned_plans'] = assigned_plans
    if business_phones is not None:
        body['business_phones'] = business_phones
    if city is not None:
        body['city'] = city
    if company_name is not None:
        body['company_name'] = company_name
    if consent_provided_for_minor is not None:
        body['consent_provided_for_minor'] = consent_provided_for_minor
    if country is not None:
        body['country'] = country
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if creation_type is not None:
        body['creation_type'] = creation_type
    if department is not None:
        body['department'] = department
    if display_name is not None:
        body['display_name'] = display_name
    if employee_id is not None:
        body['employee_id'] = employee_id
    if external_user_state is not None:
        body['external_user_state'] = external_user_state
    if external_user_state_change_date_time is not None:
        body['external_user_state_change_date_time'] = external_user_state_change_date_time
    if fax_number is not None:
        body['fax_number'] = fax_number
    if given_name is not None:
        body['given_name'] = given_name
    if identities is not None:
        body['identities'] = identities
    if im_addresses is not None:
        body['im_addresses'] = im_addresses
    if is_resource_account is not None:
        body['is_resource_account'] = is_resource_account
    if job_title is not None:
        body['job_title'] = job_title
    if last_password_change_date_time is not None:
        body['last_password_change_date_time'] = last_password_change_date_time
    if legal_age_group_classification is not None:
        body['legal_age_group_classification'] = legal_age_group_classification
    if license_assignment_states is not None:
        body['license_assignment_states'] = license_assignment_states
    if mail is not None:
        body['mail'] = mail
    if mail_nickname is not None:
        body['mail_nickname'] = mail_nickname
    if mobile_phone is not None:
        body['mobile_phone'] = mobile_phone
    if office_location is not None:
        body['office_location'] = office_location
    if on_premises_distinguished_name is not None:
        body['on_premises_distinguished_name'] = on_premises_distinguished_name
    if on_premises_domain_name is not None:
        body['on_premises_domain_name'] = on_premises_domain_name
    if on_premises_extension_attributes is not None:
        body['on_premises_extension_attributes'] = on_premises_extension_attributes
    if on_premises_immutable_id is not None:
        body['on_premises_immutable_id'] = on_premises_immutable_id
    if on_premises_last_sync_date_time is not None:
        body['on_premises_last_sync_date_time'] = on_premises_last_sync_date_time
    if on_premises_provisioning_errors is not None:
        body['on_premises_provisioning_errors'] = on_premises_provisioning_errors
    if on_premises_sam_account_name is not None:
        body['on_premises_sam_account_name'] = on_premises_sam_account_name
    if on_premises_security_identifier is not None:
        body['on_premises_security_identifier'] = on_premises_security_identifier
    if on_premises_sync_enabled is not None:
        body['on_premises_sync_enabled'] = on_premises_sync_enabled
    if on_premises_user_principal_name is not None:
        body['on_premises_user_principal_name'] = on_premises_user_principal_name
    if other_mails is not None:
        body['other_mails'] = other_mails
    if password_policies is not None:
        body['password_policies'] = password_policies
    if password_profile is not None:
        body['password_profile'] = password_profile
    if postal_code is not None:
        body['postal_code'] = postal_code
    if preferred_language is not None:
        body['preferred_language'] = preferred_language
    if provisioned_plans is not None:
        body['provisioned_plans'] = provisioned_plans
    if proxy_addresses is not None:
        body['proxy_addresses'] = proxy_addresses
    if show_in_address_list is not None:
        body['show_in_address_list'] = show_in_address_list
    if sign_in_sessions_valid_from_date_time is not None:
        body['sign_in_sessions_valid_from_date_time'] = sign_in_sessions_valid_from_date_time
    if state is not None:
        body['state'] = state
    if street_address is not None:
        body['street_address'] = street_address
    if surname is not None:
        body['surname'] = surname
    if usage_location is not None:
        body['usage_location'] = usage_location
    if user_principal_name is not None:
        body['user_principal_name'] = user_principal_name
    if user_type is not None:
        body['user_type'] = user_type
    if device_enrollment_limit is not None:
        body['device_enrollment_limit'] = device_enrollment_limit
    if about_me is not None:
        body['about_me'] = about_me
    if birthday is not None:
        body['birthday'] = birthday
    if hire_date is not None:
        body['hire_date'] = hire_date
    if interests is not None:
        body['interests'] = interests
    if my_site is not None:
        body['my_site'] = my_site
    if past_projects is not None:
        body['past_projects'] = past_projects
    if preferred_name is not None:
        body['preferred_name'] = preferred_name
    if responsibilities is not None:
        body['responsibilities'] = responsibilities
    if schools is not None:
        body['schools'] = schools
    if skills is not None:
        body['skills'] = skills
    if app_role_assignments is not None:
        body['app_role_assignments'] = app_role_assignments
    if created_objects is not None:
        body['created_objects'] = created_objects
    if direct_reports is not None:
        body['direct_reports'] = direct_reports
    if license_details is not None:
        body['license_details'] = license_details
    if manager is not None:
        body['manager'] = manager
    if member_of is not None:
        body['member_of'] = member_of
    if oauth2_permission_grants is not None:
        body['oauth2_permission_grants'] = oauth2_permission_grants
    if owned_devices is not None:
        body['owned_devices'] = owned_devices
    if owned_objects is not None:
        body['owned_objects'] = owned_objects
    if registered_devices is not None:
        body['registered_devices'] = registered_devices
    if scoped_role_member_of is not None:
        body['scoped_role_member_of'] = scoped_role_member_of
    if transitive_member_of is not None:
        body['transitive_member_of'] = transitive_member_of
    if calendar is not None:
        body['calendar'] = calendar
    if calendar_groups is not None:
        body['calendar_groups'] = calendar_groups
    if calendars is not None:
        body['calendars'] = calendars
    if calendar_view is not None:
        body['calendar_view'] = calendar_view
    if contact_folders is not None:
        body['contact_folders'] = contact_folders
    if contacts is not None:
        body['contacts'] = contacts
    if events is not None:
        body['events'] = events
    if mail_folders is not None:
        body['mail_folders'] = mail_folders
    if messages is not None:
        body['messages'] = messages
    if people is not None:
        body['people'] = people
    if photo is not None:
        body['photo'] = photo
    if photos is not None:
        body['photos'] = photos
    if drive is not None:
        body['drive'] = drive
    if drives is not None:
        body['drives'] = drives
    if followed_sites is not None:
        body['followed_sites'] = followed_sites
    if extensions is not None:
        body['extensions'] = extensions
    if managed_devices is not None:
        body['managed_devices'] = managed_devices
    if managed_app_registrations is not None:
        body['managed_app_registrations'] = managed_app_registrations
    if device_management_troubleshooting_events is not None:
        body['device_management_troubleshooting_events'] = device_management_troubleshooting_events
    if activities is not None:
        body['activities'] = activities
    if online_meetings is not None:
        body['online_meetings'] = online_meetings
    if joined_teams is not None:
        body['joined_teams'] = joined_teams
    body['exceptions'] = {}
    if body_contains is not None:
        body['exceptions']['body_contains'] = body_contains
    if body_or_subject_contains is not None:
        body['exceptions']['body_or_subject_contains'] = body_or_subject_contains
    if categories is not None:
        body['exceptions']['categories'] = categories
    if from_addresses is not None:
        body['exceptions']['from_addresses'] = from_addresses
    if has_attachments is not None:
        body['exceptions']['has_attachments'] = has_attachments
    if header_contains is not None:
        body['exceptions']['header_contains'] = header_contains
    if importance is not None:
        body['exceptions']['importance'] = importance
    if exceptions_is_approval_request is not None:
        body['exceptions']['is_approval_request'] = exceptions_is_approval_request
    if exceptions_is_automatic_forward is not None:
        body['exceptions']['is_automatic_forward'] = exceptions_is_automatic_forward
    if exceptions_is_automatic_reply is not None:
        body['exceptions']['is_automatic_reply'] = exceptions_is_automatic_reply
    if exceptions_is_encrypted is not None:
        body['exceptions']['is_encrypted'] = exceptions_is_encrypted
    if exceptions_is_meeting_request is not None:
        body['exceptions']['is_meeting_request'] = exceptions_is_meeting_request
    if exceptions_is_meeting_response is not None:
        body['exceptions']['is_meeting_response'] = exceptions_is_meeting_response
    if exceptions_is_non_delivery_report is not None:
        body['exceptions']['is_non_delivery_report'] = exceptions_is_non_delivery_report
    if exceptions_is_permission_controlled is not None:
        body['exceptions']['is_permission_controlled'] = exceptions_is_permission_controlled
    if exceptions_is_read_receipt is not None:
        body['exceptions']['is_read_receipt'] = exceptions_is_read_receipt
    if exceptions_is_signed is not None:
        body['exceptions']['is_signed'] = exceptions_is_signed
    if exceptions_is_voicemail is not None:
        body['exceptions']['is_voicemail'] = exceptions_is_voicemail
    if message_action_flag is not None:
        body['exceptions']['message_action_flag'] = message_action_flag
    if not_sent_to_me is not None:
        body['exceptions']['not_sent_to_me'] = not_sent_to_me
    if recipient_contains is not None:
        body['exceptions']['recipient_contains'] = recipient_contains
    if sender_contains is not None:
        body['exceptions']['sender_contains'] = sender_contains
    if sensitivity is not None:
        body['exceptions']['sensitivity'] = sensitivity
    if sent_cc_me is not None:
        body['exceptions']['sent_cc_me'] = sent_cc_me
    if sent_only_to_me is not None:
        body['exceptions']['sent_only_to_me'] = sent_only_to_me
    if sent_to_addresses is not None:
        body['exceptions']['sent_to_addresses'] = sent_to_addresses
    if sent_to_me is not None:
        body['exceptions']['sent_to_me'] = sent_to_me
    if sent_to_or_cc_me is not None:
        body['exceptions']['sent_to_or_cc_me'] = sent_to_or_cc_me
    if subject_contains is not None:
        body['exceptions']['subject_contains'] = subject_contains
    if within_size_range is not None:
        body['exceptions']['within_size_range'] = within_size_range
    if len(body['exceptions']) == 0:
        del body['exceptions']
    body['conditions'] = {}
    if microsoft_graph_message_rule_predicates_body_contains is not None:
        body['conditions']['body_contains'] = microsoft_graph_message_rule_predicates_body_contains
    if microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains is not None:
        body['conditions']['body_or_subject_contains'] = microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains
    if microsoft_graph_message_rule_predicates_categories is not None:
        body['conditions']['categories'] = microsoft_graph_message_rule_predicates_categories
    if microsoft_graph_message_rule_predicates_from_addresses is not None:
        body['conditions']['from_addresses'] = microsoft_graph_message_rule_predicates_from_addresses
    if boolean_has_attachments is not None:
        body['conditions']['has_attachments'] = boolean_has_attachments
    if microsoft_graph_message_rule_predicates_header_contains is not None:
        body['conditions']['header_contains'] = microsoft_graph_message_rule_predicates_header_contains
    if microsoft_graph_importance is not None:
        body['conditions']['importance'] = microsoft_graph_importance
    if is_approval_request is not None:
        body['conditions']['is_approval_request'] = is_approval_request
    if is_automatic_forward is not None:
        body['conditions']['is_automatic_forward'] = is_automatic_forward
    if is_automatic_reply is not None:
        body['conditions']['is_automatic_reply'] = is_automatic_reply
    if is_encrypted is not None:
        body['conditions']['is_encrypted'] = is_encrypted
    if is_meeting_request is not None:
        body['conditions']['is_meeting_request'] = is_meeting_request
    if is_meeting_response is not None:
        body['conditions']['is_meeting_response'] = is_meeting_response
    if is_non_delivery_report is not None:
        body['conditions']['is_non_delivery_report'] = is_non_delivery_report
    if is_permission_controlled is not None:
        body['conditions']['is_permission_controlled'] = is_permission_controlled
    if is_read_receipt is not None:
        body['conditions']['is_read_receipt'] = is_read_receipt
    if is_signed is not None:
        body['conditions']['is_signed'] = is_signed
    if is_voicemail is not None:
        body['conditions']['is_voicemail'] = is_voicemail
    if microsoft_graph_message_action_flag_message_action_flag is not None:
        body['conditions']['message_action_flag'] = microsoft_graph_message_action_flag_message_action_flag
    if boolean_not_sent_to_me is not None:
        body['conditions']['not_sent_to_me'] = boolean_not_sent_to_me
    if microsoft_graph_message_rule_predicates_recipient_contains is not None:
        body['conditions']['recipient_contains'] = microsoft_graph_message_rule_predicates_recipient_contains
    if microsoft_graph_message_rule_predicates_sender_contains is not None:
        body['conditions']['sender_contains'] = microsoft_graph_message_rule_predicates_sender_contains
    if microsoft_graph_sensitivity is not None:
        body['conditions']['sensitivity'] = microsoft_graph_sensitivity
    if boolean_sent_cc_me is not None:
        body['conditions']['sent_cc_me'] = boolean_sent_cc_me
    if boolean_sent_only_to_me is not None:
        body['conditions']['sent_only_to_me'] = boolean_sent_only_to_me
    if microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses is not None:
        body['conditions']['sent_to_addresses'] = microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses
    if boolean_sent_to_me is not None:
        body['conditions']['sent_to_me'] = boolean_sent_to_me
    if boolean_sent_to_or_cc_me is not None:
        body['conditions']['sent_to_or_cc_me'] = boolean_sent_to_or_cc_me
    if microsoft_graph_message_rule_predicates_subject_contains is not None:
        body['conditions']['subject_contains'] = microsoft_graph_message_rule_predicates_subject_contains
    if microsoft_graph_size_range_within_size_range is not None:
        body['conditions']['within_size_range'] = microsoft_graph_size_range_within_size_range
    if len(body['conditions']) == 0:
        del body['conditions']
    body['onenote'] = {}
    if microsoft_graph_entity_id is not None:
        body['onenote']['id'] = microsoft_graph_entity_id
    if notebooks is not None:
        body['onenote']['notebooks'] = notebooks
    if operations is not None:
        body['onenote']['operations'] = operations
    if pages is not None:
        body['onenote']['pages'] = pages
    if resources is not None:
        body['onenote']['resources'] = resources
    if section_groups is not None:
        body['onenote']['section_groups'] = section_groups
    if sections is not None:
        body['onenote']['sections'] = sections
    if len(body['onenote']) == 0:
        del body['onenote']
    body['settings'] = {}
    if id1 is not None:
        body['settings']['id'] = id1
    if contribution_to_content_discovery_as_organization_disabled is not None:
        body['settings']['contribution_to_content_discovery_as_organization_disabled'] = contribution_to_content_discovery_as_organization_disabled
    if contribution_to_content_discovery_disabled is not None:
        body['settings']['contribution_to_content_discovery_disabled'] = contribution_to_content_discovery_disabled
    body['settings']['shift_preferences'] = {}
    if id2 is not None:
        body['settings']['shift_preferences']['id'] = id2
    if microsoft_graph_change_tracked_entity_created_date_time_created_date_time is not None:
        body['settings']['shift_preferences']['created_date_time'] = microsoft_graph_change_tracked_entity_created_date_time_created_date_time
    if last_modified_date_time is not None:
        body['settings']['shift_preferences']['last_modified_date_time'] = last_modified_date_time
    body['settings']['shift_preferences']['last_modified_by'] = {}
    if application is not None:
        body['settings']['shift_preferences']['last_modified_by']['application'] = application
    if device is not None:
        body['settings']['shift_preferences']['last_modified_by']['device'] = device
    if user is not None:
        body['settings']['shift_preferences']['last_modified_by']['user'] = user
    if len(body['settings']['shift_preferences']['last_modified_by']) == 0:
        del body['settings']['shift_preferences']['last_modified_by']
    if availability is not None:
        body['settings']['shift_preferences']['availability'] = availability
    if len(body['settings']['shift_preferences']) == 0:
        del body['settings']['shift_preferences']
    if len(body['settings']) == 0:
        del body['settings']
    body['insights'] = {}
    if id3 is not None:
        body['insights']['id'] = id3
    if shared is not None:
        body['insights']['shared'] = shared
    if trending is not None:
        body['insights']['trending'] = trending
    if used is not None:
        body['insights']['used'] = used
    if len(body['insights']) == 0:
        del body['insights']
    body['planner'] = {}
    if id4 is not None:
        body['planner']['id'] = id4
    if plans is not None:
        body['planner']['plans'] = plans
    if tasks is not None:
        body['planner']['tasks'] = tasks
    if len(body['planner']) == 0:
        del body['planner']
    body['outlook'] = {}
    if id5 is not None:
        body['outlook']['id'] = id5
    if master_categories is not None:
        body['outlook']['master_categories'] = master_categories
    if len(body['outlook']) == 0:
        del body['outlook']
    body['inference_classification'] = {}
    if id6 is not None:
        body['inference_classification']['id'] = id6
    if overrides is not None:
        body['inference_classification']['overrides'] = overrides
    if len(body['inference_classification']) == 0:
        del body['inference_classification']
    body['mailbox_settings'] = {}
    if archive_folder is not None:
        body['mailbox_settings']['archive_folder'] = archive_folder
    if automatic_replies_setting is not None:
        body['mailbox_settings']['automatic_replies_setting'] = automatic_replies_setting
    if date_format is not None:
        body['mailbox_settings']['date_format'] = date_format
    if delegate_meeting_message_delivery_options is not None:
        body['mailbox_settings']['delegate_meeting_message_delivery_options'] = delegate_meeting_message_delivery_options
    if language is not None:
        body['mailbox_settings']['language'] = language
    if time_format is not None:
        body['mailbox_settings']['time_format'] = time_format
    if time_zone is not None:
        body['mailbox_settings']['time_zone'] = time_zone
    if working_hours is not None:
        body['mailbox_settings']['working_hours'] = working_hours
    if len(body['mailbox_settings']) == 0:
        del body['mailbox_settings']
    return client.update_user(user_id=user_id,
                              body=body)


def users_user_delete(client,
                      user_id,
                      if_match=None):
    return client.delete_user(user_id=user_id,
                              if_match=if_match)


def users_user_create_extension(client,
                                user_id,
                                id_=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    return client.create_extensions(user_id=user_id,
                                    body=body)


def users_user_create_license_detail(client,
                                     user_id,
                                     id_=None,
                                     service_plans=None,
                                     sku_id=None,
                                     sku_part_number=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if service_plans is not None:
        body['service_plans'] = service_plans
    if sku_id is not None:
        body['sku_id'] = sku_id
    if sku_part_number is not None:
        body['sku_part_number'] = sku_part_number
    return client.create_license_details(user_id=user_id,
                                         body=body)


def users_user_create_photo(client,
                            user_id,
                            id_=None,
                            height=None,
                            width=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if height is not None:
        body['height'] = height
    if width is not None:
        body['width'] = width
    return client.create_photos(user_id=user_id,
                                body=body)


def users_user_create_ref_created_object(client,
                                         user_id,
                                         body):
    return client.create_ref_created_objects(user_id=user_id,
                                             body=body)


def users_user_create_ref_direct_report(client,
                                        user_id,
                                        body):
    return client.create_ref_direct_reports(user_id=user_id,
                                            body=body)


def users_user_create_ref_member_of(client,
                                    user_id,
                                    body):
    return client.create_ref_member_of(user_id=user_id,
                                       body=body)


def users_user_create_ref_oauth2_permission_grant(client,
                                                  user_id,
                                                  body):
    return client.create_ref_oauth2_permission_grants(user_id=user_id,
                                                      body=body)


def users_user_create_ref_owned_device(client,
                                       user_id,
                                       body):
    return client.create_ref_owned_devices(user_id=user_id,
                                           body=body)


def users_user_create_ref_owned_object(client,
                                       user_id,
                                       body):
    return client.create_ref_owned_objects(user_id=user_id,
                                           body=body)


def users_user_create_ref_registered_device(client,
                                            user_id,
                                            body):
    return client.create_ref_registered_devices(user_id=user_id,
                                                body=body)


def users_user_create_ref_transitive_member_of(client,
                                               user_id,
                                               body):
    return client.create_ref_transitive_member_of(user_id=user_id,
                                                  body=body)


def users_user_delete_extension(client,
                                user_id,
                                extension_id,
                                if_match=None):
    return client.delete_extensions(user_id=user_id,
                                    extension_id=extension_id,
                                    if_match=if_match)


def users_user_delete_license_detail(client,
                                     user_id,
                                     license_details_id,
                                     if_match=None):
    return client.delete_license_details(user_id=user_id,
                                         license_details_id=license_details_id,
                                         if_match=if_match)


def users_user_delete_outlook(client,
                              user_id,
                              if_match=None):
    return client.delete_outlook(user_id=user_id,
                                 if_match=if_match)


def users_user_delete_photo(client,
                            user_id,
                            profile_photo_id=None,
                            if_match=None):
    if user_id is not None and profile_photo_id is not None:
        return client.delete_photos(user_id=user_id,
                                    profile_photo_id=profile_photo_id,
                                    if_match=if_match)
    return client.delete_photo(user_id=user_id,
                               if_match=if_match)


def users_user_delete_ref_manager(client,
                                  user_id,
                                  if_match=None):
    return client.delete_ref_manager(user_id=user_id,
                                     if_match=if_match)


def users_user_delete_setting(client,
                              user_id,
                              if_match=None):
    return client.delete_settings(user_id=user_id,
                                  if_match=if_match)


def users_user_list_created_object(client,
                                   user_id,
                                   orderby=None,
                                   select=None,
                                   expand=None):
    return client.list_created_objects(user_id=user_id,
                                       orderby=orderby,
                                       select=select,
                                       expand=expand)


def users_user_list_direct_report(client,
                                  user_id,
                                  orderby=None,
                                  select=None,
                                  expand=None):
    return client.list_direct_reports(user_id=user_id,
                                      orderby=orderby,
                                      select=select,
                                      expand=expand)


def users_user_list_extension(client,
                              user_id,
                              orderby=None,
                              select=None,
                              expand=None):
    return client.list_extensions(user_id=user_id,
                                  orderby=orderby,
                                  select=select,
                                  expand=expand)


def users_user_list_license_detail(client,
                                   user_id,
                                   orderby=None,
                                   select=None,
                                   expand=None):
    return client.list_license_details(user_id=user_id,
                                       orderby=orderby,
                                       select=select,
                                       expand=expand)


def users_user_list_member_of(client,
                              user_id,
                              orderby=None,
                              select=None,
                              expand=None):
    return client.list_member_of(user_id=user_id,
                                 orderby=orderby,
                                 select=select,
                                 expand=expand)


def users_user_list_oauth2_permission_grant(client,
                                            user_id,
                                            orderby=None,
                                            select=None,
                                            expand=None):
    return client.list_oauth2_permission_grants(user_id=user_id,
                                                orderby=orderby,
                                                select=select,
                                                expand=expand)


def users_user_list_owned_device(client,
                                 user_id,
                                 orderby=None,
                                 select=None,
                                 expand=None):
    return client.list_owned_devices(user_id=user_id,
                                     orderby=orderby,
                                     select=select,
                                     expand=expand)


def users_user_list_owned_object(client,
                                 user_id,
                                 orderby=None,
                                 select=None,
                                 expand=None):
    return client.list_owned_objects(user_id=user_id,
                                     orderby=orderby,
                                     select=select,
                                     expand=expand)


def users_user_list_photo(client,
                          user_id,
                          orderby=None,
                          select=None,
                          expand=None):
    return client.list_photos(user_id=user_id,
                              orderby=orderby,
                              select=select,
                              expand=expand)


def users_user_list_ref_created_object(client,
                                       user_id,
                                       orderby=None):
    return client.list_ref_created_objects(user_id=user_id,
                                           orderby=orderby)


def users_user_list_ref_direct_report(client,
                                      user_id,
                                      orderby=None):
    return client.list_ref_direct_reports(user_id=user_id,
                                          orderby=orderby)


def users_user_list_ref_member_of(client,
                                  user_id,
                                  orderby=None):
    return client.list_ref_member_of(user_id=user_id,
                                     orderby=orderby)


def users_user_list_ref_oauth2_permission_grant(client,
                                                user_id,
                                                orderby=None):
    return client.list_ref_oauth2_permission_grants(user_id=user_id,
                                                    orderby=orderby)


def users_user_list_ref_owned_device(client,
                                     user_id,
                                     orderby=None):
    return client.list_ref_owned_devices(user_id=user_id,
                                         orderby=orderby)


def users_user_list_ref_owned_object(client,
                                     user_id,
                                     orderby=None):
    return client.list_ref_owned_objects(user_id=user_id,
                                         orderby=orderby)


def users_user_list_ref_registered_device(client,
                                          user_id,
                                          orderby=None):
    return client.list_ref_registered_devices(user_id=user_id,
                                              orderby=orderby)


def users_user_list_ref_transitive_member_of(client,
                                             user_id,
                                             orderby=None):
    return client.list_ref_transitive_member_of(user_id=user_id,
                                                orderby=orderby)


def users_user_list_registered_device(client,
                                      user_id,
                                      orderby=None,
                                      select=None,
                                      expand=None):
    return client.list_registered_devices(user_id=user_id,
                                          orderby=orderby,
                                          select=select,
                                          expand=expand)


def users_user_list_transitive_member_of(client,
                                         user_id,
                                         orderby=None,
                                         select=None,
                                         expand=None):
    return client.list_transitive_member_of(user_id=user_id,
                                            orderby=orderby,
                                            select=select,
                                            expand=expand)


def users_user_set_ref_manager(client,
                               user_id,
                               body):
    return client.set_ref_manager(user_id=user_id,
                                  body=body)


def users_user_show_extension(client,
                              user_id,
                              extension_id,
                              select=None,
                              expand=None):
    return client.get_extensions(user_id=user_id,
                                 extension_id=extension_id,
                                 select=select,
                                 expand=expand)


def users_user_show_license_detail(client,
                                   user_id,
                                   license_details_id,
                                   select=None,
                                   expand=None):
    return client.get_license_details(user_id=user_id,
                                      license_details_id=license_details_id,
                                      select=select,
                                      expand=expand)


def users_user_show_manager(client,
                            user_id,
                            select=None,
                            expand=None):
    return client.get_manager(user_id=user_id,
                              select=select,
                              expand=expand)


def users_user_show_outlook(client,
                            user_id,
                            select=None,
                            expand=None):
    return client.get_outlook(user_id=user_id,
                              select=select,
                              expand=expand)


def users_user_show_photo(client,
                          user_id,
                          profile_photo_id=None,
                          select=None,
                          expand=None):
    if user_id is not None and profile_photo_id is not None:
        return client.get_photos(user_id=user_id,
                                 profile_photo_id=profile_photo_id,
                                 select=select,
                                 expand=expand)
    return client.get_photo(user_id=user_id,
                            select=select,
                            expand=expand)


def users_user_show_ref_manager(client,
                                user_id):
    return client.get_ref_manager(user_id=user_id)


def users_user_show_setting(client,
                            user_id,
                            select=None,
                            expand=None):
    return client.get_settings(user_id=user_id,
                               select=select,
                               expand=expand)


def users_user_update_extension(client,
                                user_id,
                                extension_id,
                                id_=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    return client.update_extensions(user_id=user_id,
                                    extension_id=extension_id,
                                    body=body)


def users_user_update_license_detail(client,
                                     user_id,
                                     license_details_id,
                                     id_=None,
                                     service_plans=None,
                                     sku_id=None,
                                     sku_part_number=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if service_plans is not None:
        body['service_plans'] = service_plans
    if sku_id is not None:
        body['sku_id'] = sku_id
    if sku_part_number is not None:
        body['sku_part_number'] = sku_part_number
    return client.update_license_details(user_id=user_id,
                                         license_details_id=license_details_id,
                                         body=body)


def users_user_update_outlook(client,
                              user_id,
                              id_=None,
                              master_categories=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if master_categories is not None:
        body['master_categories'] = master_categories
    return client.update_outlook(user_id=user_id,
                                 body=body)


def users_user_update_photo(client,
                            user_id,
                            profile_photo_id=None,
                            id_=None,
                            height=None,
                            width=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if height is not None:
        body['height'] = height
    if width is not None:
        body['width'] = width
    if user_id is not None and profile_photo_id is not None:
        return client.update_photos(user_id=user_id,
                                    profile_photo_id=profile_photo_id,
                                    body=body)
    return client.update_photo(user_id=user_id,
                               body=body)


def users_user_update_setting(client,
                              user_id,
                              id_=None,
                              contribution_to_content_discovery_as_organization_disabled=None,
                              contribution_to_content_discovery_disabled=None,
                              microsoft_graph_entity_id=None,
                              created_date_time=None,
                              last_modified_date_time=None,
                              application=None,
                              device=None,
                              user=None,
                              availability=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if contribution_to_content_discovery_as_organization_disabled is not None:
        body['contribution_to_content_discovery_as_organization_disabled'] = contribution_to_content_discovery_as_organization_disabled
    if contribution_to_content_discovery_disabled is not None:
        body['contribution_to_content_discovery_disabled'] = contribution_to_content_discovery_disabled
    body['shift_preferences'] = {}
    if microsoft_graph_entity_id is not None:
        body['shift_preferences']['id'] = microsoft_graph_entity_id
    if created_date_time is not None:
        body['shift_preferences']['created_date_time'] = created_date_time
    if last_modified_date_time is not None:
        body['shift_preferences']['last_modified_date_time'] = last_modified_date_time
    body['shift_preferences']['last_modified_by'] = {}
    if application is not None:
        body['shift_preferences']['last_modified_by']['application'] = application
    if device is not None:
        body['shift_preferences']['last_modified_by']['device'] = device
    if user is not None:
        body['shift_preferences']['last_modified_by']['user'] = user
    if len(body['shift_preferences']['last_modified_by']) == 0:
        del body['shift_preferences']['last_modified_by']
    if availability is not None:
        body['shift_preferences']['availability'] = availability
    if len(body['shift_preferences']) == 0:
        del body['shift_preferences']
    return client.update_settings(user_id=user_id,
                                  body=body)


def users_user_outlook_create_master_category(client,
                                              user_id,
                                              id_=None,
                                              color=None,
                                              display_name=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if color is not None:
        body['color'] = color
    if display_name is not None:
        body['display_name'] = display_name
    return client.create_master_categories(user_id=user_id,
                                           body=body)


def users_user_outlook_delete_master_category(client,
                                              user_id,
                                              outlook_category_id,
                                              if_match=None):
    return client.delete_master_categories(user_id=user_id,
                                           outlook_category_id=outlook_category_id,
                                           if_match=if_match)


def users_user_outlook_list_master_category(client,
                                            user_id,
                                            orderby=None,
                                            select=None,
                                            expand=None):
    return client.list_master_categories(user_id=user_id,
                                         orderby=orderby,
                                         select=select,
                                         expand=expand)


def users_user_outlook_show_master_category(client,
                                            user_id,
                                            outlook_category_id,
                                            select=None,
                                            expand=None):
    return client.get_master_categories(user_id=user_id,
                                        outlook_category_id=outlook_category_id,
                                        select=select,
                                        expand=expand)


def users_user_outlook_update_master_category(client,
                                              user_id,
                                              outlook_category_id,
                                              id_=None,
                                              color=None,
                                              display_name=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if color is not None:
        body['color'] = color
    if display_name is not None:
        body['display_name'] = display_name
    return client.update_master_categories(user_id=user_id,
                                           outlook_category_id=outlook_category_id,
                                           body=body)


def users_user_setting_delete_shift_preference(client,
                                               user_id,
                                               if_match=None):
    return client.delete_shift_preferences(user_id=user_id,
                                           if_match=if_match)


def users_user_setting_show_shift_preference(client,
                                             user_id,
                                             select=None,
                                             expand=None):
    return client.get_shift_preferences(user_id=user_id,
                                        select=select,
                                        expand=expand)


def users_user_setting_update_shift_preference(client,
                                               user_id,
                                               id_=None,
                                               created_date_time=None,
                                               last_modified_date_time=None,
                                               application=None,
                                               device=None,
                                               user=None,
                                               availability=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if last_modified_date_time is not None:
        body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    if application is not None:
        body['last_modified_by']['application'] = application
    if device is not None:
        body['last_modified_by']['device'] = device
    if user is not None:
        body['last_modified_by']['user'] = user
    if len(body['last_modified_by']) == 0:
        del body['last_modified_by']
    if availability is not None:
        body['availability'] = availability
    return client.update_shift_preferences(user_id=user_id,
                                           body=body)
