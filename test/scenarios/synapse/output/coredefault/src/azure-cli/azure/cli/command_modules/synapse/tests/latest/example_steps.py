# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long


from .. import try_manual


# EXAMPLE: /Workspaces/put/Create or update a workspace
@try_manual
def step_workspace_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse workspace create '
             '--resource-group "{rg_2}" '
             '--type "SystemAssigned" '
             '--location "East US" '
             '--default-data-lake-storage account-url="https://accountname.dfs.core.windows.net" filesystem="default" '
             '--managed-resource-group-name "workspaceManagedResourceGroupUnique" '
             '--managed-virtual-network "default" '
             '--sql-administrator-login "login" '
             '--sql-administrator-login-password "password" '
             '--tags key="value" '
             '--name "{myWorkspace2}"',
             checks=[])
    test.cmd('az synapse workspace wait --created '
             '--resource-group "{rg_2}" '
             '--name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /Workspaces/get/Get a workspace
@try_manual
def step_workspace_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse workspace show '
             '--resource-group "{rg_2}" '
             '--name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /Workspaces/get/List workspaces in resource group
@try_manual
def step_workspace_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse workspace list '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /Workspaces/get/List workspaces in subscription
@try_manual
def step_workspace_list2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse workspace list '
             '-g ""',
             checks=checks)


# EXAMPLE: /Workspaces/patch/Update a workspace
@try_manual
def step_workspace_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse workspace update '
             '--resource-group "{rg_2}" '
             '--name "{myWorkspace2}" '
             '--type "SystemAssigned" '
             '--sql-administrator-login-password "password" '
             '--tags key="value"',
             checks=checks)


# EXAMPLE: /BigDataPools/put/Create or update a Big Data pool
@try_manual
def step_big_data_pool_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse big-data-pool create '
             '--location "West US 2" '
             '--auto-pause delay-in-minutes=15 enabled=true '
             '--auto-scale enabled=true max-node-count=50 min-node-count=3 '
             '--default-spark-log-folder "/logs" '
             '--library-requirements content="" filename="requirements.txt" '
             '--node-count 4 '
             '--node-size "Medium" '
             '--node-size-family "MemoryOptimized" '
             '--spark-events-folder "/events" '
             '--spark-version "2.4" '
             '--tags key="value" '
             '--name "{myBigDataPool}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])
    test.cmd('az synapse big-data-pool wait --created '
             '--name "{myBigDataPool}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /BigDataPools/get/Get a Big Data pool
@try_manual
def step_big_data_pool_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse big-data-pool show '
             '--name "{myBigDataPool}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /BigDataPools/get/List Big Data pools in a workspace
@try_manual
def step_big_data_pool_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse big-data-pool list '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /BigDataPools/patch/Update a Big Data pool
@try_manual
def step_big_data_pool_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse big-data-pool update '
             '--name "{myBigDataPool}" '
             '--tags key="value" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /BigDataPools/delete/Delete a Big Data pool
@try_manual
def step_big_data_pool_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse big-data-pool delete -y '
             '--name "{myBigDataPool}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimes/put/Create integration runtime
@try_manual
def step_integration_runtime_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime create '
             '--properties "{{\\"type\\":\\"SelfHosted\\",\\"description\\":\\"A selfhosted integration runtime\\"}}" '
             '--name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimes/get/Get integration runtime
@try_manual
def step_integration_runtime_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime show '
             '--name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimes/get/List integration runtimes
@try_manual
def step_integration_runtime_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime list '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimes/patch/Update integration runtime
@try_manual
def step_integration_runtime_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime update '
             '--name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--auto-update "Off" '
             '--update-delay-offset "\\"PT3H\\"" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimes/post/Start integration runtime
@try_manual
def step_integration_runtime_start(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime start '
             '--name "{myIntegrationRuntime2}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimes/post/Stop integration runtime
@try_manual
def step_integration_runtime_stop(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime stop '
             '--name "{myIntegrationRuntime2}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimes/post/Upgrade integration runtime
@try_manual
def step_integration_runtime_upgrade(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime upgrade '
             '--name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimeAuthKeys/post/List auth keys
@try_manual
def step_integration_runtime_auth_key_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime-auth-key list '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimeAuthKeys/post/Regenerate auth key
@try_manual
def step_integration_runtime_auth_key_regenerate(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime-auth-key regenerate '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--key-name "authKey2" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimeConnectionInfos/post/Get connection info
@try_manual
def step_integration_runtime_connection_info_get(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime-connection-info get '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimeCredentials/post/Sync credentials
@try_manual
def step_integration_runtime_credentials_sync(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime-credentials sync '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimeMonitoringData/post/Get monitoring data
@try_manual
def step_integration_runtime_monitoring_data_get(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime-monitoring-data get '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimeNodeIpAddress/post/Get integration runtime node IP address
@try_manual
def step_integration_runtime_node_ip_address_get(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime-node-ip-address get '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--node-name "Node_1" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimeNodes/get/Get integration runtime node
@try_manual
def step_integration_runtime_node_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime-node show '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--node-name "Node_1" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimeNodes/patch/Update integration runtime node
@try_manual
def step_integration_runtime_node_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime-node update '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--node-name "Node_1" '
             '--resource-group "{rg_17}" '
             '--concurrent-jobs-limit 2 '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimeNodes/delete/Delete integration runtime node
@try_manual
def step_integration_runtime_node_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime-node delete -y '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--node-name "Node_1" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimeObjectMetadata/post/Get integration runtime object metadata
@try_manual
def step_integration_runtime_object_metadata_get(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime-object-metadata get '
             '--metadata-path "ssisFolders" '
             '--integration-runtime-name "{myIntegrationRuntime3}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimeObjectMetadata/post/Refresh object metadata
@try_manual
def step_integration_runtime_object_metadata_refresh(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime-object-metadata refresh '
             '--integration-runtime-name "{myIntegrationRuntime3}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimeStatus/post/Get status
@try_manual
def step_integration_runtime_status_get(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime-status get '
             '--integration-runtime-name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IntegrationRuntimes/delete/Delete integration runtime
@try_manual
def step_integration_runtime_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse integration-runtime delete -y '
             '--name "{myIntegrationRuntime}" '
             '--resource-group "{rg_17}" '
             '--workspace-name "{myWorkspace20}"',
             checks=checks)


# EXAMPLE: /IpFirewallRules/put/Create an IP firewall rule
@try_manual
def step_ip_firewall_rule_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse ip-firewall-rule create '
             '--end-ip-address "10.0.0.254" '
             '--start-ip-address "10.0.0.0" '
             '--resource-group "{rg}" '
             '--rule-name "ExampleIpFirewallRule" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /IpFirewallRules/get/Create an IP firewall rule
@try_manual
def step_ip_firewall_rule_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse ip-firewall-rule show '
             '--resource-group "{rg}" '
             '--rule-name "ExampleIpFirewallRule" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /IpFirewallRules/get/List IP firewall rules in a workspace
@try_manual
def step_ip_firewall_rule_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse ip-firewall-rule list '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /IpFirewallRules/post/Replace all IP firewall rules in a workspace
@try_manual
def step_ip_firewall_rule_replace_all(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse ip-firewall-rule replace-all '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}" '
             '--ip-firewall-rules "{{\\"AnotherExampleFirewallRule\\":{{\\"endIpAddress\\":\\"10.0.1.254\\",\\"startIpA'
             'ddress\\":\\"10.0.1.0\\"}},\\"ExampleFirewallRule\\":{{\\"endIpAddress\\":\\"10.0.0.254\\",\\"startIpAddr'
             'ess\\":\\"10.0.0.0\\"}}}}"',
             checks=checks)


# EXAMPLE: /IpFirewallRules/delete/Delete an IP firewall rule from a workspace
@try_manual
def step_ip_firewall_rule_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse ip-firewall-rule delete -y '
             '--resource-group "{rg}" '
             '--rule-name "ExampleIpFirewallRule" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Operations/get/Get azure async operation header result
@try_manual
def step_operation_show_azure_async_header_result(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse operation show-azure-async-header-result '
             '--operation-id "01234567-89ab-4def-0123-456789abcdef" '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /Operations/get/Get location header result
@try_manual
def step_operation_show_location_header_result(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse operation show-location-header-result '
             '--operation-id "01234567-89ab-4def-0123-456789abcdef" '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/put/Approve private endpoint connection
@try_manual
def step_private_endpoint_connection_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse private-endpoint-connection create '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])
    test.cmd('az synapse private-endpoint-connection wait --created '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/get/Get private endpoint connection
@try_manual
def step_private_endpoint_connection_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse private-endpoint-connection show '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/get/List private endpoint connections in workspace
@try_manual
def step_private_endpoint_connection_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse private-endpoint-connection list '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/delete/Delete private endpoint connection
@try_manual
def step_private_endpoint_connection_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse private-endpoint-connection delete -y '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /PrivateLinkHubs/put/Create or update a privateLinkHub
@try_manual
def step_private_link_hub_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse private-link-hub create '
             '--location "East US" '
             '--tags key="value" '
             '--name "{myPrivateLinkHub}" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /PrivateLinkHubs/get/Get a privateLinkHub
@try_manual
def step_private_link_hub_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse private-link-hub show '
             '--name "{myPrivateLinkHub}" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /PrivateLinkHubs/get/List privateLinkHubs in resource group
@try_manual
def step_private_link_hub_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse private-link-hub list '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /PrivateLinkHubs/get/List privateLinkHubs in subscription
@try_manual
def step_private_link_hub_list2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse private-link-hub list '
             '-g ""',
             checks=checks)


# EXAMPLE: /PrivateLinkHubs/patch/Update a privateLinkHub
@try_manual
def step_private_link_hub_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse private-link-hub update '
             '--name "{myPrivateLinkHub}" '
             '--tags key="value" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /PrivateLinkHubs/delete/Delete a privateLinkHub
@try_manual
def step_private_link_hub_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse private-link-hub delete -y '
             '--name "{myPrivateLinkHub}" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /PrivateLinkResources/get/Get private link resources for workspace
@try_manual
def step_private_link_resource_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse private-link-resource list '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /SqlPools/put/Create a SQL Analytics pool
@try_manual
def step_sql_pool_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool create '
             '--resource-group "{rg}" '
             '--location "West US 2" '
             '--collation "" '
             '--create-mode "" '
             '--creation-date "1970-01-01T00:00:00.000Z" '
             '--max-size-bytes 0 '
             '--recoverable-database-id "" '
             '--restore-point-in-time "1970-01-01T00:00:00.000Z" '
             '--source-database-id "" '
             '--sku name="" tier="" '
             '--name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])
    test.cmd('az synapse sql-pool wait --created '
             '--resource-group "{rg}" '
             '--name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /SqlPools/get/Get a SQL Analytics pool
@try_manual
def step_sql_pool_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool show '
             '--resource-group "{rg_4}" '
             '--name "{mySqlPool}" '
             '--workspace-name "{myWorkspace4}"',
             checks=checks)


# EXAMPLE: /SqlPools/get/List SQL Analytics pools in a workspace
@try_manual
def step_sql_pool_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool list '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace3}"',
             checks=checks)


# EXAMPLE: /SqlPools/get/List SQL Analytics pools in a workspace with filter
@try_manual
def step_sql_pool_list2(test, checks=None):
    return step_sql_pool_list(test, checks)


# EXAMPLE: /SqlPools/patch/Update a SQL Analytics pool
@try_manual
def step_sql_pool_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool update '
             '--resource-group "{rg}" '
             '--location "West US 2" '
             '--collation "" '
             '--create-mode "" '
             '--creation-date "1970-01-01T00:00:00.000Z" '
             '--max-size-bytes 0 '
             '--recoverable-database-id "" '
             '--restore-point-in-time "1970-01-01T00:00:00.000Z" '
             '--source-database-id "" '
             '--sku name="" tier="" '
             '--name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /SqlPools/post/Pause a SQL Analytics pool
@try_manual
def step_sql_pool_pause(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool pause '
             '--resource-group "{rg_5}" '
             '--name "{mySqlPool3}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /SqlPools/post/Rename a SQL Analytics pool
@try_manual
def step_sql_pool_rename(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool rename '
             '--id "/subscriptions/{subscription_id}/resourceGroups/{rg_5}/providers/Microsoft.Synapse/workspaces/{myWo'
             'rkspace5}/sqlPools/{mySqlPool4}" '
             '--resource-group "{rg_5}" '
             '--name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /SqlPools/post/Resume a SQL Analytics pool
@try_manual
def step_sql_pool_resume(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool resume '
             '--resource-group "{rg_4}" '
             '--name "{mySqlPool}" '
             '--workspace-name "{myWorkspace4}"',
             checks=checks)


# EXAMPLE: /SqlPoolBlobAuditingPolicies/put/Create or update a database's blob auditing policy with all parameters
@try_manual
def step_sql_pool_blob_auditing_policy_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-blob-auditing-policy create '
             '--audit-actions-and-groups "DATABASE_LOGOUT_GROUP" "DATABASE_ROLE_MEMBER_CHANGE_GROUP" "UPDATE on '
             'database::TestDatabaseName by public" '
             '--is-azure-monitor-target-enabled true '
             '--is-storage-secondary-key-in-use false '
             '--retention-days 6 '
             '--state "Enabled" '
             '--storage-account-access-key "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD234230943284932847645'
             '8/3RSD==" '
             '--storage-account-subscription-id "00000000-1234-0000-5678-000000000000" '
             '--storage-endpoint "https://mystorage.blob.core.windows.net" '
             '--resource-group "{rg_8}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace10}"',
             checks=checks)


# EXAMPLE: /SqlPoolBlobAuditingPolicies/put/Create or update a database's blob auditing policy with minimal parameters
@try_manual
def step_sql_pool_blob_auditing_policy_create2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-blob-auditing-policy create '
             '--state "Enabled" '
             '--storage-account-access-key "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD234230943284932847645'
             '8/3RSD==" '
             '--storage-endpoint "https://mystorage.blob.core.windows.net" '
             '--resource-group "{rg_8}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace10}"',
             checks=checks)


# EXAMPLE: /SqlPoolBlobAuditingPolicies/get/Get blob auditing policy of a SQL Analytics pool
@try_manual
def step_sql_pool_blob_auditing_policy_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-blob-auditing-policy show '
             '--resource-group "{rg_7}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace9}"',
             checks=checks)


# EXAMPLE: /SqlPoolConnectionPolicies/get/Get a connection policy of a SQL Analytics pool
@try_manual
def step_sql_pool_connection_policy_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-connection-policy show '
             '--resource-group "{rg_7}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace9}"',
             checks=checks)


# EXAMPLE: /SqlPoolDataWarehouseUserActivities/get/Get a SQL Analytics pool user activity
@try_manual
def step_sql_pool_data_warehouse_user_activity_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-data-warehouse-user-activity show '
             '--resource-group "{rg_5}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /SqlPoolGeoBackupPolicies/get/Get Sql pool geo backup policy
@try_manual
def step_sql_pool_geo_backup_policy_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-geo-backup-policy show '
             '--resource-group "{rg_6}" '
             '--sql-pool-name "{mySqlPool6}" '
             '--workspace-name "{myWorkspace6}"',
             checks=checks)


# EXAMPLE: /SqlPoolMetadataSyncConfigs/put/Set metadata sync config for a SQL Analytics pool
@try_manual
def step_sql_pool_metadata_sync_config_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-metadata-sync-config create '
             '--enabled true '
             '--resource-group "{rg}" '
             '--sql-pool-name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /SqlPoolMetadataSyncConfigs/get/Get metadata sync config for a SQL Analytics pool
@try_manual
def step_sql_pool_metadata_sync_config_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-metadata-sync-config show '
             '--resource-group "{rg}" '
             '--sql-pool-name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /SqlPoolOperationResults/get/Get the result of an operation on a SQL Analytics pool
@try_manual
def step_sql_pool_operation(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-operation-result show-location-header-result '
             '--operation-id "fedcba98-7654-4210-fedc-ba9876543210" '
             '--resource-group "{rg}" '
             '--sql-pool-name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /SqlPoolOperations/get/List the Sql Analytics pool management operations
@try_manual
def step_sql_pool_operation_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-operation list '
             '--resource-group "{rg_9}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace11}"',
             checks=checks)


# EXAMPLE: /SqlPoolReplicationLinks/get/Lists a Sql Analytic pool's replication links
@try_manual
def step_sql_pool_replication_link_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-replication-link list '
             '--resource-group "{rg_6}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace8}"',
             checks=checks)


# EXAMPLE: /SqlPoolRestorePoints/get/Get a list of restore points of a SQL Analytics pool
@try_manual
def step_sql_pool_restore_point_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-restore-point list '
             '--resource-group "{rg_5}" '
             '--sql-pool-name "{mySqlPool7}" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /SqlPoolRestorePoints/post/Creates Sql pool restore point.
@try_manual
def step_sql_pool_restore_point_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-restore-point create '
             '--restore-point-label "mylabel" '
             '--resource-group "{rg_5}" '
             '--sql-pool-name "{mySqlPool7}" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /SqlPoolSchemas/get/List the schema in a SQL Analytics pool
@try_manual
def step_sql_pool_schema_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-schema list '
             '--resource-group "{rg_11}" '
             '--sql-pool-name "{mySqlPool9}" '
             '--workspace-name "{myWorkspace14}"',
             checks=checks)


# EXAMPLE: /SqlPoolSecurityAlertPolicies/put/Create a Sql pool's threat detection policy with all parameters
@try_manual
def step_sql_pool_security_alert_policy_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-security-alert-policy create '
             '--disabled-alerts "Sql_Injection" "Usage_Anomaly" '
             '--email-account-admins true '
             '--email-addresses "test@microsoft.com" "user@microsoft.com" '
             '--retention-days 6 '
             '--state "Enabled" '
             '--storage-account-access-key "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD234230943284932847645'
             '8/3RSD==" '
             '--storage-endpoint "https://mystorage.blob.core.windows.net" '
             '--resource-group "{rg_16}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace19}"',
             checks=checks)


# EXAMPLE: /SqlPoolSecurityAlertPolicies/put/Update a Sql pool's threat detection policy with minimal parameters
@try_manual
def step_sql_pool_security_alert_policy_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-security-alert-policy update '
             '--state "Enabled" '
             '--resource-group "{rg_16}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace19}"',
             checks=checks)


# EXAMPLE: /SqlPoolSecurityAlertPolicies/get/Get a security alert of a SQL Analytics pool
@try_manual
def step_sql_pool_security_alert_policy_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-security-alert-policy show '
             '--resource-group "{rg_15}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace18}"',
             checks=checks)


# EXAMPLE: /SqlPoolSensitivityLabels/put/Updates the sensitivity label of a given column with all parameters
@try_manual
def step_sql_pool_sensitivity_label_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-sensitivity-label create '
             '--column-name "myColumn" '
             '--information-type "PhoneNumber" '
             '--information-type-id "d22fa6e9-5ee4-3bde-4c2b-a409604c4646" '
             '--label-id "bf91e08c-f4f0-478a-b016-25164b2a65ff" '
             '--label-name "PII" '
             '--resource-group "{rg_11}" '
             '--schema-name "dbo" '
             '--sql-pool-name "{mySqlPool9}" '
             '--table-name "myTable" '
             '--workspace-name "{myWorkspace13}"',
             checks=checks)


# EXAMPLE: /SqlPoolSensitivityLabels/get/Gets the current sensitivity labels of a given SQL Analytics pool
@try_manual
def step_sql_pool_sensitivity_label_list_current(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-sensitivity-label list-current '
             '--resource-group "{rg_11}" '
             '--sql-pool-name "{mySqlPool9}" '
             '--workspace-name "{myWorkspace13}"',
             checks=checks)


# EXAMPLE: /SqlPoolSensitivityLabels/get/Gets the recommended sensitivity labels of a given SQL Analytics pool
@try_manual
def step_sql_pool_sensitivity_label_list_recommended(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-sensitivity-label list-recommended '
             '--resource-group "{rg_11}" '
             '--sql-pool-name "{mySqlPool9}" '
             '--workspace-name "{myWorkspace13}"',
             checks=checks)


# EXAMPLE: /SqlPoolSensitivityLabels/post/Disables sensitivity recommendations on a given column
@try_manual
def step_sql_pool_sensitivity(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-sensitivity-label disable-recommendation '
             '--column-name "myColumn" '
             '--resource-group "{rg_11}" '
             '--schema-name "dbo" '
             '--sql-pool-name "{mySqlPool9}" '
             '--table-name "myTable" '
             '--workspace-name "{myWorkspace13}"',
             checks=checks)


# EXAMPLE: /SqlPoolSensitivityLabels/post/Enables sensitivity recommendations on a given column
@try_manual
def step_sql_pool_sensitivity2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-sensitivity-label enable-recommendation '
             '--column-name "myColumn" '
             '--resource-group "{rg_11}" '
             '--schema-name "dbo" '
             '--sql-pool-name "{mySqlPool9}" '
             '--table-name "myTable" '
             '--workspace-name "{myWorkspace13}"',
             checks=checks)


# EXAMPLE: /SqlPoolSensitivityLabels/delete/Deletes the sensitivity label of a given column
@try_manual
def step_sql_pool_sensitivity_label_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-sensitivity-label delete -y '
             '--column-name "myColumn" '
             '--resource-group "{rg_11}" '
             '--schema-name "dbo" '
             '--sql-pool-name "{mySqlPool9}" '
             '--table-name "myTable" '
             '--workspace-name "{myWorkspace13}"',
             checks=checks)


# EXAMPLE: /SqlPoolTableColumns/get/List the columns in a table of a given schema in a SQL Analytics pool
@try_manual
def step_sql_pool_table_column_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-table-column list '
             '--resource-group "{rg_11}" '
             '--schema-name "dbo" '
             '--sql-pool-name "{mySqlPool9}" '
             '--table-name "table1" '
             '--workspace-name "{myWorkspace14}"',
             checks=checks)


# EXAMPLE: /SqlPoolTables/get/List the tables of a given schema in a SQL Analytics pool
@try_manual
def step_sql_pool_table_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-table list '
             '--resource-group "{rg_11}" '
             '--schema-name "dbo" '
             '--sql-pool-name "{mySqlPool9}" '
             '--workspace-name "{myWorkspace14}"',
             checks=checks)


# EXAMPLE: /SqlPoolTransparentDataEncryptions/put/Create or update a Sql pool's transparent data encryption configuration
@try_manual
def step_sql_pool_transparent_data_encryption_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-transparent-data-encryption create '
             '--status "Enabled" '
             '--resource-group "{rg_4}" '
             '--sql-pool-name "{mySqlPool}" '
             '--workspace-name "{myWorkspace4}"',
             checks=checks)


# EXAMPLE: /SqlPoolTransparentDataEncryptions/get/Get transparent data encryption configuration of a SQL Analytics pool
@try_manual
def step_sql_pool_transparent_data_encryption_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-transparent-data-encryption show '
             '--resource-group "{rg_4}" '
             '--sql-pool-name "{mySqlPool}" '
             '--workspace-name "{myWorkspace4}"',
             checks=checks)


# EXAMPLE: /SqlPoolUsages/get/List the usages of a SQL Analytics pool
@try_manual
def step_sql_pool_usage_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-usage list '
             '--resource-group "{rg_10}" '
             '--sql-pool-name "{mySqlPool8}" '
             '--workspace-name "{myWorkspace12}"',
             checks=checks)


# EXAMPLE: /SqlPoolVulnerabilityAssessmentRuleBaselines/put/Creates or updates a database's vulnerability assessment rule baseline.
@try_manual
def step_sql_pool_vulnerability(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-vulnerability-assessment-rule-baseline create '
             '--baseline-name "default" '
             '--baseline-results result="userA" result="SELECT" '
             '--baseline-results result="userB" result="SELECT" '
             '--baseline-results result="userC" result="SELECT" result="tableId_4" '
             '--resource-group "{rg_12}" '
             '--rule-id "VA1001" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=checks)


# EXAMPLE: /SqlPoolVulnerabilityAssessmentRuleBaselines/delete/Removes a database's vulnerability assessment rule baseline.
@try_manual
def step_sql_pool_vulnerability2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-vulnerability-assessment-rule-baseline delete -y '
             '--baseline-name "default" '
             '--resource-group "{rg_12}" '
             '--rule-id "VA1001" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=checks)


# EXAMPLE: /SqlPoolVulnerabilityAssessments/put/Create a database's vulnerability assessment with all parameters
@try_manual
def step_sql_pool_vulnerability_assessment_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-vulnerability-assessment create '
             '--recurring-scans email-subscription-admins=true emails="email1@mail.com" emails="email2@mail.com" '
             'is-enabled=true '
             '--storage-account-access-key "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" '
             '--storage-container-path "https://myStorage.blob.core.windows.net/vulnerability-assessment/" '
             '--storage-container-sas-key "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" '
             '--resource-group "{rg_12}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=checks)


# EXAMPLE: /SqlPoolVulnerabilityAssessments/put/Create a database's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified
@try_manual
def step_sql_pool_vulnerability_assessment_create2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-vulnerability-assessment create '
             '--storage-account-access-key "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" '
             '--storage-container-path "https://myStorage.blob.core.windows.net/vulnerability-assessment/" '
             '--resource-group "{rg_12}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=checks)


# EXAMPLE: /SqlPoolVulnerabilityAssessments/put/Create a database's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified
@try_manual
def step_sql_pool_vulnerability_assessment_create3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-vulnerability-assessment create '
             '--storage-container-path "https://myStorage.blob.core.windows.net/vulnerability-assessment/" '
             '--storage-container-sas-key "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" '
             '--resource-group "{rg_12}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=checks)


# EXAMPLE: /SqlPoolVulnerabilityAssessments/get/Get a Sql pool's vulnerability assessment
@try_manual
def step_sql_pool_vulnerability_assessment_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-vulnerability-assessment show '
             '--resource-group "{rg_12}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=checks)


# EXAMPLE: /SqlPoolVulnerabilityAssessments/get/Get a vulnerability assessment of a SQL Analytics pool
@try_manual
def step_sql_pool_vulnerability_assessment_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-vulnerability-assessment list '
             '--resource-group "{rg_12}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=checks)


# EXAMPLE: /SqlPoolVulnerabilityAssessments/delete/Remove a database's vulnerability assessment
@try_manual
def step_sql_pool_vulnerability_assessment_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-vulnerability-assessment delete -y '
             '--resource-group "{rg_12}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace15}"',
             checks=checks)


# EXAMPLE: /SqlPoolVulnerabilityAssessmentScans/get/Get a vulnerability scan record of a SQL Analytics pool
@try_manual
def step_sql_pool_vulnerability_assessment_scan_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-vulnerability-assessment-scan list '
             '--resource-group "{rg_13}" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace16}"',
             checks=checks)


# EXAMPLE: /SqlPoolVulnerabilityAssessmentScans/post/Executes a Sql pool's vulnerability assessment scan.
@try_manual
def step_sql_pool_vulnerability3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-vulnerability-assessment-scan initiate-scan '
             '--resource-group "{rg_13}" '
             '--scan-id "scan01" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace16}"',
             checks=checks)


# EXAMPLE: /SqlPoolVulnerabilityAssessmentScans/post/Export a database's vulnerability assessment scan results.
@try_manual
def step_sql_pool_vulnerability_assessment_scan_export(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool-vulnerability-assessment-scan export '
             '--resource-group "{rg_14}" '
             '--scan-id "scan001" '
             '--sql-pool-name "{mySqlPool5}" '
             '--workspace-name "{myWorkspace17}"',
             checks=checks)


# EXAMPLE: /SqlPools/delete/Delete a SQL Analytics pool
@try_manual
def step_sql_pool_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse sql-pool delete -y '
             '--resource-group "{rg}" '
             '--name "{mySqlPool2}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /WorkspaceAadAdmins/put/Create or update workspace active directory admin
@try_manual
def step_workspace_aad_admin_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse workspace-aad-admin create '
             '--administrator-type "ActiveDirectory" '
             '--login "bob@contoso.com" '
             '--sid "c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c" '
             '--tenant-id "c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c" '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /WorkspaceAadAdmins/get/Get workspace active directory admin
@try_manual
def step_workspace_aad_admin_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse workspace-aad-admin show '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /WorkspaceAadAdmins/delete/Delete workspace active directory admin
@try_manual
def step_workspace_aad_admin_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse workspace-aad-admin delete -y '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /WorkspaceManagedIdentitySqlControlSettings/put/Create or update managed identity sql control settings
@try_manual
def step_workspace_managed_identity(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse workspace-managed-identity-sql-control-setting create '
             '--desired-state "Enabled" '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /WorkspaceManagedIdentitySqlControlSettings/get/Get managed identity sql control settings
@try_manual
def step_workspace_managed_identity2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse workspace-managed-identity-sql-control-setting show '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /Workspaces/delete/Delete a workspace
@try_manual
def step_workspace_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az synapse workspace delete -y '
             '--resource-group "{rg_2}" '
             '--name "{myWorkspace2}"',
             checks=checks)
