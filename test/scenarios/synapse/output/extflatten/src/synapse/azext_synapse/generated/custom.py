# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def synapse_big_data_pool_list(client,
                               resource_group_name,
                               workspace_name):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name)


def synapse_big_data_pool_show(client,
                               resource_group_name,
                               workspace_name,
                               big_data_pool_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      big_data_pool_name=big_data_pool_name)


def synapse_big_data_pool_create(client,
                                 resource_group_name,
                                 workspace_name,
                                 big_data_pool_name,
                                 location,
                                 force=None,
                                 tags=None,
                                 provisioning_state=None,
                                 auto_scale=None,
                                 creation_date=None,
                                 auto_pause=None,
                                 spark_events_folder=None,
                                 node_count=None,
                                 library_requirements=None,
                                 spark_version=None,
                                 default_spark_log_folder=None,
                                 node_size=None,
                                 node_size_family=None,
                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       big_data_pool_name=big_data_pool_name,
                       force=force,
                       tags=tags,
                       location=location,
                       provisioning_state=provisioning_state,
                       auto_scale=auto_scale,
                       creation_date=creation_date,
                       auto_pause=auto_pause,
                       spark_events_folder=spark_events_folder,
                       node_count=node_count,
                       library_requirements=library_requirements,
                       spark_version=spark_version,
                       default_spark_log_folder=default_spark_log_folder,
                       node_size=node_size,
                       node_size_family=node_size_family)


def synapse_big_data_pool_update(client,
                                 resource_group_name,
                                 workspace_name,
                                 big_data_pool_name,
                                 tags=None):
    return client.update(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         big_data_pool_name=big_data_pool_name,
                         tags=tags)


def synapse_big_data_pool_delete(client,
                                 resource_group_name,
                                 workspace_name,
                                 big_data_pool_name,
                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       big_data_pool_name=big_data_pool_name)


def synapse_operation_show_azure_async_header_result(client,
                                                     resource_group_name,
                                                     workspace_name,
                                                     operation_id):
    return client.get_azure_async_header_result(resource_group_name=resource_group_name,
                                                workspace_name=workspace_name,
                                                operation_id=operation_id)


def synapse_operation_show_location_header_result(client,
                                                  resource_group_name,
                                                  workspace_name,
                                                  operation_id):
    return client.get_location_header_result(resource_group_name=resource_group_name,
                                             workspace_name=workspace_name,
                                             operation_id=operation_id)


def synapse_ip_firewall_rule_list(client,
                                  resource_group_name,
                                  workspace_name):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name)


def synapse_ip_firewall_rule_show(client,
                                  resource_group_name,
                                  workspace_name,
                                  rule_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      rule_name=rule_name)


def synapse_ip_firewall_rule_create(client,
                                    resource_group_name,
                                    workspace_name,
                                    rule_name,
                                    end_ip_address=None,
                                    start_ip_address=None,
                                    no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       rule_name=rule_name,
                       end_ip_address=end_ip_address,
                       start_ip_address=start_ip_address)


def synapse_ip_firewall_rule_update(client,
                                    resource_group_name,
                                    workspace_name,
                                    rule_name,
                                    end_ip_address=None,
                                    start_ip_address=None,
                                    no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       rule_name=rule_name,
                       end_ip_address=end_ip_address,
                       start_ip_address=start_ip_address)


def synapse_ip_firewall_rule_delete(client,
                                    resource_group_name,
                                    workspace_name,
                                    rule_name,
                                    no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       rule_name=rule_name)


def synapse_ip_firewall_rule_replace_all(client,
                                         resource_group_name,
                                         workspace_name,
                                         ip_firewall_rules=None,
                                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_replace_all,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       ip_firewall_rules=ip_firewall_rules)


def synapse_sql_pool_list(client,
                          resource_group_name,
                          workspace_name):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name)


def synapse_sql_pool_show(client,
                          resource_group_name,
                          workspace_name,
                          sql_pool_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      sql_pool_name=sql_pool_name)


def synapse_sql_pool_create(client,
                            resource_group_name,
                            workspace_name,
                            sql_pool_name,
                            location,
                            tags=None,
                            sku=None,
                            max_size_bytes=None,
                            collation=None,
                            source_database_id=None,
                            recoverable_database_id=None,
                            provisioning_state=None,
                            status=None,
                            restore_point_in_time=None,
                            create_mode=None,
                            creation_date=None,
                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       sql_pool_name=sql_pool_name,
                       tags=tags,
                       location=location,
                       sku=sku,
                       max_size_bytes=max_size_bytes,
                       collation=collation,
                       source_database_id=source_database_id,
                       recoverable_database_id=recoverable_database_id,
                       provisioning_state=provisioning_state,
                       status=status,
                       restore_point_in_time=restore_point_in_time,
                       create_mode=create_mode,
                       creation_date=creation_date)


def synapse_sql_pool_update(client,
                            resource_group_name,
                            workspace_name,
                            sql_pool_name,
                            tags=None,
                            location=None,
                            sku=None,
                            max_size_bytes=None,
                            collation=None,
                            source_database_id=None,
                            recoverable_database_id=None,
                            provisioning_state=None,
                            status=None,
                            restore_point_in_time=None,
                            create_mode=None,
                            creation_date=None):
    return client.update(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         sql_pool_name=sql_pool_name,
                         tags=tags,
                         location=location,
                         sku=sku,
                         max_size_bytes=max_size_bytes,
                         collation=collation,
                         source_database_id=source_database_id,
                         recoverable_database_id=recoverable_database_id,
                         provisioning_state=provisioning_state,
                         status=status,
                         restore_point_in_time=restore_point_in_time,
                         create_mode=create_mode,
                         creation_date=creation_date)


def synapse_sql_pool_delete(client,
                            resource_group_name,
                            workspace_name,
                            sql_pool_name,
                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       sql_pool_name=sql_pool_name)


def synapse_sql_pool_pause(client,
                           resource_group_name,
                           workspace_name,
                           sql_pool_name,
                           no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_pause,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       sql_pool_name=sql_pool_name)


def synapse_sql_pool_rename(client,
                            resource_group_name,
                            workspace_name,
                            sql_pool_name,
                            id_):
    return client.rename(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         sql_pool_name=sql_pool_name,
                         id=id_)


def synapse_sql_pool_resume(client,
                            resource_group_name,
                            workspace_name,
                            sql_pool_name,
                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_resume,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       sql_pool_name=sql_pool_name)


def synapse_sql_pool_metadata_sync_config_show(client,
                                               resource_group_name,
                                               workspace_name,
                                               sql_pool_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      sql_pool_name=sql_pool_name)


def synapse_sql_pool_metadata_sync_config_create(client,
                                                 resource_group_name,
                                                 workspace_name,
                                                 sql_pool_name,
                                                 enabled=None):
    return client.create(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         sql_pool_name=sql_pool_name,
                         enabled=enabled)


def synapse_sql_pool_operation_result_show_location_header_result(client,
                                                                  resource_group_name,
                                                                  workspace_name,
                                                                  sql_pool_name,
                                                                  operation_id):
    return client.get_location_header_result(resource_group_name=resource_group_name,
                                             workspace_name=workspace_name,
                                             sql_pool_name=sql_pool_name,
                                             operation_id=operation_id)


def synapse_sql_pool_geo_backup_policy_show(client,
                                            resource_group_name,
                                            workspace_name,
                                            sql_pool_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      sql_pool_name=sql_pool_name,
                      geo_backup_policy_name="Default")


def synapse_sql_pool_data_warehouse_user_activity_show(client,
                                                       resource_group_name,
                                                       workspace_name,
                                                       sql_pool_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      sql_pool_name=sql_pool_name,
                      data_warehouse_user_activity_name="current")


def synapse_sql_pool_restore_point_list(client,
                                        resource_group_name,
                                        workspace_name,
                                        sql_pool_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       sql_pool_name=sql_pool_name)


def synapse_sql_pool_restore_point_create(client,
                                          resource_group_name,
                                          workspace_name,
                                          sql_pool_name,
                                          restore_point_label):
    return client.begin_create(resource_group_name=resource_group_name,
                               workspace_name=workspace_name,
                               sql_pool_name=sql_pool_name,
                               restore_point_label=restore_point_label)


def synapse_sql_pool_replication_link_list(client,
                                           resource_group_name,
                                           workspace_name,
                                           sql_pool_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       sql_pool_name=sql_pool_name)


def synapse_sql_pool_transparent_data_encryption_show(client,
                                                      resource_group_name,
                                                      workspace_name,
                                                      sql_pool_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      sql_pool_name=sql_pool_name,
                      transparent_data_encryption_name="current")


def synapse_sql_pool_transparent_data_encryption_create(client,
                                                        resource_group_name,
                                                        workspace_name,
                                                        sql_pool_name,
                                                        status=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   transparent_data_encryption_name="current",
                                   status=status)


def synapse_sql_pool_transparent_data_encryption_update(client,
                                                        resource_group_name,
                                                        workspace_name,
                                                        sql_pool_name,
                                                        status=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   transparent_data_encryption_name="current",
                                   status=status)


def synapse_sql_pool_blob_auditing_policy_show(client,
                                               resource_group_name,
                                               workspace_name,
                                               sql_pool_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      sql_pool_name=sql_pool_name)


def synapse_sql_pool_blob_auditing_policy_create(client,
                                                 resource_group_name,
                                                 workspace_name,
                                                 sql_pool_name,
                                                 state=None,
                                                 storage_endpoint=None,
                                                 storage_account_access_key=None,
                                                 retention_days=None,
                                                 audit_actions_and_groups=None,
                                                 storage_account_subscription_id=None,
                                                 is_storage_secondary_key_in_use=None,
                                                 is_azure_monitor_target_enabled=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   state=state,
                                   storage_endpoint=storage_endpoint,
                                   storage_account_access_key=storage_account_access_key,
                                   retention_days=retention_days,
                                   audit_actions_and_groups=audit_actions_and_groups,
                                   storage_account_subscription_id=storage_account_subscription_id,
                                   is_storage_secondary_key_in_use=is_storage_secondary_key_in_use,
                                   is_azure_monitor_target_enabled=is_azure_monitor_target_enabled)


def synapse_sql_pool_blob_auditing_policy_update(client,
                                                 resource_group_name,
                                                 workspace_name,
                                                 sql_pool_name,
                                                 state=None,
                                                 storage_endpoint=None,
                                                 storage_account_access_key=None,
                                                 retention_days=None,
                                                 audit_actions_and_groups=None,
                                                 storage_account_subscription_id=None,
                                                 is_storage_secondary_key_in_use=None,
                                                 is_azure_monitor_target_enabled=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   state=state,
                                   storage_endpoint=storage_endpoint,
                                   storage_account_access_key=storage_account_access_key,
                                   retention_days=retention_days,
                                   audit_actions_and_groups=audit_actions_and_groups,
                                   storage_account_subscription_id=storage_account_subscription_id,
                                   is_storage_secondary_key_in_use=is_storage_secondary_key_in_use,
                                   is_azure_monitor_target_enabled=is_azure_monitor_target_enabled)


def synapse_sql_pool_operation_list(client,
                                    resource_group_name,
                                    workspace_name,
                                    sql_pool_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       sql_pool_name=sql_pool_name)


def synapse_sql_pool_usage_list(client,
                                resource_group_name,
                                workspace_name,
                                sql_pool_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       sql_pool_name=sql_pool_name)


def synapse_sql_pool_sensitivity_label_create(client,
                                              resource_group_name,
                                              workspace_name,
                                              sql_pool_name,
                                              schema_name,
                                              table_name,
                                              column_name,
                                              label_name=None,
                                              label_id=None,
                                              information_type=None,
                                              information_type_id=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   schema_name=schema_name,
                                   table_name=table_name,
                                   column_name=column_name,
                                   label_name=label_name,
                                   label_id=label_id,
                                   information_type=information_type,
                                   information_type_id=information_type_id)


def synapse_sql_pool_sensitivity_label_update(client,
                                              resource_group_name,
                                              workspace_name,
                                              sql_pool_name,
                                              schema_name,
                                              table_name,
                                              column_name,
                                              label_name=None,
                                              label_id=None,
                                              information_type=None,
                                              information_type_id=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   schema_name=schema_name,
                                   table_name=table_name,
                                   column_name=column_name,
                                   label_name=label_name,
                                   label_id=label_id,
                                   information_type=information_type,
                                   information_type_id=information_type_id)


def synapse_sql_pool_sensitivity_label_delete(client,
                                              resource_group_name,
                                              workspace_name,
                                              sql_pool_name,
                                              schema_name,
                                              table_name,
                                              column_name):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         sql_pool_name=sql_pool_name,
                         schema_name=schema_name,
                         table_name=table_name,
                         column_name=column_name)


def synapse_sql_pool_sensitivity_label_disable_recommendation(client,
                                                              resource_group_name,
                                                              workspace_name,
                                                              sql_pool_name,
                                                              schema_name,
                                                              table_name,
                                                              column_name):
    return client.disable_recommendation(resource_group_name=resource_group_name,
                                         workspace_name=workspace_name,
                                         sql_pool_name=sql_pool_name,
                                         schema_name=schema_name,
                                         table_name=table_name,
                                         column_name=column_name)


def synapse_sql_pool_sensitivity_label_enable_recommendation(client,
                                                             resource_group_name,
                                                             workspace_name,
                                                             sql_pool_name,
                                                             schema_name,
                                                             table_name,
                                                             column_name):
    return client.enable_recommendation(resource_group_name=resource_group_name,
                                        workspace_name=workspace_name,
                                        sql_pool_name=sql_pool_name,
                                        schema_name=schema_name,
                                        table_name=table_name,
                                        column_name=column_name)


def synapse_sql_pool_sensitivity_label_list_current(client,
                                                    resource_group_name,
                                                    workspace_name,
                                                    sql_pool_name,
                                                    filter_=None):
    return client.list_current(resource_group_name=resource_group_name,
                               workspace_name=workspace_name,
                               sql_pool_name=sql_pool_name,
                               filter=filter_)


def synapse_sql_pool_sensitivity_label_list_recommended(client,
                                                        resource_group_name,
                                                        workspace_name,
                                                        sql_pool_name,
                                                        include_disabled_recommendations=None,
                                                        skip_token=None,
                                                        filter_=None):
    return client.list_recommended(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   include_disabled_recommendations=include_disabled_recommendations,
                                   skip_token=skip_token,
                                   filter=filter_)


def synapse_sql_pool_schema_list(client,
                                 resource_group_name,
                                 workspace_name,
                                 sql_pool_name,
                                 filter_=None):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       sql_pool_name=sql_pool_name,
                       filter=filter_)


def synapse_sql_pool_table_list(client,
                                resource_group_name,
                                workspace_name,
                                sql_pool_name,
                                schema_name,
                                filter_=None):
    return client.list_by_schema(resource_group_name=resource_group_name,
                                 workspace_name=workspace_name,
                                 sql_pool_name=sql_pool_name,
                                 schema_name=schema_name,
                                 filter=filter_)


def synapse_sql_pool_table_column_list(client,
                                       resource_group_name,
                                       workspace_name,
                                       sql_pool_name,
                                       schema_name,
                                       table_name,
                                       filter_=None):
    return client.list_by_table_name(resource_group_name=resource_group_name,
                                     workspace_name=workspace_name,
                                     sql_pool_name=sql_pool_name,
                                     schema_name=schema_name,
                                     table_name=table_name,
                                     filter=filter_)


def synapse_sql_pool_connection_policy_show(client,
                                            resource_group_name,
                                            workspace_name,
                                            sql_pool_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      sql_pool_name=sql_pool_name,
                      connection_policy_name="default")


def synapse_sql_pool_vulnerability_assessment_list(client,
                                                   resource_group_name,
                                                   workspace_name,
                                                   sql_pool_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       sql_pool_name=sql_pool_name)


def synapse_sql_pool_vulnerability_assessment_show(client,
                                                   resource_group_name,
                                                   workspace_name,
                                                   sql_pool_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      sql_pool_name=sql_pool_name,
                      vulnerability_assessment_name="default")


def synapse_sql_pool_vulnerability_assessment_create(client,
                                                     resource_group_name,
                                                     workspace_name,
                                                     sql_pool_name,
                                                     storage_container_path=None,
                                                     storage_container_sas_key=None,
                                                     storage_account_access_key=None,
                                                     recurring_scans=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   vulnerability_assessment_name="default",
                                   storage_container_path=storage_container_path,
                                   storage_container_sas_key=storage_container_sas_key,
                                   storage_account_access_key=storage_account_access_key,
                                   recurring_scans=recurring_scans)


def synapse_sql_pool_vulnerability_assessment_update(client,
                                                     resource_group_name,
                                                     workspace_name,
                                                     sql_pool_name,
                                                     storage_container_path=None,
                                                     storage_container_sas_key=None,
                                                     storage_account_access_key=None,
                                                     recurring_scans=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   vulnerability_assessment_name="default",
                                   storage_container_path=storage_container_path,
                                   storage_container_sas_key=storage_container_sas_key,
                                   storage_account_access_key=storage_account_access_key,
                                   recurring_scans=recurring_scans)


def synapse_sql_pool_vulnerability_assessment_delete(client,
                                                     resource_group_name,
                                                     workspace_name,
                                                     sql_pool_name):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         sql_pool_name=sql_pool_name,
                         vulnerability_assessment_name="default")


def synapse_sql_pool_vulnerability_assessment_scan_list(client,
                                                        resource_group_name,
                                                        workspace_name,
                                                        sql_pool_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       sql_pool_name=sql_pool_name,
                       vulnerability_assessment_name="default")


def synapse_sql_pool_vulnerability_assessment_scan_export(client,
                                                          resource_group_name,
                                                          workspace_name,
                                                          sql_pool_name,
                                                          scan_id):
    return client.export(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         sql_pool_name=sql_pool_name,
                         vulnerability_assessment_name="default",
                         scan_id=scan_id)


def synapse_sql_pool_vulnerability_assessment_scan_initiate_scan(client,
                                                                 resource_group_name,
                                                                 workspace_name,
                                                                 sql_pool_name,
                                                                 scan_id):
    return client.begin_initiate_scan(resource_group_name=resource_group_name,
                                      workspace_name=workspace_name,
                                      sql_pool_name=sql_pool_name,
                                      vulnerability_assessment_name="default",
                                      scan_id=scan_id)


def synapse_sql_pool_security_alert_policy_show(client,
                                                resource_group_name,
                                                workspace_name,
                                                sql_pool_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      sql_pool_name=sql_pool_name,
                      security_alert_policy_name="default")


def synapse_sql_pool_security_alert_policy_create(client,
                                                  resource_group_name,
                                                  workspace_name,
                                                  sql_pool_name,
                                                  state=None,
                                                  disabled_alerts=None,
                                                  email_addresses=None,
                                                  email_account_admins=None,
                                                  storage_endpoint=None,
                                                  storage_account_access_key=None,
                                                  retention_days=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   security_alert_policy_name="default",
                                   state=state,
                                   disabled_alerts=disabled_alerts,
                                   email_addresses=email_addresses,
                                   email_account_admins=email_account_admins,
                                   storage_endpoint=storage_endpoint,
                                   storage_account_access_key=storage_account_access_key,
                                   retention_days=retention_days)


def synapse_sql_pool_security_alert_policy_update(client,
                                                  resource_group_name,
                                                  workspace_name,
                                                  sql_pool_name,
                                                  state=None,
                                                  disabled_alerts=None,
                                                  email_addresses=None,
                                                  email_account_admins=None,
                                                  storage_endpoint=None,
                                                  storage_account_access_key=None,
                                                  retention_days=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   security_alert_policy_name="default",
                                   state=state,
                                   disabled_alerts=disabled_alerts,
                                   email_addresses=email_addresses,
                                   email_account_admins=email_account_admins,
                                   storage_endpoint=storage_endpoint,
                                   storage_account_access_key=storage_account_access_key,
                                   retention_days=retention_days)


def synapse_sql_pool_vulnerability_assessment_rule_baseline_create(client,
                                                                   resource_group_name,
                                                                   workspace_name,
                                                                   sql_pool_name,
                                                                   rule_id,
                                                                   baseline_name,
                                                                   baseline_results=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   vulnerability_assessment_name="default",
                                   rule_id=rule_id,
                                   baseline_name=baseline_name,
                                   baseline_results=baseline_results)


def synapse_sql_pool_vulnerability_assessment_rule_baseline_update(client,
                                                                   resource_group_name,
                                                                   workspace_name,
                                                                   sql_pool_name,
                                                                   rule_id,
                                                                   baseline_name,
                                                                   baseline_results=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   sql_pool_name=sql_pool_name,
                                   vulnerability_assessment_name="default",
                                   rule_id=rule_id,
                                   baseline_name=baseline_name,
                                   baseline_results=baseline_results)


def synapse_sql_pool_vulnerability_assessment_rule_baseline_delete(client,
                                                                   resource_group_name,
                                                                   workspace_name,
                                                                   sql_pool_name,
                                                                   rule_id,
                                                                   baseline_name):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         sql_pool_name=sql_pool_name,
                         vulnerability_assessment_name="default",
                         rule_id=rule_id,
                         baseline_name=baseline_name)


def synapse_workspace_list(client,
                           resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def synapse_workspace_show(client,
                           resource_group_name,
                           workspace_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def synapse_workspace_create(client,
                             resource_group_name,
                             workspace_name,
                             location,
                             tags=None,
                             default_data_lake_storage=None,
                             sql_administrator_login_password=None,
                             managed_resource_group_name=None,
                             sql_administrator_login=None,
                             connectivity_endpoints=None,
                             managed_virtual_network=None,
                             private_endpoint_connections=None,
                             compute_subnet_id=None,
                             type_=None,
                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       tags=tags,
                       location=location,
                       default_data_lake_storage=default_data_lake_storage,
                       sql_administrator_login_password=sql_administrator_login_password,
                       managed_resource_group_name=managed_resource_group_name,
                       sql_administrator_login=sql_administrator_login,
                       connectivity_endpoints=connectivity_endpoints,
                       managed_virtual_network=managed_virtual_network,
                       private_endpoint_connections=private_endpoint_connections,
                       compute_subnet_id=compute_subnet_id,
                       type=type_)


def synapse_workspace_update(client,
                             resource_group_name,
                             workspace_name,
                             tags=None,
                             sql_administrator_login_password=None,
                             type_=None,
                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       tags=tags,
                       sql_administrator_login_password=sql_administrator_login_password,
                       type=type_)


def synapse_workspace_delete(client,
                             resource_group_name,
                             workspace_name,
                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def synapse_workspace_aad_admin_show(client,
                                     resource_group_name,
                                     workspace_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def synapse_workspace_aad_admin_create(client,
                                       resource_group_name,
                                       workspace_name,
                                       tenant_id=None,
                                       login=None,
                                       administrator_type=None,
                                       sid=None,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       tenant_id=tenant_id,
                       login=login,
                       administrator_type=administrator_type,
                       sid=sid)


def synapse_workspace_aad_admin_update(client,
                                       resource_group_name,
                                       workspace_name,
                                       tenant_id=None,
                                       login=None,
                                       administrator_type=None,
                                       sid=None,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       tenant_id=tenant_id,
                       login=login,
                       administrator_type=administrator_type,
                       sid=sid)


def synapse_workspace_aad_admin_delete(client,
                                       resource_group_name,
                                       workspace_name,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def synapse_workspace_managed_identity_sql_control_setting_show(client,
                                                                resource_group_name,
                                                                workspace_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def synapse_workspace_managed_identity_sql_control_setting_create(client,
                                                                  resource_group_name,
                                                                  workspace_name,
                                                                  desired_state=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   desired_state=desired_state)


def synapse_workspace_managed_identity_sql_control_setting_update(client,
                                                                  resource_group_name,
                                                                  workspace_name,
                                                                  desired_state=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   desired_state=desired_state)


def synapse_integration_runtime_list(client,
                                     resource_group_name,
                                     workspace_name):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name)


def synapse_integration_runtime_show(client,
                                     resource_group_name,
                                     workspace_name,
                                     integration_runtime_name,
                                     if_none_match=None):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      integration_runtime_name=integration_runtime_name,
                      if_none_match=if_none_match)


def synapse_integration_runtime_create(client,
                                       resource_group_name,
                                       workspace_name,
                                       integration_runtime_name,
                                       properties,
                                       if_match=None,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       integration_runtime_name=integration_runtime_name,
                       if_match=if_match,
                       properties=properties)


def synapse_integration_runtime_update(client,
                                       resource_group_name,
                                       workspace_name,
                                       integration_runtime_name,
                                       auto_update=None,
                                       update_delay_offset=None):
    return client.update(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         integration_runtime_name=integration_runtime_name,
                         auto_update=auto_update,
                         update_delay_offset=update_delay_offset)


def synapse_integration_runtime_delete(client,
                                       resource_group_name,
                                       workspace_name,
                                       integration_runtime_name,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       integration_runtime_name=integration_runtime_name)


def synapse_integration_runtime_start(client,
                                      resource_group_name,
                                      workspace_name,
                                      integration_runtime_name):
    return client.start(resource_group_name=resource_group_name,
                        workspace_name=workspace_name,
                        integration_runtime_name=integration_runtime_name)


def synapse_integration_runtime_stop(client,
                                     resource_group_name,
                                     workspace_name,
                                     integration_runtime_name):
    return client.stop(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       integration_runtime_name=integration_runtime_name)


def synapse_integration_runtime_upgrade(client,
                                        resource_group_name,
                                        workspace_name,
                                        integration_runtime_name):
    return client.upgrade(resource_group_name=resource_group_name,
                          workspace_name=workspace_name,
                          integration_runtime_name=integration_runtime_name)


def synapse_integration_runtime_node_ip_address_get(client,
                                                    resource_group_name,
                                                    workspace_name,
                                                    integration_runtime_name,
                                                    node_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      integration_runtime_name=integration_runtime_name,
                      node_name=node_name)


def synapse_integration_runtime_object_metadata_get(client,
                                                    resource_group_name,
                                                    workspace_name,
                                                    integration_runtime_name,
                                                    metadata_path=None):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      integration_runtime_name=integration_runtime_name,
                      metadata_path=metadata_path)


def synapse_integration_runtime_object_metadata_refresh(client,
                                                        resource_group_name,
                                                        workspace_name,
                                                        integration_runtime_name):
    return client.refresh(resource_group_name=resource_group_name,
                          workspace_name=workspace_name,
                          integration_runtime_name=integration_runtime_name)


def synapse_integration_runtime_node_show(client,
                                          resource_group_name,
                                          workspace_name,
                                          integration_runtime_name,
                                          node_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      integration_runtime_name=integration_runtime_name,
                      node_name=node_name)


def synapse_integration_runtime_node_update(client,
                                            resource_group_name,
                                            workspace_name,
                                            integration_runtime_name,
                                            node_name,
                                            concurrent_jobs_limit=None):
    return client.update(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         integration_runtime_name=integration_runtime_name,
                         node_name=node_name,
                         concurrent_jobs_limit=concurrent_jobs_limit)


def synapse_integration_runtime_node_delete(client,
                                            resource_group_name,
                                            workspace_name,
                                            integration_runtime_name,
                                            node_name):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         integration_runtime_name=integration_runtime_name,
                         node_name=node_name)


def synapse_integration_runtime_credentials_sync(client,
                                                 resource_group_name,
                                                 workspace_name,
                                                 integration_runtime_name):
    return client.sync(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       integration_runtime_name=integration_runtime_name)


def synapse_integration_runtime_connection_info_get(client,
                                                    resource_group_name,
                                                    workspace_name,
                                                    integration_runtime_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      integration_runtime_name=integration_runtime_name)


def synapse_integration_runtime_auth_key_list(client,
                                              resource_group_name,
                                              workspace_name,
                                              integration_runtime_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       integration_runtime_name=integration_runtime_name)


def synapse_integration_runtime_auth_key_regenerate(client,
                                                    resource_group_name,
                                                    workspace_name,
                                                    integration_runtime_name,
                                                    key_name=None):
    return client.regenerate(resource_group_name=resource_group_name,
                             workspace_name=workspace_name,
                             integration_runtime_name=integration_runtime_name,
                             key_name=key_name)


def synapse_integration_runtime_monitoring_data_get(client,
                                                    resource_group_name,
                                                    workspace_name,
                                                    integration_runtime_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      integration_runtime_name=integration_runtime_name)


def synapse_integration_runtime_status_get(client,
                                           resource_group_name,
                                           workspace_name,
                                           integration_runtime_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      integration_runtime_name=integration_runtime_name)


def synapse_private_link_resource_list(client,
                                       resource_group_name,
                                       workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def synapse_private_link_resource_show(client,
                                       resource_group_name,
                                       workspace_name,
                                       private_link_resource_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      private_link_resource_name=private_link_resource_name)


def synapse_private_endpoint_connection_list(client,
                                             resource_group_name,
                                             workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def synapse_private_endpoint_connection_show(client,
                                             resource_group_name,
                                             workspace_name,
                                             private_endpoint_connection_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      private_endpoint_connection_name=private_endpoint_connection_name)


def synapse_private_endpoint_connection_create(client,
                                               resource_group_name,
                                               workspace_name,
                                               private_endpoint_connection_name,
                                               no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       private_endpoint_connection_name=private_endpoint_connection_name)


def synapse_private_endpoint_connection_delete(client,
                                               resource_group_name,
                                               workspace_name,
                                               private_endpoint_connection_name,
                                               no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       private_endpoint_connection_name=private_endpoint_connection_name)


def synapse_private_link_hub_list(client,
                                  resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def synapse_private_link_hub_show(client,
                                  resource_group_name,
                                  private_link_hub_name):
    return client.get(resource_group_name=resource_group_name,
                      private_link_hub_name=private_link_hub_name)


def synapse_private_link_hub_create(client,
                                    resource_group_name,
                                    private_link_hub_name,
                                    location,
                                    tags=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   private_link_hub_name=private_link_hub_name,
                                   tags=tags,
                                   location=location)


def synapse_private_link_hub_update(client,
                                    resource_group_name,
                                    private_link_hub_name,
                                    tags=None):
    return client.update(resource_group_name=resource_group_name,
                         private_link_hub_name=private_link_hub_name,
                         tags=tags)


def synapse_private_link_hub_delete(client,
                                    resource_group_name,
                                    private_link_hub_name):
    return client.delete(resource_group_name=resource_group_name,
                         private_link_hub_name=private_link_hub_name)
