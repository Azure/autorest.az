# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


def load_command_table(self, _):

    from .generated._client_factory import cf_factory

    datafactory_factory = CliCommandType(
        operations_tmpl="undefined.operations._factories_operations#FactoriesOperations.{}", client_factory=cf_factory
    )
    with self.command_group("datafactory", datafactory_factory) as g:
        g.custom_command("", "")
        g.custom_show_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")

    from .generated._client_factory import cf_trigger

    datafactory_trigger = CliCommandType(
        operations_tmpl="undefined.operations._triggers_operations#TriggersOperations.{}", client_factory=cf_trigger
    )
    with self.command_group("datafactory trigger", datafactory_trigger) as g:
        g.custom_command("", "")
        g.custom_show_command("", "")
        g.custom_command("", "")
        g.generic_update_command("", custom_func_name=datafactory_trigger_update, setter_arg_name=trigger)
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "", suppose_no_wait=True)
        g.custom_command("", "", suppose_no_wait=True)
        g.custom_command("", "", suppose_no_wait=True)
        g.custom_command("", "", suppose_no_wait=True)

    from .generated._client_factory import cf_integration_runtime

    datafactory_integration_runtime = CliCommandType(
        operations_tmpl="undefined.operations._integration_runtimes_operations#IntegrationRuntimesOperations.{}",
        client_factory=cf_integration_runtime,
    )
    with self.command_group("datafactory integration-runtime", datafactory_integration_runtime) as g:
        g.custom_command("", "")
        g.custom_show_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "")
        g.custom_command("", "", suppose_no_wait=True)
        g.custom_command("", "", suppose_no_wait=True)
        g.custom_command("", "")
        g.custom_command("", "")

    from .generated._client_factory import cf_domain_service

    datafactory_domain_service = CliCommandType(
        operations_tmpl="undefined.operations._domain_services_operations#DomainServicesOperations.{}",
        client_factory=cf_domain_service,
    )
    with self.command_group("datafactory domain-service", datafactory_domain_service) as g:
        g.custom_command("", "", suppose_no_wait=True)
        g.custom_command("", "", suppose_no_wait=True)

    from .generated._client_factory import cf_group

    datafactory_group = CliCommandType(
        operations_tmpl="undefined.operations._groups_operations#GroupsOperations.{}", client_factory=cf_group
    )
    with self.command_group("datafactory group", datafactory_group) as g:
        g.custom_command("", "")
